{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport ActionDelete from '@mui/icons-material/Delete';\nimport { alpha, styled } from '@mui/material/styles';\nimport { useDeleteMany, useRefresh, useNotify, useResourceContext, useListContext, useTranslate } from 'ra-core';\nimport { Button } from './Button';\nexport var BulkDeleteWithUndoButton = function (props) {\n  var _a = props.label,\n    label = _a === void 0 ? 'ra.action.delete' : _a,\n    _b = props.icon,\n    icon = _b === void 0 ? defaultIcon : _b,\n    onClick = props.onClick,\n    _c = props.mutationOptions,\n    mutationOptions = _c === void 0 ? {} : _c,\n    successMessage = props.successMessage,\n    rest = __rest(props, [\"label\", \"icon\", \"onClick\", \"mutationOptions\", \"successMessage\"]);\n  var mutationMeta = mutationOptions.meta,\n    otherMutationOptions = __rest(mutationOptions, [\"meta\"]);\n  var _d = useListContext(),\n    selectedIds = _d.selectedIds,\n    onUnselectItems = _d.onUnselectItems;\n  var notify = useNotify();\n  var resource = useResourceContext(props);\n  var refresh = useRefresh();\n  var translate = useTranslate();\n  var _e = useDeleteMany(),\n    deleteMany = _e[0],\n    isPending = _e[1].isPending;\n  var handleClick = function (e) {\n    deleteMany(resource, {\n      ids: selectedIds,\n      meta: mutationMeta\n    }, __assign({\n      onSuccess: function () {\n        notify(successMessage !== null && successMessage !== void 0 ? successMessage : \"resources.\".concat(resource, \".notifications.deleted\"), {\n          type: 'info',\n          messageArgs: {\n            smart_count: selectedIds.length,\n            _: translate('ra.notification.deleted', {\n              smart_count: selectedIds.length\n            })\n          },\n          undoable: true\n        });\n        onUnselectItems();\n      },\n      onError: function (error) {\n        notify(typeof error === 'string' ? error : error.message || 'ra.notification.http_error', {\n          type: 'error',\n          messageArgs: {\n            _: typeof error === 'string' ? error : error && error.message ? error.message : undefined\n          }\n        });\n        refresh();\n      },\n      mutationMode: 'undoable'\n    }, otherMutationOptions));\n    if (typeof onClick === 'function') {\n      onClick(e);\n    }\n  };\n  return React.createElement(StyledButton, __assign({\n    onClick: handleClick,\n    label: label,\n    disabled: isPending\n  }, sanitizeRestProps(rest)), icon);\n};\nvar defaultIcon = React.createElement(ActionDelete, null);\nvar sanitizeRestProps = function (_a) {\n  var classes = _a.classes,\n    label = _a.label,\n    rest = __rest(_a, [\"classes\", \"label\"]);\n  return rest;\n};\nvar PREFIX = 'RaBulkDeleteWithUndoButton';\nvar StyledButton = styled(Button, {\n  name: PREFIX,\n  overridesResolver: function (props, styles) {\n    return styles.root;\n  }\n})(function (_a) {\n  var theme = _a.theme;\n  return {\n    color: theme.palette.error.main,\n    '&:hover': {\n      backgroundColor: alpha(theme.palette.error.main, 0.12),\n      // Reset on mouse devices\n      '@media (hover: none)': {\n        backgroundColor: 'transparent'\n      }\n    }\n  };\n});","map":{"version":3,"names":["React","ActionDelete","alpha","styled","useDeleteMany","useRefresh","useNotify","useResourceContext","useListContext","useTranslate","Button","BulkDeleteWithUndoButton","props","_a","label","_b","icon","defaultIcon","onClick","_c","mutationOptions","successMessage","rest","__rest","mutationMeta","meta","otherMutationOptions","_d","selectedIds","onUnselectItems","notify","resource","refresh","translate","_e","deleteMany","isPending","handleClick","e","ids","__assign","onSuccess","concat","type","messageArgs","smart_count","length","_","undoable","onError","error","message","undefined","mutationMode","createElement","StyledButton","disabled","sanitizeRestProps","classes","PREFIX","name","overridesResolver","styles","root","theme","color","palette","main","backgroundColor"],"sources":["/home/diarietou/Bureau/afterSA/test/testfront/react-admin-test/node_modules/ra-ui-materialui/src/button/BulkDeleteWithUndoButton.tsx"],"sourcesContent":["import * as React from 'react';\nimport { ReactElement } from 'react';\nimport ActionDelete from '@mui/icons-material/Delete';\nimport { alpha, styled } from '@mui/material/styles';\nimport {\n    useDeleteMany,\n    useRefresh,\n    useNotify,\n    useResourceContext,\n    useListContext,\n    RaRecord,\n    DeleteManyParams,\n    useTranslate,\n} from 'ra-core';\n\nimport { Button, ButtonProps } from './Button';\nimport { UseMutationOptions } from '@tanstack/react-query';\n\nexport const BulkDeleteWithUndoButton = (\n    props: BulkDeleteWithUndoButtonProps\n) => {\n    const {\n        label = 'ra.action.delete',\n        icon = defaultIcon,\n        onClick,\n        mutationOptions = {},\n        successMessage,\n        ...rest\n    } = props;\n    const { meta: mutationMeta, ...otherMutationOptions } = mutationOptions;\n    const { selectedIds, onUnselectItems } = useListContext();\n\n    const notify = useNotify();\n    const resource = useResourceContext(props);\n    const refresh = useRefresh();\n    const translate = useTranslate();\n    const [deleteMany, { isPending }] = useDeleteMany();\n\n    const handleClick = e => {\n        deleteMany(\n            resource,\n            { ids: selectedIds, meta: mutationMeta },\n            {\n                onSuccess: () => {\n                    notify(\n                        successMessage ??\n                            `resources.${resource}.notifications.deleted`,\n                        {\n                            type: 'info',\n                            messageArgs: {\n                                smart_count: selectedIds.length,\n                                _: translate('ra.notification.deleted', {\n                                    smart_count: selectedIds.length,\n                                }),\n                            },\n                            undoable: true,\n                        }\n                    );\n                    onUnselectItems();\n                },\n                onError: (error: Error) => {\n                    notify(\n                        typeof error === 'string'\n                            ? error\n                            : error.message || 'ra.notification.http_error',\n                        {\n                            type: 'error',\n                            messageArgs: {\n                                _:\n                                    typeof error === 'string'\n                                        ? error\n                                        : error && error.message\n                                          ? error.message\n                                          : undefined,\n                            },\n                        }\n                    );\n                    refresh();\n                },\n                mutationMode: 'undoable',\n                ...otherMutationOptions,\n            }\n        );\n        if (typeof onClick === 'function') {\n            onClick(e);\n        }\n    };\n\n    return (\n        <StyledButton\n            onClick={handleClick}\n            label={label}\n            disabled={isPending}\n            {...sanitizeRestProps(rest)}\n        >\n            {icon}\n        </StyledButton>\n    );\n};\n\nconst defaultIcon = <ActionDelete />;\n\nconst sanitizeRestProps = ({\n    classes,\n    label,\n    ...rest\n}: Omit<BulkDeleteWithUndoButtonProps, 'resource' | 'icon'>) => rest;\n\nexport interface BulkDeleteWithUndoButtonProps<\n    RecordType extends RaRecord = any,\n    MutationOptionsError = unknown,\n> extends ButtonProps {\n    icon?: ReactElement;\n    mutationOptions?: UseMutationOptions<\n        RecordType,\n        MutationOptionsError,\n        DeleteManyParams<RecordType>\n    > & { meta?: any };\n    successMessage?: string;\n}\n\nconst PREFIX = 'RaBulkDeleteWithUndoButton';\n\nconst StyledButton = styled(Button, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    color: theme.palette.error.main,\n    '&:hover': {\n        backgroundColor: alpha(theme.palette.error.main, 0.12),\n        // Reset on mouse devices\n        '@media (hover: none)': {\n            backgroundColor: 'transparent',\n        },\n    },\n}));\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAE9B,OAAOC,YAAY,MAAM,4BAA4B;AACrD,SAASC,KAAK,EAAEC,MAAM,QAAQ,sBAAsB;AACpD,SACIC,aAAa,EACbC,UAAU,EACVC,SAAS,EACTC,kBAAkB,EAClBC,cAAc,EAGdC,YAAY,QACT,SAAS;AAEhB,SAASC,MAAM,QAAqB,UAAU;AAG9C,OAAO,IAAMC,wBAAwB,GAAG,SAAAA,CACpCC,KAAoC;EAGhC,IAAAC,EAAA,GAMAD,KAAK,CAAAE,KANqB;IAA1BA,KAAK,GAAAD,EAAA,cAAG,kBAAkB,GAAAA,EAAA;IAC1BE,EAAA,GAKAH,KAAK,CAAAI,IALa;IAAlBA,IAAI,GAAAD,EAAA,cAAGE,WAAW,GAAAF,EAAA;IAClBG,OAAO,GAIPN,KAAK,CAAAM,OAJE;IACPC,EAAA,GAGAP,KAAK,CAAAQ,eAHe;IAApBA,eAAe,GAAAD,EAAA,cAAG,EAAE,GAAAA,EAAA;IACpBE,cAAc,GAEdT,KAAK,CAAAS,cAFS;IACXC,IAAI,GAAAC,MAAA,CACPX,KAAK,EAPH,iEAOL,CADU;EAEH,IAAMY,YAAY,GAA8BJ,eAAe,CAAAK,IAA7C;IAAKC,oBAAoB,GAAAH,MAAA,CAAKH,eAAe,EAAjE,QAA+C,CAAF;EAC7C,IAAAO,EAAA,GAAmCnB,cAAc,EAAE;IAAjDoB,WAAW,GAAAD,EAAA,CAAAC,WAAA;IAAEC,eAAe,GAAAF,EAAA,CAAAE,eAAqB;EAEzD,IAAMC,MAAM,GAAGxB,SAAS,EAAE;EAC1B,IAAMyB,QAAQ,GAAGxB,kBAAkB,CAACK,KAAK,CAAC;EAC1C,IAAMoB,OAAO,GAAG3B,UAAU,EAAE;EAC5B,IAAM4B,SAAS,GAAGxB,YAAY,EAAE;EAC1B,IAAAyB,EAAA,GAA8B9B,aAAa,EAAE;IAA5C+B,UAAU,GAAAD,EAAA;IAAIE,SAAS,GAAAF,EAAA,IAAAE,SAAqB;EAEnD,IAAMC,WAAW,GAAG,SAAAA,CAAAC,CAAC;IACjBH,UAAU,CACNJ,QAAQ,EACR;MAAEQ,GAAG,EAAEX,WAAW;MAAEH,IAAI,EAAED;IAAY,CAAE,EAAAgB,QAAA;MAEpCC,SAAS,EAAE,SAAAA,CAAA;QACPX,MAAM,CACFT,cAAc,aAAdA,cAAc,cAAdA,cAAc,GACV,aAAAqB,MAAA,CAAaX,QAAQ,2BAAwB,EACjD;UACIY,IAAI,EAAE,MAAM;UACZC,WAAW,EAAE;YACTC,WAAW,EAAEjB,WAAW,CAACkB,MAAM;YAC/BC,CAAC,EAAEd,SAAS,CAAC,yBAAyB,EAAE;cACpCY,WAAW,EAAEjB,WAAW,CAACkB;aAC5B;WACJ;UACDE,QAAQ,EAAE;SACb,CACJ;QACDnB,eAAe,EAAE;MACrB,CAAC;MACDoB,OAAO,EAAE,SAAAA,CAACC,KAAY;QAClBpB,MAAM,CACF,OAAOoB,KAAK,KAAK,QAAQ,GACnBA,KAAK,GACLA,KAAK,CAACC,OAAO,IAAI,4BAA4B,EACnD;UACIR,IAAI,EAAE,OAAO;UACbC,WAAW,EAAE;YACTG,CAAC,EACG,OAAOG,KAAK,KAAK,QAAQ,GACnBA,KAAK,GACLA,KAAK,IAAIA,KAAK,CAACC,OAAO,GACpBD,KAAK,CAACC,OAAO,GACbC;;SAEnB,CACJ;QACDpB,OAAO,EAAE;MACb,CAAC;MACDqB,YAAY,EAAE;IAAU,GACrB3B,oBAAoB,EAE9B;IACD,IAAI,OAAOR,OAAO,KAAK,UAAU,EAAE;MAC/BA,OAAO,CAACoB,CAAC,CAAC;;EAElB,CAAC;EAED,OACItC,KAAA,CAAAsD,aAAA,CAACC,YAAY,EAAAf,QAAA;IACTtB,OAAO,EAAEmB,WAAW;IACpBvB,KAAK,EAAEA,KAAK;IACZ0C,QAAQ,EAAEpB;EAAS,GACfqB,iBAAiB,CAACnC,IAAI,CAAC,GAE1BN,IAAI,CACM;AAEvB,CAAC;AAED,IAAMC,WAAW,GAAGjB,KAAA,CAAAsD,aAAA,CAACrD,YAAY,OAAG;AAEpC,IAAMwD,iBAAiB,GAAG,SAAAA,CAAC5C,EAIgC;EAHvD,IAAA6C,OAAO,GAAA7C,EAAA,CAAA6C,OAAA;IACP5C,KAAK,GAAAD,EAAA,CAAAC,KAAA;IACFQ,IAAI,GAAAC,MAAA,CAAAV,EAAA,EAHgB,oBAI1B,CADU;EACqD,OAAAS,IAAI;CAAA;AAepE,IAAMqC,MAAM,GAAG,4BAA4B;AAE3C,IAAMJ,YAAY,GAAGpD,MAAM,CAACO,MAAM,EAAE;EAChCkD,IAAI,EAAED,MAAM;EACZE,iBAAiB,EAAE,SAAAA,CAACjD,KAAK,EAAEkD,MAAM;IAAK,OAAAA,MAAM,CAACC,IAAI;EAAX;CACzC,CAAC,CAAC,UAAClD,EAAS;MAAPmD,KAAK,GAAAnD,EAAA,CAAAmD,KAAA;EAAO,OAAC;IACfC,KAAK,EAAED,KAAK,CAACE,OAAO,CAAChB,KAAK,CAACiB,IAAI;IAC/B,SAAS,EAAE;MACPC,eAAe,EAAElE,KAAK,CAAC8D,KAAK,CAACE,OAAO,CAAChB,KAAK,CAACiB,IAAI,EAAE,IAAI,CAAC;MACtD;MACA,sBAAsB,EAAE;QACpBC,eAAe,EAAE;;;GAG5B;AATiB,CAShB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}