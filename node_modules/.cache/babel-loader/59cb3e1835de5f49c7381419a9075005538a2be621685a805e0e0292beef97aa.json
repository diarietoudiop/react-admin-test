{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nvar _a;\nimport { Avatar, List, ListItemAvatar, ListItemIcon, ListItemSecondaryAction, ListItemText } from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport { RecordContextProvider, sanitizeListRestProps, useGetRecordRepresentation, useListContextWithProps, useRecordContext, useResourceContext, useTranslate } from 'ra-core';\nimport * as React from 'react';\nimport { isValidElement } from 'react';\nimport { ListNoResults } from '../ListNoResults';\nimport { SimpleListLoading } from './SimpleListLoading';\nimport { SimpleListItem } from './SimpleListItem';\n/**\n * The <SimpleList> component renders a list of records as a Material UI <List>.\n * It is usually used as a child of react-admin's <List> and <ReferenceManyField> components.\n *\n * Also widely used on Mobile.\n *\n * Props:\n * - primaryText: function returning a React element (or some text) based on the record\n * - secondaryText: same\n * - tertiaryText: same\n * - leftAvatar: function returning a React element based on the record\n * - leftIcon: same\n * - rightAvatar: same\n * - rightIcon: same\n * - linkType: deprecated - 'edit' or 'show', or a function returning 'edit' or 'show' based on the record\n * - rowClick: The action to trigger when the user clicks on a row.\n * - rowStyle: function returning a style object based on (record, index)\n * - rowSx: function returning a sx object based on (record, index)\n *\n * @example // Display all posts as a List\n * const postRowSx = (record, index) => ({\n *     backgroundColor: record.views >= 500 ? '#efe' : 'white',\n * });\n * export const PostList = () => (\n *     <List>\n *         <SimpleList\n *             primaryText={record => record.title}\n *             secondaryText={record => `${record.views} views`}\n *             tertiaryText={record =>\n *                 new Date(record.published_at).toLocaleDateString()\n *             }\n *             rowSx={postRowSx}\n *          />\n *     </List>\n * );\n */\nexport var SimpleList = function (props) {\n  var className = props.className,\n    _a = props.empty,\n    empty = _a === void 0 ? DefaultEmpty : _a,\n    hasBulkActions = props.hasBulkActions,\n    leftAvatar = props.leftAvatar,\n    leftIcon = props.leftIcon,\n    linkType = props.linkType,\n    rowClick = props.rowClick,\n    primaryText = props.primaryText,\n    rightAvatar = props.rightAvatar,\n    rightIcon = props.rightIcon,\n    secondaryText = props.secondaryText,\n    tertiaryText = props.tertiaryText,\n    ref = props.ref,\n    rowSx = props.rowSx,\n    rowStyle = props.rowStyle,\n    resource = props.resource,\n    rest = __rest(props, [\"className\", \"empty\", \"hasBulkActions\", \"leftAvatar\", \"leftIcon\", \"linkType\", \"rowClick\", \"primaryText\", \"rightAvatar\", \"rightIcon\", \"secondaryText\", \"tertiaryText\", \"ref\", \"rowSx\", \"rowStyle\", \"resource\"]);\n  var _b = useListContextWithProps(props),\n    data = _b.data,\n    isPending = _b.isPending,\n    total = _b.total;\n  if (isPending === true) {\n    return React.createElement(SimpleListLoading, {\n      className: className,\n      hasLeftAvatarOrIcon: !!leftIcon || !!leftAvatar,\n      hasRightAvatarOrIcon: !!rightIcon || !!rightAvatar,\n      hasSecondaryText: !!secondaryText,\n      hasTertiaryText: !!tertiaryText\n    });\n  }\n  if (data == null || data.length === 0 || total === 0) {\n    if (empty) {\n      return empty;\n    }\n    return null;\n  }\n  return React.createElement(Root, __assign({\n    className: className\n  }, sanitizeListRestProps(rest)), data.map(function (record, rowIndex) {\n    return React.createElement(RecordContextProvider, {\n      key: record.id,\n      value: record\n    }, React.createElement(SimpleListItem, {\n      key: record.id,\n      rowIndex: rowIndex,\n      linkType: linkType,\n      rowClick: rowClick,\n      rowSx: rowSx,\n      rowStyle: rowStyle,\n      resource: resource\n    }, React.createElement(SimpleListItemContent, {\n      leftAvatar: leftAvatar,\n      leftIcon: leftIcon,\n      primaryText: primaryText,\n      rightAvatar: rightAvatar,\n      rightIcon: rightIcon,\n      secondaryText: secondaryText,\n      tertiaryText: tertiaryText,\n      rowIndex: rowIndex\n    })));\n  }));\n};\nvar SimpleListItemContent = function (props) {\n  var leftAvatar = props.leftAvatar,\n    leftIcon = props.leftIcon,\n    primaryText = props.primaryText,\n    rightAvatar = props.rightAvatar,\n    rightIcon = props.rightIcon,\n    secondaryText = props.secondaryText,\n    tertiaryText = props.tertiaryText;\n  var resource = useResourceContext(props);\n  var record = useRecordContext(props);\n  var getRecordRepresentation = useGetRecordRepresentation(resource);\n  var translate = useTranslate();\n  var renderAvatar = function (record, avatarCallback) {\n    var avatarValue = avatarCallback(record, record.id);\n    if (typeof avatarValue === 'string' && (avatarValue.startsWith('http') || avatarValue.startsWith('data:'))) {\n      return React.createElement(Avatar, {\n        src: avatarValue\n      });\n    } else {\n      return React.createElement(Avatar, null, avatarValue);\n    }\n  };\n  if (!record) return null;\n  return React.createElement(React.Fragment, null, leftIcon && React.createElement(ListItemIcon, null, leftIcon(record, record.id)), leftAvatar && React.createElement(ListItemAvatar, null, renderAvatar(record, leftAvatar)), React.createElement(ListItemText, {\n    primary: React.createElement(\"div\", null, primaryText ? typeof primaryText === 'string' ? translate(primaryText, __assign(__assign({}, record), {\n      _: primaryText\n    })) : isValidElement(primaryText) ? primaryText :\n    // @ts-ignore\n    primaryText(record, record.id) : getRecordRepresentation(record), !!tertiaryText && (isValidElement(tertiaryText) ? tertiaryText : React.createElement(\"span\", {\n      className: SimpleListClasses.tertiary\n    }, typeof tertiaryText === 'string' ? translate(tertiaryText, __assign(__assign({}, record), {\n      _: tertiaryText\n    })) : isValidElement(tertiaryText) ? tertiaryText :\n    // @ts-ignore\n    tertiaryText(record, record.id)))),\n    secondary: !!secondaryText && (typeof secondaryText === 'string' ? translate(secondaryText, __assign(__assign({}, record), {\n      _: secondaryText\n    })) : isValidElement(secondaryText) ? secondaryText :\n    // @ts-ignore\n    secondaryText(record, record.id))\n  }), (rightAvatar || rightIcon) && React.createElement(ListItemSecondaryAction, null, rightAvatar && React.createElement(Avatar, null, renderAvatar(record, rightAvatar)), rightIcon && React.createElement(ListItemIcon, null, rightIcon(record, record.id))));\n};\nvar PREFIX = 'RaSimpleList';\nexport var SimpleListClasses = {\n  tertiary: \"\".concat(PREFIX, \"-tertiary\")\n};\nvar Root = styled(List, {\n  name: PREFIX,\n  overridesResolver: function (props, styles) {\n    return styles.root;\n  }\n})((_a = {}, _a[\"& .\".concat(SimpleListClasses.tertiary)] = {\n  float: 'right',\n  opacity: 0.541176\n}, _a));\nvar DefaultEmpty = React.createElement(ListNoResults, null);","map":{"version":3,"names":["Avatar","List","ListItemAvatar","ListItemIcon","ListItemSecondaryAction","ListItemText","styled","RecordContextProvider","sanitizeListRestProps","useGetRecordRepresentation","useListContextWithProps","useRecordContext","useResourceContext","useTranslate","React","isValidElement","ListNoResults","SimpleListLoading","SimpleListItem","SimpleList","props","className","_a","empty","DefaultEmpty","hasBulkActions","leftAvatar","leftIcon","linkType","rowClick","primaryText","rightAvatar","rightIcon","secondaryText","tertiaryText","ref","rowSx","rowStyle","resource","rest","__rest","_b","data","isPending","total","createElement","hasLeftAvatarOrIcon","hasRightAvatarOrIcon","hasSecondaryText","hasTertiaryText","length","Root","__assign","map","record","rowIndex","key","id","value","SimpleListItemContent","getRecordRepresentation","translate","renderAvatar","avatarCallback","avatarValue","startsWith","src","Fragment","primary","_","SimpleListClasses","tertiary","secondary","PREFIX","concat","name","overridesResolver","styles","root","float","opacity"],"sources":["/home/diarietou/Bureau/afterSA/test/testfront/react-admin-test/node_modules/ra-ui-materialui/src/list/SimpleList/SimpleList.tsx"],"sourcesContent":["import {\n    Avatar,\n    List,\n    ListItemAvatar,\n    ListItemIcon,\n    ListItemSecondaryAction,\n    ListItemText,\n    ListProps,\n} from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport {\n    RaRecord,\n    RecordContextProvider,\n    sanitizeListRestProps,\n    useGetRecordRepresentation,\n    useListContextWithProps,\n    useRecordContext,\n    useResourceContext,\n    useTranslate,\n} from 'ra-core';\nimport * as React from 'react';\nimport { isValidElement, ReactElement } from 'react';\n\nimport { ListNoResults } from '../ListNoResults';\nimport { SimpleListLoading } from './SimpleListLoading';\nimport {\n    FunctionToElement,\n    SimpleListBaseProps,\n    SimpleListItem,\n    SimpleListItemProps,\n} from './SimpleListItem';\n\n/**\n * The <SimpleList> component renders a list of records as a Material UI <List>.\n * It is usually used as a child of react-admin's <List> and <ReferenceManyField> components.\n *\n * Also widely used on Mobile.\n *\n * Props:\n * - primaryText: function returning a React element (or some text) based on the record\n * - secondaryText: same\n * - tertiaryText: same\n * - leftAvatar: function returning a React element based on the record\n * - leftIcon: same\n * - rightAvatar: same\n * - rightIcon: same\n * - linkType: deprecated - 'edit' or 'show', or a function returning 'edit' or 'show' based on the record\n * - rowClick: The action to trigger when the user clicks on a row.\n * - rowStyle: function returning a style object based on (record, index)\n * - rowSx: function returning a sx object based on (record, index)\n *\n * @example // Display all posts as a List\n * const postRowSx = (record, index) => ({\n *     backgroundColor: record.views >= 500 ? '#efe' : 'white',\n * });\n * export const PostList = () => (\n *     <List>\n *         <SimpleList\n *             primaryText={record => record.title}\n *             secondaryText={record => `${record.views} views`}\n *             tertiaryText={record =>\n *                 new Date(record.published_at).toLocaleDateString()\n *             }\n *             rowSx={postRowSx}\n *          />\n *     </List>\n * );\n */\nexport const SimpleList = <RecordType extends RaRecord = any>(\n    props: SimpleListProps<RecordType>\n) => {\n    const {\n        className,\n        empty = DefaultEmpty,\n        hasBulkActions,\n        leftAvatar,\n        leftIcon,\n        linkType,\n        rowClick,\n        primaryText,\n        rightAvatar,\n        rightIcon,\n        secondaryText,\n        tertiaryText,\n        ref,\n        rowSx,\n        rowStyle,\n        resource,\n        ...rest\n    } = props;\n    const { data, isPending, total } =\n        useListContextWithProps<RecordType>(props);\n\n    if (isPending === true) {\n        return (\n            <SimpleListLoading\n                className={className}\n                hasLeftAvatarOrIcon={!!leftIcon || !!leftAvatar}\n                hasRightAvatarOrIcon={!!rightIcon || !!rightAvatar}\n                hasSecondaryText={!!secondaryText}\n                hasTertiaryText={!!tertiaryText}\n            />\n        );\n    }\n\n    if (data == null || data.length === 0 || total === 0) {\n        if (empty) {\n            return empty;\n        }\n\n        return null;\n    }\n\n    return (\n        <Root className={className} {...sanitizeListRestProps(rest)}>\n            {data.map((record, rowIndex) => (\n                <RecordContextProvider key={record.id} value={record}>\n                    <SimpleListItem\n                        key={record.id}\n                        rowIndex={rowIndex}\n                        linkType={linkType}\n                        rowClick={rowClick}\n                        rowSx={rowSx}\n                        rowStyle={rowStyle}\n                        resource={resource}\n                    >\n                        <SimpleListItemContent\n                            leftAvatar={leftAvatar}\n                            leftIcon={leftIcon}\n                            primaryText={primaryText}\n                            rightAvatar={rightAvatar}\n                            rightIcon={rightIcon}\n                            secondaryText={secondaryText}\n                            tertiaryText={tertiaryText}\n                            rowIndex={rowIndex}\n                        />\n                    </SimpleListItem>\n                </RecordContextProvider>\n            ))}\n        </Root>\n    );\n};\n\nexport interface SimpleListProps<RecordType extends RaRecord = any>\n    extends SimpleListBaseProps<RecordType>,\n        Omit<ListProps, 'classes'> {\n    className?: string;\n    empty?: ReactElement;\n    hasBulkActions?: boolean;\n    // can be injected when using the component without context\n    resource?: string;\n    data?: RecordType[];\n    isLoading?: boolean;\n    isPending?: boolean;\n    isLoaded?: boolean;\n    total?: number;\n}\n\nconst SimpleListItemContent = <RecordType extends RaRecord = any>(\n    props: SimpleListItemProps<RecordType>\n) => {\n    const {\n        leftAvatar,\n        leftIcon,\n        primaryText,\n        rightAvatar,\n        rightIcon,\n        secondaryText,\n        tertiaryText,\n    } = props;\n    const resource = useResourceContext(props);\n    const record = useRecordContext<RecordType>(props);\n    const getRecordRepresentation = useGetRecordRepresentation(resource);\n    const translate = useTranslate();\n\n    const renderAvatar = (\n        record: RecordType,\n        avatarCallback: FunctionToElement<RecordType>\n    ) => {\n        const avatarValue = avatarCallback(record, record.id);\n        if (\n            typeof avatarValue === 'string' &&\n            (avatarValue.startsWith('http') || avatarValue.startsWith('data:'))\n        ) {\n            return <Avatar src={avatarValue} />;\n        } else {\n            return <Avatar>{avatarValue}</Avatar>;\n        }\n    };\n\n    if (!record) return null;\n\n    return (\n        <>\n            {leftIcon && (\n                <ListItemIcon>{leftIcon(record, record.id)}</ListItemIcon>\n            )}\n            {leftAvatar && (\n                <ListItemAvatar>\n                    {renderAvatar(record, leftAvatar)}\n                </ListItemAvatar>\n            )}\n            <ListItemText\n                primary={\n                    <div>\n                        {primaryText\n                            ? typeof primaryText === 'string'\n                                ? translate(primaryText, {\n                                      ...record,\n                                      _: primaryText,\n                                  })\n                                : isValidElement(primaryText)\n                                  ? primaryText\n                                  : // @ts-ignore\n                                    primaryText(record, record.id)\n                            : getRecordRepresentation(record)}\n\n                        {!!tertiaryText &&\n                            (isValidElement(tertiaryText) ? (\n                                tertiaryText\n                            ) : (\n                                <span className={SimpleListClasses.tertiary}>\n                                    {typeof tertiaryText === 'string'\n                                        ? translate(tertiaryText, {\n                                              ...record,\n                                              _: tertiaryText,\n                                          })\n                                        : isValidElement(tertiaryText)\n                                          ? tertiaryText\n                                          : // @ts-ignore\n                                            tertiaryText(record, record.id)}\n                                </span>\n                            ))}\n                    </div>\n                }\n                secondary={\n                    !!secondaryText &&\n                    (typeof secondaryText === 'string'\n                        ? translate(secondaryText, {\n                              ...record,\n                              _: secondaryText,\n                          })\n                        : isValidElement(secondaryText)\n                          ? secondaryText\n                          : // @ts-ignore\n                            secondaryText(record, record.id))\n                }\n            />\n            {(rightAvatar || rightIcon) && (\n                <ListItemSecondaryAction>\n                    {rightAvatar && (\n                        <Avatar>{renderAvatar(record, rightAvatar)}</Avatar>\n                    )}\n                    {rightIcon && (\n                        <ListItemIcon>\n                            {rightIcon(record, record.id)}\n                        </ListItemIcon>\n                    )}\n                </ListItemSecondaryAction>\n            )}\n        </>\n    );\n};\n\nconst PREFIX = 'RaSimpleList';\n\nexport const SimpleListClasses = {\n    tertiary: `${PREFIX}-tertiary`,\n};\n\nconst Root = styled(List, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})({\n    [`& .${SimpleListClasses.tertiary}`]: { float: 'right', opacity: 0.541176 },\n});\n\nconst DefaultEmpty = <ListNoResults />;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}