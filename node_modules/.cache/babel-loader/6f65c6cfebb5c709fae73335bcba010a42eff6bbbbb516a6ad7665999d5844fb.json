{"ast":null,"code":"var _a;\nimport * as React from 'react';\nimport { memo } from 'react';\nimport clsx from 'clsx';\nimport { Button, Menu, MenuItem, Tooltip, IconButton, useMediaQuery } from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport SortIcon from '@mui/icons-material/Sort';\nimport ArrowDropDownIcon from '@mui/icons-material/ArrowDropDown';\nimport { useListSortContext, useTranslate, useTranslateLabel, shallowEqual } from 'ra-core';\n/**\n * A button allowing to change the sort field and order.\n *\n * To be used inside a ListContext (e.g. inside a <List> or <ReferenceManyField>)\n *\n * Expects one 'fields' prop, containing an array of field strings that shall\n * be used and displayed for sorting.\n *\n * When users clicks on the <SortButton>, they see a dropdown list with the\n * proposed sorting fields. Once they click on one of these fields, the related\n * list refreshes, re-sorted.\n *\n * @example\n *\n * import * as React from 'react';\n * import { TopToolbar, SortButton, CreateButton, ExportButton } from 'react-admin';\n *\n * const ListActions = () => (\n *     <TopToolbar>\n *         <SortButton fields={['reference', 'sales', 'stock']} />\n *         <CreateButton />\n *         <ExportButton />\n *     </TopToolbar>\n * );\n */\nvar SortButton = function (props) {\n  var fields = props.fields,\n    _a = props.label,\n    label = _a === void 0 ? 'ra.sort.sort_by' : _a,\n    _b = props.icon,\n    icon = _b === void 0 ? defaultIcon : _b,\n    sx = props.sx,\n    className = props.className,\n    resourceProp = props.resource;\n  var _c = useListSortContext(),\n    resourceFromContext = _c.resource,\n    sort = _c.sort,\n    setSort = _c.setSort;\n  var resource = resourceProp || resourceFromContext;\n  var translate = useTranslate();\n  var translateLabel = useTranslateLabel();\n  var isXSmall = useMediaQuery(function (theme) {\n    return theme.breakpoints.down('sm');\n  });\n  var _d = React.useState(null),\n    anchorEl = _d[0],\n    setAnchorEl = _d[1];\n  var handleClick = function (event) {\n    setAnchorEl(event.currentTarget);\n  };\n  var handleClose = function () {\n    setAnchorEl(null);\n  };\n  var handleChangeSort = function (event) {\n    var field = event.currentTarget.dataset.sort;\n    if (!field) {\n      throw new Error('<SortButton> MenuItems should have a data-sort attribute');\n    }\n    setSort({\n      field: field,\n      order: field === sort.field ? inverseOrder(sort.order) : 'ASC'\n    });\n    setAnchorEl(null);\n  };\n  var fieldLabel = translateLabel({\n    resource: resource,\n    source: sort.field\n  });\n  var buttonLabel = translate(label, {\n    field: fieldLabel,\n    field_lower_first: typeof fieldLabel === 'string' ? fieldLabel.charAt(0).toLowerCase() + fieldLabel.slice(1) : undefined,\n    order: translate(\"ra.sort.\".concat(sort.order)),\n    _: label\n  });\n  return React.createElement(Root, {\n    sx: sx,\n    className: clsx(className, classNames.root)\n  }, isXSmall ? React.createElement(Tooltip, {\n    title: buttonLabel\n  }, React.createElement(IconButton, {\n    \"aria-label\": buttonLabel,\n    color: \"primary\",\n    onClick: handleClick,\n    size: \"large\"\n  }, icon)) : React.createElement(Button, {\n    \"aria-controls\": \"simple-menu\",\n    \"aria-haspopup\": \"true\",\n    color: \"primary\",\n    onClick: handleClick,\n    startIcon: icon,\n    endIcon: React.createElement(ArrowDropDownIcon, null),\n    size: \"small\"\n  }, buttonLabel), React.createElement(Menu, {\n    id: \"simple-menu\",\n    anchorEl: anchorEl,\n    keepMounted: true,\n    open: Boolean(anchorEl),\n    onClose: handleClose\n  }, fields.map(function (field) {\n    return React.createElement(MenuItem, {\n      onClick: handleChangeSort,\n      \"data-sort\": field,\n      key: field\n    }, translateLabel({\n      resource: resource,\n      source: field\n    }), ' ', translate(\"ra.sort.\".concat(sort.field === field ? inverseOrder(sort.order) : 'ASC')));\n  })));\n};\nvar defaultIcon = React.createElement(SortIcon, null);\nvar inverseOrder = function (sort) {\n  return sort === 'ASC' ? 'DESC' : 'ASC';\n};\nvar arePropsEqual = function (prevProps, nextProps) {\n  return shallowEqual(prevProps.fields, nextProps.fields);\n};\nvar PREFIX = 'RaSortButton';\nvar classNames = {\n  root: \"\".concat(PREFIX, \"-root\")\n};\nvar Root = styled('span', {\n  name: PREFIX,\n  overridesResolver: function (props, styles) {\n    return styles.root;\n  }\n})((_a = {}, _a[\".\".concat(classNames.root)] = {}, _a['& .MuiButton-sizeSmall'] = {\n  // fix for icon misalignment on small buttons, see https://github.com/mui/material-ui/pull/30240\n  lineHeight: 1.5\n}, _a['& .MuiButton-endIcon'] = {\n  ml: 0\n}, _a));\nexport default memo(SortButton, arePropsEqual);","map":{"version":3,"names":["React","memo","clsx","Button","Menu","MenuItem","Tooltip","IconButton","useMediaQuery","styled","SortIcon","ArrowDropDownIcon","useListSortContext","useTranslate","useTranslateLabel","shallowEqual","SortButton","props","fields","_a","label","_b","icon","defaultIcon","sx","className","resourceProp","resource","_c","resourceFromContext","sort","setSort","translate","translateLabel","isXSmall","theme","breakpoints","down","_d","useState","anchorEl","setAnchorEl","handleClick","event","currentTarget","handleClose","handleChangeSort","field","dataset","Error","order","inverseOrder","fieldLabel","source","buttonLabel","field_lower_first","charAt","toLowerCase","slice","undefined","concat","_","createElement","Root","classNames","root","title","color","onClick","size","startIcon","endIcon","id","keepMounted","open","Boolean","onClose","map","key","arePropsEqual","prevProps","nextProps","PREFIX","name","overridesResolver","styles","lineHeight","ml"],"sources":["/home/diarietou/Bureau/afterSA/test/testfront/react-admin-test/node_modules/ra-ui-materialui/src/button/SortButton.tsx"],"sourcesContent":["import * as React from 'react';\nimport { ReactElement, memo } from 'react';\nimport clsx from 'clsx';\nimport {\n    Button,\n    Menu,\n    MenuItem,\n    Tooltip,\n    IconButton,\n    useMediaQuery,\n    Theme,\n    SxProps,\n} from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport SortIcon from '@mui/icons-material/Sort';\nimport ArrowDropDownIcon from '@mui/icons-material/ArrowDropDown';\nimport {\n    useListSortContext,\n    useTranslate,\n    useTranslateLabel,\n    shallowEqual,\n} from 'ra-core';\n\n/**\n * A button allowing to change the sort field and order.\n *\n * To be used inside a ListContext (e.g. inside a <List> or <ReferenceManyField>)\n *\n * Expects one 'fields' prop, containing an array of field strings that shall\n * be used and displayed for sorting.\n *\n * When users clicks on the <SortButton>, they see a dropdown list with the\n * proposed sorting fields. Once they click on one of these fields, the related\n * list refreshes, re-sorted.\n *\n * @example\n *\n * import * as React from 'react';\n * import { TopToolbar, SortButton, CreateButton, ExportButton } from 'react-admin';\n *\n * const ListActions = () => (\n *     <TopToolbar>\n *         <SortButton fields={['reference', 'sales', 'stock']} />\n *         <CreateButton />\n *         <ExportButton />\n *     </TopToolbar>\n * );\n */\nconst SortButton = (props: SortButtonProps) => {\n    const {\n        fields,\n        label = 'ra.sort.sort_by',\n        icon = defaultIcon,\n        sx,\n        className,\n        resource: resourceProp,\n    } = props;\n    const {\n        resource: resourceFromContext,\n        sort,\n        setSort,\n    } = useListSortContext();\n    const resource = resourceProp || resourceFromContext;\n    const translate = useTranslate();\n    const translateLabel = useTranslateLabel();\n    const isXSmall = useMediaQuery((theme: Theme) =>\n        theme.breakpoints.down('sm')\n    );\n    const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n    const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n\n    const handleChangeSort = (\n        event: React.MouseEvent<HTMLLIElement, MouseEvent>\n    ) => {\n        const field = event.currentTarget.dataset.sort;\n        if (!field) {\n            throw new Error(\n                '<SortButton> MenuItems should have a data-sort attribute'\n            );\n        }\n        setSort({\n            field,\n            order: field === sort.field ? inverseOrder(sort.order) : 'ASC',\n        });\n        setAnchorEl(null);\n    };\n\n    const fieldLabel = translateLabel({\n        resource,\n        source: sort.field,\n    });\n    const buttonLabel = translate(label, {\n        field: fieldLabel,\n        field_lower_first:\n            typeof fieldLabel === 'string'\n                ? fieldLabel.charAt(0).toLowerCase() + fieldLabel.slice(1)\n                : undefined,\n        order: translate(`ra.sort.${sort.order}`),\n        _: label,\n    });\n\n    return (\n        <Root sx={sx} className={clsx(className, classNames.root)}>\n            {isXSmall ? (\n                <Tooltip title={buttonLabel}>\n                    <IconButton\n                        aria-label={buttonLabel}\n                        color=\"primary\"\n                        onClick={handleClick}\n                        size=\"large\"\n                    >\n                        {icon}\n                    </IconButton>\n                </Tooltip>\n            ) : (\n                <Button\n                    aria-controls=\"simple-menu\"\n                    aria-haspopup=\"true\"\n                    color=\"primary\"\n                    onClick={handleClick}\n                    startIcon={icon}\n                    endIcon={<ArrowDropDownIcon />}\n                    size=\"small\"\n                >\n                    {buttonLabel}\n                </Button>\n            )}\n            <Menu\n                id=\"simple-menu\"\n                anchorEl={anchorEl}\n                keepMounted\n                open={Boolean(anchorEl)}\n                onClose={handleClose}\n            >\n                {fields.map(field => (\n                    <MenuItem\n                        onClick={handleChangeSort}\n                        data-sort={field}\n                        key={field}\n                    >\n                        {translateLabel({\n                            resource,\n                            source: field,\n                        })}{' '}\n                        {translate(\n                            `ra.sort.${\n                                sort.field === field\n                                    ? inverseOrder(sort.order)\n                                    : 'ASC'\n                            }`\n                        )}\n                    </MenuItem>\n                ))}\n            </Menu>\n        </Root>\n    );\n};\n\nconst defaultIcon = <SortIcon />;\n\nconst inverseOrder = (sort: string) => (sort === 'ASC' ? 'DESC' : 'ASC');\n\nconst arePropsEqual = (prevProps, nextProps) =>\n    shallowEqual(prevProps.fields, nextProps.fields);\n\nexport interface SortButtonProps {\n    className?: string;\n    fields: string[];\n    icon?: ReactElement;\n    label?: string;\n    resource?: string;\n    sx?: SxProps;\n}\n\nconst PREFIX = 'RaSortButton';\n\nconst classNames = {\n    root: `${PREFIX}-root`,\n};\n\nconst Root = styled('span', {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})({\n    [`.${classNames.root}`]: {},\n    '& .MuiButton-sizeSmall': {\n        // fix for icon misalignment on small buttons, see https://github.com/mui/material-ui/pull/30240\n        lineHeight: 1.5,\n    },\n    '& .MuiButton-endIcon': { ml: 0 },\n});\n\nexport default memo(SortButton, arePropsEqual);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}