{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (g && (g = 0, op[0] && (_ = 0)), _) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport { useEffect } from 'react';\nimport clsx from 'clsx';\nimport { isRequired, FieldTitle, composeSyncValidators, useApplyInputDefaultValues, useGetValidationErrorMessage, useFormGroupContext, useFormGroups, SourceContextProvider, useSourceContext, OptionalResourceContextProvider } from 'ra-core';\nimport { useFieldArray, useFormContext } from 'react-hook-form';\nimport { InputLabel, FormControl, FormHelperText, styled } from '@mui/material';\nimport { LinearProgress } from '../../layout';\nimport { InputHelperText } from '../InputHelperText';\nimport { sanitizeInputRestProps } from '../sanitizeInputRestProps';\nimport { Labeled } from '../../Labeled';\nimport { ArrayInputContext } from './ArrayInputContext';\n/**\n * To edit arrays of data embedded inside a record, <ArrayInput> creates a list of sub-forms.\n *\n *  @example\n *\n *      import { ArrayInput, SimpleFormIterator, DateInput, TextInput } from 'react-admin';\n *\n *      <ArrayInput source=\"backlinks\">\n *          <SimpleFormIterator>\n *              <DateInput source=\"date\" />\n *              <TextInput source=\"url\" />\n *          </SimpleFormIterator>\n *      </ArrayInput>\n *\n * <ArrayInput> allows the edition of embedded arrays, like the backlinks field\n * in the following post record:\n *\n * {\n *   id: 123\n *   backlinks: [\n *         {\n *             date: '2012-08-10T00:00:00.000Z',\n *             url: 'http://example.com/foo/bar.html',\n *         },\n *         {\n *             date: '2012-08-14T00:00:00.000Z',\n *             url: 'https://blog.johndoe.com/2012/08/12/foobar.html',\n *         }\n *    ]\n * }\n *\n * <ArrayInput> expects a single child, which must be a *form iterator* component.\n * A form iterator is a component accepting a fields object as passed by\n * react-hook-form-arrays's useFieldArray() hook, and defining a layout for\n * an array of fields. For instance, the <SimpleFormIterator> component\n * displays an array of fields in an unordered list (<ul>), one sub-form by\n * list item (<li>). It also provides controls for adding and removing\n * a sub-record (a backlink in this example).\n *\n * @see {@link https://react-hook-form.com/docs/usefieldarray}\n */\nexport var ArrayInput = function (props) {\n  var _a, _b;\n  var className = props.className,\n    defaultValue = props.defaultValue,\n    label = props.label,\n    isFetching = props.isFetching,\n    isLoading = props.isLoading,\n    isPending = props.isPending,\n    children = props.children,\n    helperText = props.helperText,\n    resourceFromProps = props.resource,\n    arraySource = props.source,\n    validate = props.validate,\n    variant = props.variant,\n    disabled = props.disabled,\n    readOnly = props.readOnly,\n    _c = props.margin,\n    margin = _c === void 0 ? 'dense' : _c,\n    rest = __rest(props, [\"className\", \"defaultValue\", \"label\", \"isFetching\", \"isLoading\", \"isPending\", \"children\", \"helperText\", \"resource\", \"source\", \"validate\", \"variant\", \"disabled\", \"readOnly\", \"margin\"]);\n  var formGroupName = useFormGroupContext();\n  var formGroups = useFormGroups();\n  var parentSourceContext = useSourceContext();\n  var finalSource = parentSourceContext.getSource(arraySource);\n  var sanitizedValidate = Array.isArray(validate) ? composeSyncValidators(validate) : validate;\n  var getValidationErrorMessage = useGetValidationErrorMessage();\n  var _d = useFormContext(),\n    getFieldState = _d.getFieldState,\n    formState = _d.formState,\n    getValues = _d.getValues;\n  var fieldProps = useFieldArray({\n    name: finalSource,\n    rules: {\n      validate: function (value) {\n        return __awaiter(void 0, void 0, void 0, function () {\n          var error;\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                if (!sanitizedValidate) return [2 /*return*/, true];\n                return [4 /*yield*/, sanitizedValidate(value, getValues(), props)];\n              case 1:\n                error = _a.sent();\n                if (!error) return [2 /*return*/, true];\n                return [2 /*return*/, getValidationErrorMessage(error)];\n            }\n          });\n        });\n      }\n    }\n  });\n  useEffect(function () {\n    if (formGroups && formGroupName != null) {\n      formGroups.registerField(finalSource, formGroupName);\n    }\n    return function () {\n      if (formGroups && formGroupName != null) {\n        formGroups.unregisterField(finalSource, formGroupName);\n      }\n    };\n  }, [finalSource, formGroups, formGroupName]);\n  useApplyInputDefaultValues({\n    inputProps: props,\n    isArrayInput: true,\n    fieldArrayInputControl: fieldProps\n  });\n  var error = getFieldState(finalSource, formState).error;\n  // The SourceContext will be read by children of ArrayInput to compute their composed source and label\n  //\n  // <ArrayInput source=\"orders\" /> => SourceContext is \"orders\"\n  //   <SimpleFormIterator> => SourceContext is \"orders.0\"\n  //     <DateInput source=\"date\" /> => final source for this input will be \"orders.0.date\"\n  //   </SimpleFormIterator>\n  // </ArrayInput>\n  //\n  var sourceContext = React.useMemo(function () {\n    return {\n      // source is the source of the ArrayInput child\n      getSource: function (source) {\n        if (!source) {\n          // SimpleFormIterator calls getSource('') to get the arraySource\n          return parentSourceContext.getSource(arraySource);\n        }\n        // We want to support nesting and composition with other inputs (e.g. TranslatableInputs, ReferenceOneInput, etc),\n        // we must also take into account the parent SourceContext\n        //\n        // <ArrayInput source=\"orders\" /> => SourceContext is \"orders\"\n        //   <SimpleFormIterator> => SourceContext is \"orders.0\"\n        //      <DateInput source=\"date\" /> => final source for this input will be \"orders.0.date\"\n        //      <ArrayInput source=\"items\" /> => SourceContext is \"orders.0.items\"\n        //          <SimpleFormIterator> => SourceContext is \"orders.0.items.0\"\n        //              <TextInput source=\"reference\" /> => final source for this input will be \"orders.0.items.0.reference\"\n        //          </SimpleFormIterator>\n        //      </ArrayInput>\n        //   </SimpleFormIterator>\n        // </ArrayInput>\n        return parentSourceContext.getSource(\"\".concat(arraySource, \".\").concat(source));\n      },\n      // if Array source is items, and child source is name, .0.name => resources.orders.fields.items.name\n      getLabel: function (source) {\n        return parentSourceContext.getLabel(\"\".concat(arraySource, \".\").concat(source));\n      }\n    };\n  }, [parentSourceContext, arraySource]);\n  if (isPending) {\n    return React.createElement(Labeled, {\n      label: label,\n      className: className\n    }, React.createElement(LinearProgress, null));\n  }\n  var renderHelperText = helperText !== false || !!error;\n  return React.createElement(Root, __assign({\n    fullWidth: true,\n    margin: margin,\n    className: clsx('ra-input', \"ra-input-\".concat(finalSource), ArrayInputClasses.root, className),\n    error: !!error\n  }, sanitizeInputRestProps(rest)), React.createElement(InputLabel, {\n    component: \"span\",\n    className: ArrayInputClasses.label,\n    shrink: true,\n    error: !!error\n  }, React.createElement(FieldTitle, {\n    label: label,\n    source: arraySource,\n    resource: resourceFromProps,\n    isRequired: isRequired(validate)\n  })), React.createElement(ArrayInputContext.Provider, {\n    value: fieldProps\n  }, React.createElement(OptionalResourceContextProvider, {\n    value: resourceFromProps\n  }, React.createElement(SourceContextProvider, {\n    value: sourceContext\n  }, children))), renderHelperText ? React.createElement(FormHelperText, {\n    error: !!error\n  }, React.createElement(InputHelperText\n  // root property is applicable to built-in validation only,\n  // Resolvers are yet to support useFieldArray root level validation.\n  // Reference: https://react-hook-form.com/docs/usefieldarray\n  , {\n    // root property is applicable to built-in validation only,\n    // Resolvers are yet to support useFieldArray root level validation.\n    // Reference: https://react-hook-form.com/docs/usefieldarray\n    error: (_b = (_a = error === null || error === void 0 ? void 0 : error.root) === null || _a === void 0 ? void 0 : _a.message) !== null && _b !== void 0 ? _b : error === null || error === void 0 ? void 0 : error.message,\n    helperText: helperText\n  })) : null);\n};\nexport var getArrayInputError = function (error) {\n  if (Array.isArray(error)) {\n    return undefined;\n  }\n  return error;\n};\nvar PREFIX = 'RaArrayInput';\nexport var ArrayInputClasses = {\n  root: \"\".concat(PREFIX, \"-root\"),\n  label: \"\".concat(PREFIX, \"-label\")\n};\nvar Root = styled(FormControl, {\n  name: PREFIX,\n  overridesResolver: function (props, styles) {\n    return styles.root;\n  }\n})(function (_a) {\n  var _b;\n  var theme = _a.theme;\n  return _b = {\n    marginTop: 0\n  }, _b[\"& .\".concat(ArrayInputClasses.label)] = {\n    position: 'relative',\n    top: theme.spacing(0.5),\n    left: theme.spacing(-1.5)\n  }, _b[\"& .\".concat(ArrayInputClasses.root)] = {\n    // nested ArrayInput\n    paddingLeft: theme.spacing(2)\n  }, _b;\n});","map":{"version":3,"names":["React","useEffect","clsx","isRequired","FieldTitle","composeSyncValidators","useApplyInputDefaultValues","useGetValidationErrorMessage","useFormGroupContext","useFormGroups","SourceContextProvider","useSourceContext","OptionalResourceContextProvider","useFieldArray","useFormContext","InputLabel","FormControl","FormHelperText","styled","LinearProgress","InputHelperText","sanitizeInputRestProps","Labeled","ArrayInputContext","ArrayInput","props","className","defaultValue","label","isFetching","isLoading","isPending","children","helperText","resourceFromProps","resource","arraySource","source","validate","variant","disabled","readOnly","_c","margin","rest","__rest","formGroupName","formGroups","parentSourceContext","finalSource","getSource","sanitizedValidate","Array","isArray","getValidationErrorMessage","_d","getFieldState","formState","getValues","fieldProps","name","rules","value","__awaiter","error","_a","sent","registerField","unregisterField","inputProps","isArrayInput","fieldArrayInputControl","sourceContext","useMemo","concat","getLabel","createElement","renderHelperText","Root","__assign","fullWidth","ArrayInputClasses","root","component","shrink","Provider","_b","message","getArrayInputError","undefined","PREFIX","overridesResolver","styles","theme","marginTop","position","top","spacing","left","paddingLeft"],"sources":["/home/diarietou/Bureau/afterSA/test/testfront/react-admin-test/node_modules/ra-ui-materialui/src/input/ArrayInput/ArrayInput.tsx"],"sourcesContent":["import * as React from 'react';\nimport { ReactElement, useEffect } from 'react';\nimport clsx from 'clsx';\nimport {\n    isRequired,\n    FieldTitle,\n    composeSyncValidators,\n    useApplyInputDefaultValues,\n    useGetValidationErrorMessage,\n    useFormGroupContext,\n    useFormGroups,\n    SourceContextProvider,\n    SourceContextValue,\n    useSourceContext,\n    OptionalResourceContextProvider,\n} from 'ra-core';\nimport { useFieldArray, useFormContext } from 'react-hook-form';\nimport {\n    InputLabel,\n    FormControl,\n    FormHelperText,\n    FormControlProps,\n    styled,\n} from '@mui/material';\n\nimport { LinearProgress } from '../../layout';\nimport { CommonInputProps } from '../CommonInputProps';\nimport { InputHelperText } from '../InputHelperText';\nimport { sanitizeInputRestProps } from '../sanitizeInputRestProps';\nimport { Labeled } from '../../Labeled';\nimport { ArrayInputContext } from './ArrayInputContext';\n\n/**\n * To edit arrays of data embedded inside a record, <ArrayInput> creates a list of sub-forms.\n *\n *  @example\n *\n *      import { ArrayInput, SimpleFormIterator, DateInput, TextInput } from 'react-admin';\n *\n *      <ArrayInput source=\"backlinks\">\n *          <SimpleFormIterator>\n *              <DateInput source=\"date\" />\n *              <TextInput source=\"url\" />\n *          </SimpleFormIterator>\n *      </ArrayInput>\n *\n * <ArrayInput> allows the edition of embedded arrays, like the backlinks field\n * in the following post record:\n *\n * {\n *   id: 123\n *   backlinks: [\n *         {\n *             date: '2012-08-10T00:00:00.000Z',\n *             url: 'http://example.com/foo/bar.html',\n *         },\n *         {\n *             date: '2012-08-14T00:00:00.000Z',\n *             url: 'https://blog.johndoe.com/2012/08/12/foobar.html',\n *         }\n *    ]\n * }\n *\n * <ArrayInput> expects a single child, which must be a *form iterator* component.\n * A form iterator is a component accepting a fields object as passed by\n * react-hook-form-arrays's useFieldArray() hook, and defining a layout for\n * an array of fields. For instance, the <SimpleFormIterator> component\n * displays an array of fields in an unordered list (<ul>), one sub-form by\n * list item (<li>). It also provides controls for adding and removing\n * a sub-record (a backlink in this example).\n *\n * @see {@link https://react-hook-form.com/docs/usefieldarray}\n */\nexport const ArrayInput = (props: ArrayInputProps) => {\n    const {\n        className,\n        defaultValue,\n        label,\n        isFetching,\n        isLoading,\n        isPending,\n        children,\n        helperText,\n        resource: resourceFromProps,\n        source: arraySource,\n        validate,\n        variant,\n        disabled,\n        readOnly,\n        margin = 'dense',\n        ...rest\n    } = props;\n\n    const formGroupName = useFormGroupContext();\n    const formGroups = useFormGroups();\n    const parentSourceContext = useSourceContext();\n    const finalSource = parentSourceContext.getSource(arraySource);\n\n    const sanitizedValidate = Array.isArray(validate)\n        ? composeSyncValidators(validate)\n        : validate;\n    const getValidationErrorMessage = useGetValidationErrorMessage();\n\n    const { getFieldState, formState, getValues } = useFormContext();\n\n    const fieldProps = useFieldArray({\n        name: finalSource,\n        rules: {\n            validate: async value => {\n                if (!sanitizedValidate) return true;\n                const error = await sanitizedValidate(\n                    value,\n                    getValues(),\n                    props\n                );\n\n                if (!error) return true;\n                return getValidationErrorMessage(error);\n            },\n        },\n    });\n\n    useEffect(() => {\n        if (formGroups && formGroupName != null) {\n            formGroups.registerField(finalSource, formGroupName);\n        }\n\n        return () => {\n            if (formGroups && formGroupName != null) {\n                formGroups.unregisterField(finalSource, formGroupName);\n            }\n        };\n    }, [finalSource, formGroups, formGroupName]);\n\n    useApplyInputDefaultValues({\n        inputProps: props,\n        isArrayInput: true,\n        fieldArrayInputControl: fieldProps,\n    });\n\n    const { error } = getFieldState(finalSource, formState);\n\n    // The SourceContext will be read by children of ArrayInput to compute their composed source and label\n    //\n    // <ArrayInput source=\"orders\" /> => SourceContext is \"orders\"\n    //   <SimpleFormIterator> => SourceContext is \"orders.0\"\n    //     <DateInput source=\"date\" /> => final source for this input will be \"orders.0.date\"\n    //   </SimpleFormIterator>\n    // </ArrayInput>\n    //\n    const sourceContext = React.useMemo<SourceContextValue>(\n        () => ({\n            // source is the source of the ArrayInput child\n            getSource: (source: string) => {\n                if (!source) {\n                    // SimpleFormIterator calls getSource('') to get the arraySource\n                    return parentSourceContext.getSource(arraySource);\n                }\n\n                // We want to support nesting and composition with other inputs (e.g. TranslatableInputs, ReferenceOneInput, etc),\n                // we must also take into account the parent SourceContext\n                //\n                // <ArrayInput source=\"orders\" /> => SourceContext is \"orders\"\n                //   <SimpleFormIterator> => SourceContext is \"orders.0\"\n                //      <DateInput source=\"date\" /> => final source for this input will be \"orders.0.date\"\n                //      <ArrayInput source=\"items\" /> => SourceContext is \"orders.0.items\"\n                //          <SimpleFormIterator> => SourceContext is \"orders.0.items.0\"\n                //              <TextInput source=\"reference\" /> => final source for this input will be \"orders.0.items.0.reference\"\n                //          </SimpleFormIterator>\n                //      </ArrayInput>\n                //   </SimpleFormIterator>\n                // </ArrayInput>\n                return parentSourceContext.getSource(\n                    `${arraySource}.${source}`\n                );\n            },\n            // if Array source is items, and child source is name, .0.name => resources.orders.fields.items.name\n            getLabel: (source: string) =>\n                parentSourceContext.getLabel(`${arraySource}.${source}`),\n        }),\n        [parentSourceContext, arraySource]\n    );\n\n    if (isPending) {\n        return (\n            <Labeled label={label} className={className}>\n                <LinearProgress />\n            </Labeled>\n        );\n    }\n    const renderHelperText = helperText !== false || !!error;\n\n    return (\n        <Root\n            fullWidth\n            margin={margin}\n            className={clsx(\n                'ra-input',\n                `ra-input-${finalSource}`,\n                ArrayInputClasses.root,\n                className\n            )}\n            error={!!error}\n            {...sanitizeInputRestProps(rest)}\n        >\n            <InputLabel\n                component=\"span\"\n                className={ArrayInputClasses.label}\n                shrink\n                error={!!error}\n            >\n                <FieldTitle\n                    label={label}\n                    source={arraySource}\n                    resource={resourceFromProps}\n                    isRequired={isRequired(validate)}\n                />\n            </InputLabel>\n            <ArrayInputContext.Provider value={fieldProps}>\n                <OptionalResourceContextProvider value={resourceFromProps}>\n                    <SourceContextProvider value={sourceContext}>\n                        {children}\n                    </SourceContextProvider>\n                </OptionalResourceContextProvider>\n            </ArrayInputContext.Provider>\n            {renderHelperText ? (\n                <FormHelperText error={!!error}>\n                    <InputHelperText\n                        // root property is applicable to built-in validation only,\n                        // Resolvers are yet to support useFieldArray root level validation.\n                        // Reference: https://react-hook-form.com/docs/usefieldarray\n                        error={error?.root?.message ?? error?.message}\n                        helperText={helperText}\n                    />\n                </FormHelperText>\n            ) : null}\n        </Root>\n    );\n};\n\nexport const getArrayInputError = error => {\n    if (Array.isArray(error)) {\n        return undefined;\n    }\n    return error;\n};\n\nexport interface ArrayInputProps\n    extends CommonInputProps,\n        Omit<FormControlProps, 'defaultValue' | 'onBlur' | 'onChange'> {\n    className?: string;\n    children: ReactElement;\n    disabled?: boolean;\n    isFetching?: boolean;\n    isLoading?: boolean;\n    isPending?: boolean;\n}\n\nconst PREFIX = 'RaArrayInput';\n\nexport const ArrayInputClasses = {\n    root: `${PREFIX}-root`,\n    label: `${PREFIX}-label`,\n};\n\nconst Root = styled(FormControl, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    marginTop: 0,\n    [`& .${ArrayInputClasses.label}`]: {\n        position: 'relative',\n        top: theme.spacing(0.5),\n        left: theme.spacing(-1.5),\n    },\n    [`& .${ArrayInputClasses.root}`]: {\n        // nested ArrayInput\n        paddingLeft: theme.spacing(2),\n    },\n}));\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}