{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport useAuthState from './useAuthState';\n/**\n * Restrict access to authenticated users.\n * Redirect anonymous users to the login page.\n *\n * Use it in your custom page components to require\n * authentication.\n *\n * You can set additional `authParams` at will if your authProvider\n * requires it.\n *\n * @example\n * import { Admin, CustomRoutes, useAuthenticated } from 'react-admin';\n *\n * const FooPage = () => {\n *     const { isPending } = useAuthenticated();\n *     if (isPending) return null;\n *     return <Foo />;\n * }\n *\n * const customRoutes = [\n *     <Route path=\"/foo\" element={<FooPage />} />\n * ];\n *\n * const App = () => (\n *     <Admin>\n *         <CustomRoutes>{customRoutes}</CustomRoutes>\n *     </Admin>\n * );\n */\nexport var useAuthenticated = function (_a) {\n  if (_a === void 0) {\n    _a = {};\n  }\n  var params = _a.params,\n    _b = _a.logoutOnFailure,\n    logoutOnFailure = _b === void 0 ? true : _b,\n    options = __rest(_a, [\"params\", \"logoutOnFailure\"]);\n  return useAuthState(params !== null && params !== void 0 ? params : emptyParams, logoutOnFailure, options);\n};\nvar emptyParams = {};","map":{"version":3,"names":["useAuthState","useAuthenticated","_a","params","_b","logoutOnFailure","options","__rest","emptyParams"],"sources":["/home/diarietou/Bureau/afterSA/test/testfront/react-admin-test/node_modules/ra-core/src/auth/useAuthenticated.ts"],"sourcesContent":["import { UseQueryOptions } from '@tanstack/react-query';\nimport useAuthState from './useAuthState';\n\n/**\n * Restrict access to authenticated users.\n * Redirect anonymous users to the login page.\n *\n * Use it in your custom page components to require\n * authentication.\n *\n * You can set additional `authParams` at will if your authProvider\n * requires it.\n *\n * @example\n * import { Admin, CustomRoutes, useAuthenticated } from 'react-admin';\n *\n * const FooPage = () => {\n *     const { isPending } = useAuthenticated();\n *     if (isPending) return null;\n *     return <Foo />;\n * }\n *\n * const customRoutes = [\n *     <Route path=\"/foo\" element={<FooPage />} />\n * ];\n *\n * const App = () => (\n *     <Admin>\n *         <CustomRoutes>{customRoutes}</CustomRoutes>\n *     </Admin>\n * );\n */\nexport const useAuthenticated = <ParamsType = any>({\n    params,\n    logoutOnFailure = true,\n    ...options\n}: UseAuthenticatedOptions<ParamsType> = {}) => {\n    return useAuthState(params ?? emptyParams, logoutOnFailure, options);\n};\n\nexport type UseAuthenticatedOptions<ParamsType> = Omit<\n    UseQueryOptions<boolean, any> & {\n        params?: ParamsType;\n    },\n    'queryKey' | 'queryFn'\n> & {\n    logoutOnFailure?: boolean;\n};\n\nconst emptyParams = {};\n"],"mappings":";;;;;;;;AACA,OAAOA,YAAY,MAAM,gBAAgB;AAEzC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA,OAAO,IAAMC,gBAAgB,GAAG,SAAAA,CAAmBC,EAIR;EAJQ,IAAAA,EAAA;IAAAA,EAAA,KAIR;EAAA;EAHvC,IAAAC,MAAM,GAAAD,EAAA,CAAAC,MAAA;IACNC,EAAA,GAAAF,EAAA,CAAAG,eAAsB;IAAtBA,eAAe,GAAAD,EAAA,cAAG,IAAI,GAAAA,EAAA;IACnBE,OAAO,GAAAC,MAAA,CAAAL,EAAA,EAHqC,6BAIlD,CADa;EAEV,OAAOF,YAAY,CAACG,MAAM,aAANA,MAAM,cAANA,MAAM,GAAIK,WAAW,EAAEH,eAAe,EAAEC,OAAO,CAAC;AACxE,CAAC;AAWD,IAAME,WAAW,GAAG,EAAE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}