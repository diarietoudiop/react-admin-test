{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (g && (g = 0, op[0] && (_ = 0)), _) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nimport { useMemo } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport useAuthProvider from './useAuthProvider';\nimport { useResourceContext } from '../core';\nimport { useRecordContext } from '../controller';\n/**\n * A hook that calls the authProvider.canAccess() method using react-query for a provided resource and action (and optionally a record).\n *\n * The return value updates according to the request state:\n *\n * - start: { isPending: true }\n * - success: { canAccess: true | false, isPending: false }\n * - error: { error: [error from provider], isPending: false }\n *\n * Useful to enable or disable features based on users permissions.\n *\n * @param {Object} params Any params you want to pass to the authProvider\n * @param {string} params.resource The resource to check access for\n * @param {string} params.action The action to check access for\n * @param {Object} params.record Optional. The record to check access for\n *\n * @returns Return the react-query result and a canAccess property which is a boolean indicating the access status\n *\n * @example\n *     import { useCanAccess } from 'react-admin';\n *\n *     const PostDetail = () => {\n *         const { isPending, canAccess, error } = useCanAccess({\n *             resource: 'posts',\n *             action: 'read',\n *         });\n *         if (isPending || !canAccess) {\n *             return null;\n *         }\n *         if (error) {\n *             return <div>{error.message}</div>;\n *         }\n *         return <PostEdit />;\n *     };\n */\nexport var useCanAccess = function (params) {\n  var authProvider = useAuthProvider();\n  var resource = useResourceContext(params);\n  if (!resource) {\n    throw new Error('useCanAccess must be used inside a <Resource> component or provide a resource prop');\n  }\n  var record = useRecordContext(params);\n  var authProviderHasCanAccess = !!(authProvider === null || authProvider === void 0 ? void 0 : authProvider.canAccess);\n  var queryResult = useQuery(__assign({\n    queryKey: ['auth', 'canAccess', __assign(__assign({}, params), {\n      record: record,\n      resource: resource\n    })],\n    queryFn: function (_a) {\n      var signal = _a.signal;\n      return __awaiter(void 0, void 0, void 0, function () {\n        return __generator(this, function (_b) {\n          if (!authProvider || !authProvider.canAccess) {\n            return [2 /*return*/, true];\n          }\n          return [2 /*return*/, authProvider.canAccess(__assign(__assign({}, params), {\n            record: record,\n            resource: resource,\n            signal: authProvider.supportAbortSignal ? signal : undefined\n          }))];\n        });\n      });\n    },\n    enabled: authProviderHasCanAccess\n  }, params));\n  var result = useMemo(function () {\n    // Don't check for the authProvider or authProvider.canAccess method in the useMemo\n    // to avoid unnecessary re-renders\n    return __assign(__assign({}, queryResult), {\n      canAccess: queryResult.data\n    });\n  }, [queryResult]);\n  return authProviderHasCanAccess ? result : emptyQueryObserverResult;\n};\nvar emptyQueryObserverResult = {\n  canAccess: true,\n  data: true,\n  dataUpdatedAt: 0,\n  error: null,\n  errorUpdatedAt: 0,\n  errorUpdateCount: 0,\n  failureCount: 0,\n  failureReason: null,\n  fetchStatus: 'idle',\n  isError: false,\n  isInitialLoading: false,\n  isLoading: false,\n  isLoadingError: false,\n  isFetched: true,\n  isFetchedAfterMount: true,\n  isFetching: false,\n  isPaused: false,\n  isPlaceholderData: false,\n  isPending: false,\n  isRefetchError: false,\n  isRefetching: false,\n  isStale: false,\n  isSuccess: true,\n  status: 'success',\n  refetch: function () {\n    return Promise.resolve(emptyQueryObserverResult);\n  }\n};","map":{"version":3,"names":["useMemo","useQuery","useAuthProvider","useResourceContext","useRecordContext","useCanAccess","params","authProvider","resource","Error","record","authProviderHasCanAccess","canAccess","queryResult","__assign","queryKey","queryFn","_a","signal","supportAbortSignal","undefined","enabled","result","data","emptyQueryObserverResult","dataUpdatedAt","error","errorUpdatedAt","errorUpdateCount","failureCount","failureReason","fetchStatus","isError","isInitialLoading","isLoading","isLoadingError","isFetched","isFetchedAfterMount","isFetching","isPaused","isPlaceholderData","isPending","isRefetchError","isRefetching","isStale","isSuccess","status","refetch","Promise","resolve"],"sources":["/home/diarietou/Bureau/afterSA/test/testfront/react-admin-test/node_modules/ra-core/src/auth/useCanAccess.ts"],"sourcesContent":["import { useMemo } from 'react';\nimport {\n    QueryObserverLoadingErrorResult,\n    QueryObserverLoadingResult,\n    QueryObserverRefetchErrorResult,\n    QueryObserverSuccessResult,\n    useQuery,\n    UseQueryOptions,\n} from '@tanstack/react-query';\nimport useAuthProvider from './useAuthProvider';\nimport { useResourceContext } from '../core';\nimport { useRecordContext } from '../controller';\nimport { HintedString } from '../types';\n\n/**\n * A hook that calls the authProvider.canAccess() method using react-query for a provided resource and action (and optionally a record).\n *\n * The return value updates according to the request state:\n *\n * - start: { isPending: true }\n * - success: { canAccess: true | false, isPending: false }\n * - error: { error: [error from provider], isPending: false }\n *\n * Useful to enable or disable features based on users permissions.\n *\n * @param {Object} params Any params you want to pass to the authProvider\n * @param {string} params.resource The resource to check access for\n * @param {string} params.action The action to check access for\n * @param {Object} params.record Optional. The record to check access for\n *\n * @returns Return the react-query result and a canAccess property which is a boolean indicating the access status\n *\n * @example\n *     import { useCanAccess } from 'react-admin';\n *\n *     const PostDetail = () => {\n *         const { isPending, canAccess, error } = useCanAccess({\n *             resource: 'posts',\n *             action: 'read',\n *         });\n *         if (isPending || !canAccess) {\n *             return null;\n *         }\n *         if (error) {\n *             return <div>{error.message}</div>;\n *         }\n *         return <PostEdit />;\n *     };\n */\nexport const useCanAccess = <\n    RecordType extends Record<string, any> = Record<string, any>,\n    ErrorType extends Error = Error,\n>(\n    params: UseCanAccessOptions<RecordType, ErrorType>\n): UseCanAccessResult<ErrorType> => {\n    const authProvider = useAuthProvider();\n    const resource = useResourceContext(params);\n\n    if (!resource) {\n        throw new Error(\n            'useCanAccess must be used inside a <Resource> component or provide a resource prop'\n        );\n    }\n    const record = useRecordContext<RecordType>(params);\n\n    const authProviderHasCanAccess = !!authProvider?.canAccess;\n\n    const queryResult = useQuery({\n        queryKey: ['auth', 'canAccess', { ...params, record, resource }],\n        queryFn: async ({ signal }) => {\n            if (!authProvider || !authProvider.canAccess) {\n                return true;\n            }\n            return authProvider.canAccess({\n                ...params,\n                record,\n                resource,\n                signal: authProvider.supportAbortSignal ? signal : undefined,\n            });\n        },\n        enabled: authProviderHasCanAccess,\n        ...params,\n    });\n\n    const result = useMemo(() => {\n        // Don't check for the authProvider or authProvider.canAccess method in the useMemo\n        // to avoid unnecessary re-renders\n        return {\n            ...queryResult,\n            canAccess: queryResult.data,\n        } as UseCanAccessResult<ErrorType>;\n    }, [queryResult]);\n\n    return authProviderHasCanAccess\n        ? result\n        : (emptyQueryObserverResult as UseCanAccessResult<ErrorType>);\n};\n\nconst emptyQueryObserverResult = {\n    canAccess: true,\n    data: true,\n    dataUpdatedAt: 0,\n    error: null,\n    errorUpdatedAt: 0,\n    errorUpdateCount: 0,\n    failureCount: 0,\n    failureReason: null,\n    fetchStatus: 'idle',\n    isError: false,\n    isInitialLoading: false,\n    isLoading: false,\n    isLoadingError: false,\n    isFetched: true,\n    isFetchedAfterMount: true,\n    isFetching: false,\n    isPaused: false,\n    isPlaceholderData: false,\n    isPending: false,\n    isRefetchError: false,\n    isRefetching: false,\n    isStale: false,\n    isSuccess: true,\n    status: 'success',\n    refetch: () => Promise.resolve(emptyQueryObserverResult),\n};\n\nexport interface UseCanAccessOptions<\n    RecordType extends Record<string, any> = Record<string, any>,\n    ErrorType extends Error = Error,\n> extends Omit<UseQueryOptions<boolean, ErrorType>, 'queryKey' | 'queryFn'> {\n    resource?: string;\n    action: HintedString<'list' | 'create' | 'edit' | 'show' | 'delete'>;\n    record?: RecordType;\n}\n\nexport type UseCanAccessResult<ErrorType = Error> =\n    | UseCanAccessLoadingResult<ErrorType>\n    | UseCanAccessLoadingErrorResult<ErrorType>\n    | UseCanAccessRefetchErrorResult<ErrorType>\n    | UseCanAccessSuccessResult<ErrorType>;\n\nexport interface UseCanAccessLoadingResult<ErrorType = Error>\n    extends QueryObserverLoadingResult<boolean, ErrorType> {\n    canAccess: undefined;\n}\nexport interface UseCanAccessLoadingErrorResult<ErrorType = Error>\n    extends QueryObserverLoadingErrorResult<boolean, ErrorType> {\n    canAccess: undefined;\n}\nexport interface UseCanAccessRefetchErrorResult<ErrorType = Error>\n    extends QueryObserverRefetchErrorResult<boolean, ErrorType> {\n    canAccess: boolean;\n}\nexport interface UseCanAccessSuccessResult<ErrorType = Error>\n    extends QueryObserverSuccessResult<boolean, ErrorType> {\n    canAccess: boolean;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,OAAO,QAAQ,OAAO;AAC/B,SAKIC,QAAQ,QAEL,uBAAuB;AAC9B,OAAOC,eAAe,MAAM,mBAAmB;AAC/C,SAASC,kBAAkB,QAAQ,SAAS;AAC5C,SAASC,gBAAgB,QAAQ,eAAe;AAGhD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCA,OAAO,IAAMC,YAAY,GAAG,SAAAA,CAIxBC,MAAkD;EAElD,IAAMC,YAAY,GAAGL,eAAe,EAAE;EACtC,IAAMM,QAAQ,GAAGL,kBAAkB,CAACG,MAAM,CAAC;EAE3C,IAAI,CAACE,QAAQ,EAAE;IACX,MAAM,IAAIC,KAAK,CACX,oFAAoF,CACvF;;EAEL,IAAMC,MAAM,GAAGN,gBAAgB,CAAaE,MAAM,CAAC;EAEnD,IAAMK,wBAAwB,GAAG,CAAC,EAACJ,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAEK,SAAS;EAE1D,IAAMC,WAAW,GAAGZ,QAAQ,CAAAa,QAAA;IACxBC,QAAQ,EAAE,CAAC,MAAM,EAAE,WAAW,EAAAD,QAAA,CAAAA,QAAA,KAAOR,MAAM;MAAEI,MAAM,EAAAA,MAAA;MAAEF,QAAQ,EAAAA;IAAA,GAAG;IAChEQ,OAAO,EAAE,SAAAA,CAAOC,EAAU;UAARC,MAAM,GAAAD,EAAA,CAAAC,MAAA;;;UACpB,IAAI,CAACX,YAAY,IAAI,CAACA,YAAY,CAACK,SAAS,EAAE;YAC1C,sBAAO,IAAI;;UAEf,sBAAOL,YAAY,CAACK,SAAS,CAAAE,QAAA,CAAAA,QAAA,KACtBR,MAAM;YACTI,MAAM,EAAAA,MAAA;YACNF,QAAQ,EAAAA,QAAA;YACRU,MAAM,EAAEX,YAAY,CAACY,kBAAkB,GAAGD,MAAM,GAAGE;UAAS,GAC9D;;;KACL;IACDC,OAAO,EAAEV;EAAwB,GAC9BL,MAAM,EACX;EAEF,IAAMgB,MAAM,GAAGtB,OAAO,CAAC;IACnB;IACA;IACA,OAAOc,QAAA,CAAAA,QAAA,KACAD,WAAW;MACdD,SAAS,EAAEC,WAAW,CAACU;IAAI,EACG;EACtC,CAAC,EAAE,CAACV,WAAW,CAAC,CAAC;EAEjB,OAAOF,wBAAwB,GACzBW,MAAM,GACLE,wBAA0D;AACrE,CAAC;AAED,IAAMA,wBAAwB,GAAG;EAC7BZ,SAAS,EAAE,IAAI;EACfW,IAAI,EAAE,IAAI;EACVE,aAAa,EAAE,CAAC;EAChBC,KAAK,EAAE,IAAI;EACXC,cAAc,EAAE,CAAC;EACjBC,gBAAgB,EAAE,CAAC;EACnBC,YAAY,EAAE,CAAC;EACfC,aAAa,EAAE,IAAI;EACnBC,WAAW,EAAE,MAAM;EACnBC,OAAO,EAAE,KAAK;EACdC,gBAAgB,EAAE,KAAK;EACvBC,SAAS,EAAE,KAAK;EAChBC,cAAc,EAAE,KAAK;EACrBC,SAAS,EAAE,IAAI;EACfC,mBAAmB,EAAE,IAAI;EACzBC,UAAU,EAAE,KAAK;EACjBC,QAAQ,EAAE,KAAK;EACfC,iBAAiB,EAAE,KAAK;EACxBC,SAAS,EAAE,KAAK;EAChBC,cAAc,EAAE,KAAK;EACrBC,YAAY,EAAE,KAAK;EACnBC,OAAO,EAAE,KAAK;EACdC,SAAS,EAAE,IAAI;EACfC,MAAM,EAAE,SAAS;EACjBC,OAAO,EAAE,SAAAA,CAAA;IAAM,OAAAC,OAAO,CAACC,OAAO,CAACzB,wBAAwB,CAAC;EAAzC;CAClB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}