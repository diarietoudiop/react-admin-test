{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { isValidElement, useEffect, useMemo } from 'react';\nimport { useAuthenticated, useRequireAccess } from '../../auth';\nimport { useTranslate } from '../../i18n';\nimport { useNotify } from '../../notification';\nimport { useGetList } from '../../dataProvider';\nimport { useResourceContext, useGetResourceLabel } from '../../core';\nimport { useRecordSelection } from './useRecordSelection';\nimport { useListParams } from './useListParams';\nimport { useSelectAll } from './useSelectAll';\nimport { defaultExporter } from '../../export';\nimport { SORT_ASC } from './queryReducer';\n/**\n * Prepare data for the List view\n *\n * @param {Object} props The props passed to the List component.\n *\n * @return {Object} controllerProps Fetched and computed data for the List view\n *\n * @example\n *\n * import { useListController } from 'react-admin';\n * import ListView from './ListView';\n *\n * const MyList = props => {\n *     const controllerProps = useListController(props);\n *     return <ListView {...controllerProps} {...props} />;\n * }\n */\nexport var useListController = function (props) {\n  if (props === void 0) {\n    props = {};\n  }\n  var _a = props.debounce,\n    debounce = _a === void 0 ? 500 : _a,\n    _b = props.disableAuthentication,\n    disableAuthentication = _b === void 0 ? false : _b,\n    _c = props.disableSyncWithLocation,\n    disableSyncWithLocation = _c === void 0 ? false : _c,\n    _d = props.exporter,\n    exporter = _d === void 0 ? defaultExporter : _d,\n    filter = props.filter,\n    filterDefaultValues = props.filterDefaultValues,\n    _e = props.perPage,\n    perPage = _e === void 0 ? 10 : _e,\n    _f = props.queryOptions,\n    queryOptions = _f === void 0 ? {} : _f,\n    _g = props.sort,\n    sort = _g === void 0 ? defaultSort : _g,\n    storeKey = props.storeKey;\n  var resource = useResourceContext(props);\n  var meta = queryOptions.meta,\n    otherQueryOptions = __rest(queryOptions, [\"meta\"]);\n  if (!resource) {\n    throw new Error(\"useListController requires a non-empty resource prop or context\");\n  }\n  if (filter && (isValidElement(filter) || Array.isArray(filter) && filter.some(isValidElement))) {\n    throw new Error('useListController received a React element as `filter` props. If you intended to set the list filter elements, use the `filters` (with an s) prop instead. The `filter` prop is internal and should not be set by the developer.');\n  }\n  var isPendingAuthenticated = useAuthenticated({\n    enabled: !disableAuthentication\n  }).isPending;\n  var isPendingCanAccess = useRequireAccess({\n    action: 'list',\n    resource: resource,\n    // If disableAuthentication is true then isPendingAuthenticated will always be true so this hook is disabled\n    enabled: !isPendingAuthenticated\n  }).isPending;\n  var translate = useTranslate();\n  var notify = useNotify();\n  var _h = useListParams({\n      debounce: debounce,\n      disableSyncWithLocation: disableSyncWithLocation,\n      filterDefaultValues: filterDefaultValues,\n      perPage: perPage,\n      resource: resource,\n      sort: sort,\n      storeKey: storeKey\n    }),\n    query = _h[0],\n    queryModifiers = _h[1];\n  var _j = useRecordSelection({\n      resource: resource,\n      disableSyncWithStore: storeKey === false\n    }),\n    selectedIds = _j[0],\n    selectionModifiers = _j[1];\n  var _k = useGetList(resource, {\n      pagination: {\n        page: query.page,\n        perPage: query.perPage\n      },\n      sort: {\n        field: query.sort,\n        order: query.order\n      },\n      filter: __assign(__assign({}, query.filter), filter),\n      meta: meta\n    }, __assign({\n      enabled: !isPendingAuthenticated && !isPendingCanAccess || disableAuthentication,\n      placeholderData: function (previousData) {\n        return previousData;\n      },\n      retry: false,\n      onError: function (error) {\n        return notify((error === null || error === void 0 ? void 0 : error.message) || 'ra.notification.http_error', {\n          type: 'error',\n          messageArgs: {\n            _: error === null || error === void 0 ? void 0 : error.message\n          }\n        });\n      }\n    }, otherQueryOptions)),\n    data = _k.data,\n    pageInfo = _k.pageInfo,\n    total = _k.total,\n    responseMeta = _k.meta,\n    error = _k.error,\n    isLoading = _k.isLoading,\n    isFetching = _k.isFetching,\n    isPending = _k.isPending,\n    refetch = _k.refetch;\n  // change page if there is no data\n  useEffect(function () {\n    if (query.page <= 0 || !isFetching && query.page > 1 && (data == null || (data === null || data === void 0 ? void 0 : data.length) === 0)) {\n      // Query for a page that doesn't exist, set page to 1\n      queryModifiers.setPage(1);\n      return;\n    }\n    if (total == null) {\n      return;\n    }\n    var totalPages = Math.ceil(total / query.perPage) || 1;\n    if (!isFetching && query.page > totalPages) {\n      // Query for a page out of bounds, set page to the last existing page\n      // It occurs when deleting the last element of the last page\n      queryModifiers.setPage(totalPages);\n    }\n  }, [isFetching, query.page, query.perPage, data, queryModifiers, total]);\n  var currentSort = useMemo(function () {\n    return {\n      field: query.sort,\n      order: query.order\n    };\n  }, [query.sort, query.order]);\n  var getResourceLabel = useGetResourceLabel();\n  var defaultTitle = translate('ra.page.list', {\n    name: getResourceLabel(resource, 2)\n  });\n  var onSelectAll = useSelectAll({\n    resource: resource,\n    sort: {\n      field: query.sort,\n      order: query.order\n    },\n    filter: __assign(__assign({}, query.filter), filter)\n  });\n  return {\n    sort: currentSort,\n    data: data,\n    meta: responseMeta,\n    defaultTitle: defaultTitle,\n    displayedFilters: query.displayedFilters,\n    error: error,\n    exporter: exporter,\n    filter: filter,\n    filterValues: query.filterValues,\n    hideFilter: queryModifiers.hideFilter,\n    isFetching: isFetching,\n    isLoading: isLoading,\n    isPending: isPending,\n    onSelect: selectionModifiers.select,\n    onSelectAll: onSelectAll,\n    onToggleItem: selectionModifiers.toggle,\n    onUnselectItems: selectionModifiers.clearSelection,\n    page: query.page,\n    perPage: query.perPage,\n    refetch: refetch,\n    resource: resource,\n    selectedIds: selectedIds,\n    setFilters: queryModifiers.setFilters,\n    setPage: queryModifiers.setPage,\n    setPerPage: queryModifiers.setPerPage,\n    setSort: queryModifiers.setSort,\n    showFilter: queryModifiers.showFilter,\n    total: total,\n    hasNextPage: pageInfo ? pageInfo.hasNextPage : total != null ? query.page * query.perPage < total : undefined,\n    hasPreviousPage: pageInfo ? pageInfo.hasPreviousPage : query.page > 1\n  };\n};\nvar defaultSort = {\n  field: 'id',\n  order: SORT_ASC\n};\nexport var injectedProps = ['sort', 'data', 'defaultTitle', 'displayedFilters', 'error', 'exporter', 'filterValues', 'hasNextPage', 'hasPreviousPage', 'hideFilter', 'isFetching', 'isLoading', 'isPending', 'onSelect', 'onSelectAll', 'onToggleItem', 'onUnselectItems', 'page', 'perPage', 'refetch', 'refresh', 'resource', 'selectedIds', 'setFilters', 'setPage', 'setPerPage', 'setSort', 'showFilter', 'total', 'totalPages'];\n/**\n * Select the props injected by the useListController hook\n * to be passed to the List children need\n * This is an implementation of pick()\n */\nexport var getListControllerProps = function (props) {\n  return injectedProps.reduce(function (acc, key) {\n    var _a;\n    return __assign(__assign({}, acc), (_a = {}, _a[key] = props[key], _a));\n  }, {});\n};\n/**\n * Select the props not injected by the useListController hook\n * to be used inside the List children to sanitize props injected by List\n * This is an implementation of omit()\n */\nexport var sanitizeListRestProps = function (props) {\n  return Object.keys(props).filter(function (propName) {\n    return !injectedProps.includes(propName);\n  }).reduce(function (acc, key) {\n    var _a;\n    return __assign(__assign({}, acc), (_a = {}, _a[key] = props[key], _a));\n  }, {});\n};","map":{"version":3,"names":["isValidElement","useEffect","useMemo","useAuthenticated","useRequireAccess","useTranslate","useNotify","useGetList","useResourceContext","useGetResourceLabel","useRecordSelection","useListParams","useSelectAll","defaultExporter","SORT_ASC","useListController","props","_a","debounce","_b","disableAuthentication","_c","disableSyncWithLocation","_d","exporter","filter","filterDefaultValues","_e","perPage","_f","queryOptions","_g","sort","defaultSort","storeKey","resource","meta","otherQueryOptions","__rest","Error","Array","isArray","some","isPendingAuthenticated","enabled","isPending","isPendingCanAccess","action","translate","notify","_h","query","queryModifiers","_j","disableSyncWithStore","selectedIds","selectionModifiers","_k","pagination","page","field","order","__assign","placeholderData","previousData","retry","onError","error","message","type","messageArgs","_","data","pageInfo","total","responseMeta","isLoading","isFetching","refetch","length","setPage","totalPages","Math","ceil","currentSort","getResourceLabel","defaultTitle","name","onSelectAll","displayedFilters","filterValues","hideFilter","onSelect","select","onToggleItem","toggle","onUnselectItems","clearSelection","setFilters","setPerPage","setSort","showFilter","hasNextPage","undefined","hasPreviousPage","injectedProps","getListControllerProps","reduce","acc","key","sanitizeListRestProps","Object","keys","propName","includes"],"sources":["/home/diarietou/Bureau/afterSA/test/testfront/react-admin-test/node_modules/ra-core/src/controller/list/useListController.ts"],"sourcesContent":["import { isValidElement, useEffect, useMemo } from 'react';\n\nimport { useAuthenticated, useRequireAccess } from '../../auth';\nimport { useTranslate } from '../../i18n';\nimport { useNotify } from '../../notification';\nimport {\n    useGetList,\n    UseGetListHookValue,\n    UseGetListOptions,\n} from '../../dataProvider';\nimport { useResourceContext, useGetResourceLabel } from '../../core';\nimport { useRecordSelection } from './useRecordSelection';\nimport { useListParams } from './useListParams';\nimport { useSelectAll } from './useSelectAll';\nimport { defaultExporter } from '../../export';\nimport { SORT_ASC } from './queryReducer';\nimport type {\n    FilterPayload,\n    SortPayload,\n    RaRecord,\n    Exporter,\n} from '../../types';\nimport type {\n    UseReferenceArrayFieldControllerParams,\n    UseReferenceManyFieldControllerParams,\n} from '../field';\n\n/**\n * Prepare data for the List view\n *\n * @param {Object} props The props passed to the List component.\n *\n * @return {Object} controllerProps Fetched and computed data for the List view\n *\n * @example\n *\n * import { useListController } from 'react-admin';\n * import ListView from './ListView';\n *\n * const MyList = props => {\n *     const controllerProps = useListController(props);\n *     return <ListView {...controllerProps} {...props} />;\n * }\n */\nexport const useListController = <\n    RecordType extends RaRecord = any,\n    ErrorType = Error,\n>(\n    props: ListControllerProps<RecordType, ErrorType> = {}\n): ListControllerResult<RecordType, ErrorType> => {\n    const {\n        debounce = 500,\n        disableAuthentication = false,\n        disableSyncWithLocation = false,\n        exporter = defaultExporter,\n        filter,\n        filterDefaultValues,\n        perPage = 10,\n        queryOptions = {},\n        sort = defaultSort,\n        storeKey,\n    } = props;\n    const resource = useResourceContext(props);\n    const { meta, ...otherQueryOptions } = queryOptions;\n\n    if (!resource) {\n        throw new Error(\n            `useListController requires a non-empty resource prop or context`\n        );\n    }\n    if (\n        filter &&\n        (isValidElement(filter) ||\n            (Array.isArray(filter) && filter.some(isValidElement)))\n    ) {\n        throw new Error(\n            'useListController received a React element as `filter` props. If you intended to set the list filter elements, use the `filters` (with an s) prop instead. The `filter` prop is internal and should not be set by the developer.'\n        );\n    }\n\n    const { isPending: isPendingAuthenticated } = useAuthenticated({\n        enabled: !disableAuthentication,\n    });\n\n    const { isPending: isPendingCanAccess } = useRequireAccess<RecordType>({\n        action: 'list',\n        resource,\n        // If disableAuthentication is true then isPendingAuthenticated will always be true so this hook is disabled\n        enabled: !isPendingAuthenticated,\n    });\n\n    const translate = useTranslate();\n    const notify = useNotify();\n\n    const [query, queryModifiers] = useListParams({\n        debounce,\n        disableSyncWithLocation,\n        filterDefaultValues,\n        perPage,\n        resource,\n        sort,\n        storeKey,\n    });\n\n    const [selectedIds, selectionModifiers] = useRecordSelection({\n        resource,\n        disableSyncWithStore: storeKey === false,\n    });\n\n    const {\n        data,\n        pageInfo,\n        total,\n        meta: responseMeta,\n        error,\n        isLoading,\n        isFetching,\n        isPending,\n        refetch,\n    } = useGetList<RecordType, ErrorType>(\n        resource,\n        {\n            pagination: {\n                page: query.page,\n                perPage: query.perPage,\n            },\n            sort: { field: query.sort, order: query.order },\n            filter: { ...query.filter, ...filter },\n            meta,\n        },\n        {\n            enabled:\n                (!isPendingAuthenticated && !isPendingCanAccess) ||\n                disableAuthentication,\n            placeholderData: previousData => previousData,\n            retry: false,\n            onError: error =>\n                notify(\n                    (error as Error)?.message || 'ra.notification.http_error',\n                    {\n                        type: 'error',\n                        messageArgs: {\n                            _: (error as Error)?.message,\n                        },\n                    }\n                ),\n            ...otherQueryOptions,\n        }\n    );\n\n    // change page if there is no data\n    useEffect(() => {\n        if (\n            query.page <= 0 ||\n            (!isFetching &&\n                query.page > 1 &&\n                (data == null || data?.length === 0))\n        ) {\n            // Query for a page that doesn't exist, set page to 1\n            queryModifiers.setPage(1);\n            return;\n        }\n        if (total == null) {\n            return;\n        }\n        const totalPages = Math.ceil(total / query.perPage) || 1;\n        if (!isFetching && query.page > totalPages) {\n            // Query for a page out of bounds, set page to the last existing page\n            // It occurs when deleting the last element of the last page\n            queryModifiers.setPage(totalPages);\n        }\n    }, [isFetching, query.page, query.perPage, data, queryModifiers, total]);\n\n    const currentSort = useMemo(\n        () => ({\n            field: query.sort,\n            order: query.order,\n        }),\n        [query.sort, query.order]\n    );\n\n    const getResourceLabel = useGetResourceLabel();\n    const defaultTitle = translate('ra.page.list', {\n        name: getResourceLabel(resource, 2),\n    });\n\n    const onSelectAll = useSelectAll({\n        resource,\n        sort: { field: query.sort, order: query.order },\n        filter: { ...query.filter, ...filter },\n    });\n\n    return {\n        sort: currentSort,\n        data,\n        meta: responseMeta,\n        defaultTitle,\n        displayedFilters: query.displayedFilters,\n        error,\n        exporter,\n        filter,\n        filterValues: query.filterValues,\n        hideFilter: queryModifiers.hideFilter,\n        isFetching,\n        isLoading,\n        isPending,\n        onSelect: selectionModifiers.select,\n        onSelectAll,\n        onToggleItem: selectionModifiers.toggle,\n        onUnselectItems: selectionModifiers.clearSelection,\n        page: query.page,\n        perPage: query.perPage,\n        refetch,\n        resource,\n        selectedIds,\n        setFilters: queryModifiers.setFilters,\n        setPage: queryModifiers.setPage,\n        setPerPage: queryModifiers.setPerPage,\n        setSort: queryModifiers.setSort,\n        showFilter: queryModifiers.showFilter,\n        total,\n        hasNextPage: pageInfo\n            ? pageInfo.hasNextPage\n            : total != null\n              ? query.page * query.perPage < total\n              : undefined,\n        hasPreviousPage: pageInfo ? pageInfo.hasPreviousPage : query.page > 1,\n    } as ListControllerResult<RecordType, ErrorType>;\n};\n\nexport interface ListControllerProps<\n    RecordType extends RaRecord = any,\n    ErrorType = Error,\n> {\n    /**\n     * The debounce delay for filter queries in milliseconds. Defaults to 500ms.\n     *\n     * @see https://marmelab.com/react-admin/List.html#debounce\n     * @example\n     * // wait 1 seconds instead of 500 milliseconds befoce calling the dataProvider\n     * const PostList = () => (\n     *     <List debounce={1000}>\n     *         ...\n     *     </List>\n     * );\n     */\n    debounce?: number;\n\n    /**\n     * Allow anonymous access to the list view. Defaults to false.\n     *\n     * @see https://marmelab.com/react-admin/List.html#disableauthentication\n     * @example\n     * import { List } from 'react-admin';\n     *\n     * const BoolkList = () => (\n     *     <List disableAuthentication>\n     *         ...\n     *     </List>\n     * );\n     */\n    disableAuthentication?: boolean;\n\n    /**\n     * Whether to disable the synchronization of the list parameters with the current location (URL search parameters)\n     *\n     * @see https://marmelab.com/react-admin/List.html#disablesyncwithlocation\n     * @example\n     * const Dashboard = () => (\n     *     <div>\n     *         // ...\n     *         <ResourceContextProvider value=\"posts\">\n     *             <List disableSyncWithLocation>\n     *                 <SimpleList\n     *                     primaryText={record => record.title}\n     *                     secondaryText={record => `${record.views} views`}\n     *                     tertiaryText={record => new Date(record.published_at).toLocaleDateString()}\n     *                 />\n     *             </List>\n     *         </ResourceContextProvider>\n     *         <ResourceContextProvider value=\"comments\">\n     *             <List disableSyncWithLocation>\n     *                 <SimpleList\n     *                     primaryText={record => record.title}\n     *                     secondaryText={record => `${record.views} views`}\n     *                     tertiaryText={record => new Date(record.published_at).toLocaleDateString()}\n     *                 />\n     *             </List>\n     *         </ResourceContextProvider>\n     *     </div>\n     * )\n     */\n    disableSyncWithLocation?: boolean;\n\n    /**\n     * The function called when a user exports the list\n     *\n     * @see https://marmelab.com/react-admin/List.html#exporter\n     * @example\n     * import { List, downloadCSV } from 'react-admin';\n     * import jsonExport from 'jsonexport/dist';\n     *\n     * const exporter = posts => {\n     *     const postsForExport = posts.map(post => {\n     *         const { backLinks, author, ...postForExport } = post; // omit backLinks and author\n     *         postForExport.author_name = post.author.name; // add a field\n     *         return postForExport;\n     *     });\n     *     jsonExport(postsForExport, {\n     *         headers: ['id', 'title', 'author_name', 'body'] // order fields in the export\n     *     }, (err, csv) => {\n     *         downloadCSV(csv, 'posts'); // download as 'posts.csv` file\n     *     });\n     * };\n     *\n     * const PostList = () => (\n     *     <List exporter={exporter}>\n     *         ...\n     *     </List>\n     * )\n     */\n    exporter?: Exporter<RecordType> | false;\n\n    /**\n     * Permanent filter applied to all getList queries, regardless of the user selected filters.\n     *\n     * @see https://marmelab.com/react-admin/List.html#filter\n     * @example\n     * export const PostList = () => (\n     *     <List filter={{ is_published: true }}>\n     *         ...\n     *     </List>\n     * );\n     */\n    filter?: FilterPayload;\n\n    /**\n     * The filter to apply when calling getList if the filter is empty.\n     *\n     * @see https://marmelab.com/react-admin/List.html#filterdefaultvalues\n     * @example\n     * const postFilters = [\n     *     <TextInput label=\"Search\" source=\"q\" alwaysOn />,\n     *     <BooleanInput source=\"is_published\" alwaysOn />,\n     *     <TextInput source=\"title\" defaultValue=\"Hello, World!\" />,\n     * ];\n     *\n     * export const PostList = () => (\n     *     <List filters={postFilters} filterDefaultValues={{ is_published: true }}>\n     *         ...\n     *     </List>\n     * );\n     */\n    filterDefaultValues?: object;\n\n    /**\n     * The number of results per page. Defaults to 10.\n     *\n     * @see https://marmelab.com/react-admin/List.html#perpage\n     * @example\n     * export const PostList = () => (\n     *     <List perPage={25}>\n     *         ...\n     *     </List>\n     * );\n     */\n    perPage?: number;\n\n    /**\n     * The options passed to react-query's useQuery when calling getList.\n     *\n     * @see https://marmelab.com/react-admin/List.html#queryoptions\n     * @example\n     * import { useNotify, useRedirect, List } from 'react-admin';\n     *\n     * const PostList = () => {\n     *     const notify = useNotify();\n     *     const redirect = useRedirect();\n     *\n     *     const onError = (error) => {\n     *         notify(`Could not load list: ${error.message}`, { type: 'error' });\n     *         redirect('/dashboard');\n     *     };\n     *\n     *     return (\n     *         <List queryOptions={{ onError }}>\n     *             ...\n     *         </List>\n     *     );\n     * }\n     */\n    queryOptions?: UseGetListOptions<RecordType, ErrorType>;\n\n    /**\n     * The resource name. Defaults to the resource from ResourceContext.\n     *\n     * @see https://marmelab.com/react-admin/List.html#resource\n     * @example\n     * import { List } from 'react-admin';\n     *\n     * const PostList = () => (\n     *    <List resource=\"posts\">\n     *       ...\n     *   </List>\n     * );\n     */\n    resource?: string;\n\n    /**\n     * The default sort field and order. Defaults to { field: 'id', order: 'ASC' }.\n     *\n     * @see https://marmelab.com/react-admin/List.html#sort\n     * @example\n     * export const PostList = () => (\n     *     <List sort={{ field: 'published_at', order: 'DESC' }}>\n     *         ...\n     *     </List>\n     * );\n     */\n    sort?: SortPayload;\n\n    /**\n     * The key to use to store the current filter & sort. Pass false to disable.\n     *\n     * @see https://marmelab.com/react-admin/List.html#storekey\n     * @example\n     * const NewerBooks = () => (\n     *     <List\n     *         resource=\"books\"\n     *         storeKey=\"newerBooks\"\n     *         sort={{ field: 'year', order: 'DESC' }}\n     *     >\n     *         ...\n     *     </List>\n     * );\n     */\n    storeKey?: string | false;\n}\n\nconst defaultSort = {\n    field: 'id',\n    order: SORT_ASC,\n} as const;\n\nexport const injectedProps = [\n    'sort',\n    'data',\n    'defaultTitle',\n    'displayedFilters',\n    'error',\n    'exporter',\n    'filterValues',\n    'hasNextPage',\n    'hasPreviousPage',\n    'hideFilter',\n    'isFetching',\n    'isLoading',\n    'isPending',\n    'onSelect',\n    'onSelectAll',\n    'onToggleItem',\n    'onUnselectItems',\n    'page',\n    'perPage',\n    'refetch',\n    'refresh',\n    'resource',\n    'selectedIds',\n    'setFilters',\n    'setPage',\n    'setPerPage',\n    'setSort',\n    'showFilter',\n    'total',\n    'totalPages',\n];\n\n/**\n * Select the props injected by the useListController hook\n * to be passed to the List children need\n * This is an implementation of pick()\n */\nexport const getListControllerProps = props =>\n    injectedProps.reduce((acc, key) => ({ ...acc, [key]: props[key] }), {});\n\n/**\n * Select the props not injected by the useListController hook\n * to be used inside the List children to sanitize props injected by List\n * This is an implementation of omit()\n */\nexport const sanitizeListRestProps = props =>\n    Object.keys(props)\n        .filter(propName => !injectedProps.includes(propName))\n        .reduce((acc, key) => ({ ...acc, [key]: props[key] }), {});\n\nexport interface ListControllerBaseResult<RecordType extends RaRecord = any> {\n    sort: SortPayload;\n    defaultTitle?: string;\n    displayedFilters: any;\n    exporter?: Exporter | false;\n    filter?: FilterPayload;\n    filterValues: any;\n    hideFilter: (filterName: string) => void;\n    onSelect: (ids: RecordType['id'][]) => void;\n    onSelectAll: (options?: {\n        limit?: number;\n        queryOptions?:\n            | UseGetListOptions<RecordType>\n            | UseReferenceArrayFieldControllerParams<RecordType>['queryOptions']\n            | UseReferenceManyFieldControllerParams<RecordType>['queryOptions'];\n    }) => void;\n    onToggleItem: (id: RecordType['id']) => void;\n    onUnselectItems: () => void;\n    page: number;\n    perPage: number;\n    refetch: (() => void) | UseGetListHookValue<RecordType>['refetch'];\n    resource: string;\n    selectedIds: RecordType['id'][];\n    setFilters: (\n        filters: any,\n        displayedFilters?: any,\n        debounce?: boolean\n    ) => void;\n    setPage: (page: number) => void;\n    setPerPage: (page: number) => void;\n    setSort: (sort: SortPayload) => void;\n    showFilter: (filterName: string, defaultValue: any) => void;\n    hasNextPage?: boolean;\n    hasPreviousPage?: boolean;\n    isFetching?: boolean;\n    isLoading?: boolean;\n}\n\nexport interface ListControllerLoadingResult<RecordType extends RaRecord = any>\n    extends ListControllerBaseResult<RecordType> {\n    data: undefined;\n    total: undefined;\n    meta: undefined;\n    error: null;\n    isPending: true;\n}\nexport interface ListControllerErrorResult<\n    RecordType extends RaRecord = any,\n    TError = Error,\n> extends ListControllerBaseResult<RecordType> {\n    data: undefined;\n    total: undefined;\n    meta: undefined;\n    error: TError;\n    isPending: false;\n}\nexport interface ListControllerRefetchErrorResult<\n    RecordType extends RaRecord = any,\n    TError = Error,\n> extends ListControllerBaseResult<RecordType> {\n    data: RecordType[];\n    total: number;\n    meta?: any;\n    error: TError;\n    isPending: false;\n}\nexport interface ListControllerSuccessResult<RecordType extends RaRecord = any>\n    extends ListControllerBaseResult<RecordType> {\n    data: RecordType[];\n    total: number;\n    meta?: any;\n    error: null;\n    isPending: false;\n}\n\nexport type ListControllerResult<\n    RecordType extends RaRecord = any,\n    ErrorType = Error,\n> =\n    | ListControllerLoadingResult<RecordType>\n    | ListControllerErrorResult<RecordType, ErrorType>\n    | ListControllerRefetchErrorResult<RecordType, ErrorType>\n    | ListControllerSuccessResult<RecordType>;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}