{"ast":null,"code":"import { useContext } from 'react';\nimport { EditContext } from './EditContext';\n/**\n * Hook to read the edit controller props from the EditContext.\n *\n * Used within a <EditContextProvider> (e.g. as a descendent of <Edit>).\n *\n * @returns {EditControllerResult} edit controller props\n *\n * @see useEditController for how it is filled\n */\nexport var useEditContext = function () {\n  var context = useContext(EditContext);\n  if (!context) {\n    throw new Error('useEditContext must be used inside an EditContextProvider');\n  }\n  return context;\n};","map":{"version":3,"names":["useContext","EditContext","useEditContext","context","Error"],"sources":["/home/diarietou/Bureau/afterSA/test/testfront/react-admin-test/node_modules/ra-core/src/controller/edit/useEditContext.tsx"],"sourcesContent":["import { useContext } from 'react';\n\nimport { RaRecord } from '../../types';\nimport { EditContext } from './EditContext';\nimport { EditControllerResult } from './useEditController';\n\n/**\n * Hook to read the edit controller props from the EditContext.\n *\n * Used within a <EditContextProvider> (e.g. as a descendent of <Edit>).\n *\n * @returns {EditControllerResult} edit controller props\n *\n * @see useEditController for how it is filled\n */\nexport const useEditContext = <\n    RecordType extends RaRecord = any,\n    ErrorType = Error,\n>(): EditControllerResult<RecordType, ErrorType> => {\n    const context = useContext(EditContext);\n    if (!context) {\n        throw new Error(\n            'useEditContext must be used inside an EditContextProvider'\n        );\n    }\n    return context as EditControllerResult<RecordType, ErrorType>;\n};\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,OAAO;AAGlC,SAASC,WAAW,QAAQ,eAAe;AAG3C;;;;;;;;;AASA,OAAO,IAAMC,cAAc,GAAG,SAAAA,CAAA;EAI1B,IAAMC,OAAO,GAAGH,UAAU,CAACC,WAAW,CAAC;EACvC,IAAI,CAACE,OAAO,EAAE;IACV,MAAM,IAAIC,KAAK,CACX,2DAA2D,CAC9D;;EAEL,OAAOD,OAAsD;AACjE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}