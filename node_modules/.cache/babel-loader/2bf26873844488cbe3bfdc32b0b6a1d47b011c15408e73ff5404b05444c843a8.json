{"ast":null,"code":"/**\n * Populate react-query's query cache with a data dictionary\n *\n * @example\n * const data = {\n *    posts: [{ id: 1, title: 'Hello, world' }, { id: 2, title: 'FooBar' }],\n *    comments: [{ id: 1, post_id: 1, body: 'Nice post!' }],\n * };\n * populateQueryCache({ data, queryClient });\n * // setQueryData(['posts', 'getOne', { id: '1' }], { id: 1, title: 'Hello, world' });\n * // setQueryData(['posts', 'getOne', { id: '2' }], { id: 2, title: 'FooBar' });\n * // setQueryData(['posts', 'getMany', { ids: ['1', '2'] }], [{ id: 1, title: 'Hello, world' }, { id: 2, title: 'FooBar' }]);\n * // setQueryData(['comments', 'getOne', { id: '1' }], { id: 1, post_id: 1, body: 'Nice post!' });\n * // setQueryData(['comments', 'getMany', { ids: ['1'] }], [{ id: 1, post_id: 1, body: 'Nice post!' });\n */\nexport var populateQueryCache = function (_a) {\n  var data = _a.data,\n    queryClient = _a.queryClient,\n    _b = _a.staleTime,\n    staleTime = _b === void 0 ? 1000 : _b;\n  // setQueryData doesn't accept a stale time option\n  // So we set an updatedAt in the future to make sure the data isn't considered stale\n  var updatedAt = Date.now() + staleTime;\n  Object.keys(data).forEach(function (resource) {\n    data[resource].forEach(function (record) {\n      if (!record || record.id == null) return;\n      queryClient.setQueryData([resource, 'getOne', {\n        id: String(record.id)\n      }], record, {\n        updatedAt: updatedAt\n      });\n    });\n    var recordIds = data[resource].map(function (record) {\n      return String(record.id);\n    });\n    queryClient.setQueryData([resource, 'getMany', {\n      ids: recordIds\n    }], data[resource], {\n      updatedAt: updatedAt\n    });\n  });\n};","map":{"version":3,"names":["populateQueryCache","_a","data","queryClient","_b","staleTime","updatedAt","Date","now","Object","keys","forEach","resource","record","id","setQueryData","String","recordIds","map","ids"],"sources":["/home/diarietou/Bureau/afterSA/test/testfront/react-admin-test/node_modules/ra-core/src/dataProvider/populateQueryCache.ts"],"sourcesContent":["import type { QueryClient } from '@tanstack/react-query';\n\nexport type PopulateQueryCacheOptions = {\n    data: Record<string, any[]>;\n    queryClient: QueryClient;\n    staleTime?: number;\n};\n\n/**\n * Populate react-query's query cache with a data dictionary\n *\n * @example\n * const data = {\n *    posts: [{ id: 1, title: 'Hello, world' }, { id: 2, title: 'FooBar' }],\n *    comments: [{ id: 1, post_id: 1, body: 'Nice post!' }],\n * };\n * populateQueryCache({ data, queryClient });\n * // setQueryData(['posts', 'getOne', { id: '1' }], { id: 1, title: 'Hello, world' });\n * // setQueryData(['posts', 'getOne', { id: '2' }], { id: 2, title: 'FooBar' });\n * // setQueryData(['posts', 'getMany', { ids: ['1', '2'] }], [{ id: 1, title: 'Hello, world' }, { id: 2, title: 'FooBar' }]);\n * // setQueryData(['comments', 'getOne', { id: '1' }], { id: 1, post_id: 1, body: 'Nice post!' });\n * // setQueryData(['comments', 'getMany', { ids: ['1'] }], [{ id: 1, post_id: 1, body: 'Nice post!' });\n */\nexport const populateQueryCache = ({\n    data,\n    queryClient,\n    staleTime = 1000, // ms\n}: PopulateQueryCacheOptions) => {\n    // setQueryData doesn't accept a stale time option\n    // So we set an updatedAt in the future to make sure the data isn't considered stale\n    const updatedAt = Date.now() + staleTime;\n    Object.keys(data).forEach(resource => {\n        data[resource].forEach(record => {\n            if (!record || record.id == null) return;\n            queryClient.setQueryData(\n                [resource, 'getOne', { id: String(record.id) }],\n                record,\n                { updatedAt }\n            );\n        });\n        const recordIds = data[resource].map(record => String(record.id));\n        queryClient.setQueryData(\n            [resource, 'getMany', { ids: recordIds }],\n            data[resource],\n            { updatedAt }\n        );\n    });\n};\n"],"mappings":"AAQA;;;;;;;;;;;;;;;AAeA,OAAO,IAAMA,kBAAkB,GAAG,SAAAA,CAACC,EAIP;MAHxBC,IAAI,GAAAD,EAAA,CAAAC,IAAA;IACJC,WAAW,GAAAF,EAAA,CAAAE,WAAA;IACXC,EAAA,GAAAH,EAAA,CAAAI,SAAgB;IAAhBA,SAAS,GAAAD,EAAA,cAAG,IAAI,GAAAA,EAAA;EAEhB;EACA;EACA,IAAME,SAAS,GAAGC,IAAI,CAACC,GAAG,EAAE,GAAGH,SAAS;EACxCI,MAAM,CAACC,IAAI,CAACR,IAAI,CAAC,CAACS,OAAO,CAAC,UAAAC,QAAQ;IAC9BV,IAAI,CAACU,QAAQ,CAAC,CAACD,OAAO,CAAC,UAAAE,MAAM;MACzB,IAAI,CAACA,MAAM,IAAIA,MAAM,CAACC,EAAE,IAAI,IAAI,EAAE;MAClCX,WAAW,CAACY,YAAY,CACpB,CAACH,QAAQ,EAAE,QAAQ,EAAE;QAAEE,EAAE,EAAEE,MAAM,CAACH,MAAM,CAACC,EAAE;MAAC,CAAE,CAAC,EAC/CD,MAAM,EACN;QAAEP,SAAS,EAAAA;MAAA,CAAE,CAChB;IACL,CAAC,CAAC;IACF,IAAMW,SAAS,GAAGf,IAAI,CAACU,QAAQ,CAAC,CAACM,GAAG,CAAC,UAAAL,MAAM;MAAI,OAAAG,MAAM,CAACH,MAAM,CAACC,EAAE,CAAC;IAAjB,CAAiB,CAAC;IACjEX,WAAW,CAACY,YAAY,CACpB,CAACH,QAAQ,EAAE,SAAS,EAAE;MAAEO,GAAG,EAAEF;IAAS,CAAE,CAAC,EACzCf,IAAI,CAACU,QAAQ,CAAC,EACd;MAAEN,SAAS,EAAAA;IAAA,CAAE,CAChB;EACL,CAAC,CAAC;AACN,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}