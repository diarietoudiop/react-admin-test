{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport { Chip, Autocomplete, TextField } from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport { useInput, FieldTitle } from 'ra-core';\nimport { InputHelperText } from './InputHelperText';\nexport var TextArrayInput = function (_a) {\n  var className = _a.className,\n    disabled = _a.disabled,\n    format = _a.format,\n    helperText = _a.helperText,\n    label = _a.label,\n    margin = _a.margin,\n    parse = _a.parse,\n    readOnly = _a.readOnly,\n    size = _a.size,\n    source = _a.source,\n    sx = _a.sx,\n    validate = _a.validate,\n    variant = _a.variant,\n    props = __rest(_a, [\"className\", \"disabled\", \"format\", \"helperText\", \"label\", \"margin\", \"parse\", \"readOnly\", \"size\", \"source\", \"sx\", \"validate\", \"variant\"]);\n  var _b = useInput(__assign({\n      disabled: disabled,\n      format: format,\n      parse: parse,\n      readOnly: readOnly,\n      source: source,\n      validate: validate\n    }, props)),\n    field = _b.field,\n    _c = _b.fieldState,\n    error = _c.error,\n    invalid = _c.invalid,\n    id = _b.id,\n    isRequired = _b.isRequired;\n  var renderHelperText = helperText !== false || invalid;\n  return React.createElement(StyledAutocomplete, __assign({\n    multiple: true,\n    freeSolo: true,\n    autoSelect: true,\n    options: [],\n    id: id,\n    className: clsx('ra-input', \"ra-input-\".concat(source), className),\n    renderTags: function (value, getTagProps) {\n      return value.map(function (option, index) {\n        var _a = getTagProps({\n            index: index\n          }),\n          key = _a.key,\n          tagProps = __rest(_a, [\"key\"]);\n        return React.createElement(Chip, __assign({\n          size: \"small\",\n          label: option,\n          key: key\n        }, tagProps));\n      });\n    },\n    renderInput: function (params) {\n      return React.createElement(TextField, __assign({}, params, {\n        label: label !== '' && label !== false ? React.createElement(FieldTitle, {\n          label: label,\n          source: source,\n          resource: props.resource,\n          isRequired: isRequired\n        }) : null,\n        helperText: renderHelperText ? React.createElement(InputHelperText, {\n          error: error === null || error === void 0 ? void 0 : error.message,\n          helperText: helperText\n        }) : null,\n        error: invalid,\n        variant: variant,\n        margin: margin,\n        size: size\n      }));\n    },\n    sx: sx\n  }, field, {\n    value: field.value || emptyArray,\n    onChange: function (e, newValue) {\n      return field.onChange(newValue);\n    }\n  }, props, {\n    disabled: disabled || readOnly\n  }));\n};\nvar emptyArray = [];\nvar PREFIX = 'RaTextArrayInput';\nvar StyledAutocomplete = styled(Autocomplete, {\n  name: PREFIX,\n  overridesResolver: function (props, styles) {\n    return styles.root;\n  }\n})(function (_a) {\n  var theme = _a.theme;\n  return {\n    minWidth: theme.spacing(20)\n  };\n});","map":{"version":3,"names":["React","clsx","Chip","Autocomplete","TextField","styled","useInput","FieldTitle","InputHelperText","TextArrayInput","_a","className","disabled","format","helperText","label","margin","parse","readOnly","size","source","sx","validate","variant","props","__rest","_b","__assign","field","_c","fieldState","error","invalid","id","isRequired","renderHelperText","createElement","StyledAutocomplete","multiple","freeSolo","autoSelect","options","concat","renderTags","value","getTagProps","map","option","index","key","tagProps","renderInput","params","resource","message","emptyArray","onChange","e","newValue","PREFIX","name","overridesResolver","styles","root","theme","minWidth","spacing"],"sources":["/home/diarietou/Bureau/afterSA/test/testfront/react-admin-test/node_modules/ra-ui-materialui/src/input/TextArrayInput.tsx"],"sourcesContent":["import * as React from 'react';\nimport clsx from 'clsx';\nimport {\n    Chip,\n    Autocomplete,\n    AutocompleteProps,\n    TextField,\n} from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport { useInput, FieldTitle } from 'ra-core';\nimport { InputHelperText } from './InputHelperText';\nimport { CommonInputProps } from './CommonInputProps';\n\nexport type TextArrayInputProps = CommonInputProps &\n    Omit<\n        AutocompleteProps<string, true, true | false, true>,\n        'options' | 'renderInput' | 'renderTags' | 'multiple' | 'freeSolo'\n    > &\n    // allow to override options and renderTags\n    Partial<\n        Pick<\n            AutocompleteProps<string, true, true | false, true>,\n            'options' | 'renderTags'\n        >\n    >;\n\nexport const TextArrayInput = ({\n    className,\n    disabled,\n    format,\n    helperText,\n    label,\n    margin,\n    parse,\n    readOnly,\n    size,\n    source,\n    sx,\n    validate,\n    variant,\n    ...props\n}: TextArrayInputProps) => {\n    const {\n        field,\n        fieldState: { error, invalid },\n        id,\n        isRequired,\n    } = useInput({\n        disabled,\n        format,\n        parse,\n        readOnly,\n        source,\n        validate,\n        ...props,\n    });\n\n    const renderHelperText = helperText !== false || invalid;\n\n    return (\n        <StyledAutocomplete\n            multiple\n            freeSolo\n            autoSelect\n            options={[]}\n            id={id}\n            className={clsx('ra-input', `ra-input-${source}`, className)}\n            renderTags={(value: readonly string[], getTagProps) =>\n                value.map((option: string, index: number) => {\n                    const { key, ...tagProps } = getTagProps({ index });\n                    return (\n                        <Chip\n                            size=\"small\"\n                            label={option}\n                            key={key}\n                            {...tagProps}\n                        />\n                    );\n                })\n            }\n            renderInput={params => (\n                <TextField\n                    {...params}\n                    label={\n                        label !== '' && label !== false ? (\n                            <FieldTitle\n                                label={label}\n                                source={source}\n                                resource={props.resource}\n                                isRequired={isRequired}\n                            />\n                        ) : null\n                    }\n                    helperText={\n                        renderHelperText ? (\n                            <InputHelperText\n                                error={error?.message}\n                                helperText={helperText}\n                            />\n                        ) : null\n                    }\n                    error={invalid}\n                    variant={variant}\n                    margin={margin}\n                    size={size}\n                />\n            )}\n            sx={sx}\n            {...field}\n            value={field.value || emptyArray} // Autocomplete does not accept null or undefined\n            onChange={(e, newValue: string[]) => field.onChange(newValue)}\n            {...props}\n            disabled={disabled || readOnly}\n        />\n    );\n};\n\nconst emptyArray = [];\n\nconst PREFIX = 'RaTextArrayInput';\n\nconst StyledAutocomplete = styled(\n    Autocomplete<string, true, true | false, true>,\n    {\n        name: PREFIX,\n        overridesResolver: (props, styles) => styles.root,\n    }\n)(({ theme }) => ({\n    minWidth: theme.spacing(20),\n}));\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}