{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (g && (g = 0, op[0] && (_ = 0)), _) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nimport { stringify } from 'query-string';\nimport { fetchUtils } from 'ra-core';\n/**\n * Maps react-admin queries to a json-server powered REST API\n *\n * @see https://github.com/typicode/json-server\n *\n * @example\n *\n * getList          => GET http://my.api.url/posts?_sort=title&_order=ASC&_start=0&_end=24\n * getOne           => GET http://my.api.url/posts/123\n * getManyReference => GET http://my.api.url/posts?author_id=345\n * getMany          => GET http://my.api.url/posts?id=123&id=456&id=789\n * create           => POST http://my.api.url/posts/123\n * update           => PUT http://my.api.url/posts/123\n * updateMany       => PUT http://my.api.url/posts/123, PUT http://my.api.url/posts/456, PUT http://my.api.url/posts/789\n * delete           => DELETE http://my.api.url/posts/123\n *\n * @example\n *\n * import * as React from \"react\";\n * import { Admin, Resource } from 'react-admin';\n * import jsonServerProvider from 'ra-data-json-server';\n *\n * import { PostList } from './posts';\n *\n * const App = () => (\n *     <Admin dataProvider={jsonServerProvider('http://jsonplaceholder.typicode.com')}>\n *         <Resource name=\"posts\" list={PostList} />\n *     </Admin>\n * );\n *\n * export default App;\n */\nexport default (function (apiUrl, httpClient) {\n  if (httpClient === void 0) {\n    httpClient = fetchUtils.fetchJson;\n  }\n  return {\n    getList: function (resource, params) {\n      return __awaiter(void 0, void 0, void 0, function () {\n        var _a, page, perPage, _b, field, order, query, url, _c, headers, json, totalString;\n        var _d;\n        return __generator(this, function (_e) {\n          switch (_e.label) {\n            case 0:\n              _a = params.pagination || {}, page = _a.page, perPage = _a.perPage;\n              _b = params.sort || {}, field = _b.field, order = _b.order;\n              query = __assign(__assign({}, fetchUtils.flattenObject(params.filter)), {\n                _sort: field,\n                _order: order,\n                _start: page != null && perPage != null ? (page - 1) * perPage : undefined,\n                _end: page != null && perPage != null ? page * perPage : undefined,\n                _embed: (_d = params === null || params === void 0 ? void 0 : params.meta) === null || _d === void 0 ? void 0 : _d.embed\n              });\n              url = \"\".concat(apiUrl, \"/\").concat(resource, \"?\").concat(stringify(query));\n              return [4 /*yield*/, httpClient(url, {\n                signal: params === null || params === void 0 ? void 0 : params.signal\n              })];\n            case 1:\n              _c = _e.sent(), headers = _c.headers, json = _c.json;\n              if (!headers.has('x-total-count')) {\n                throw new Error('The X-Total-Count header is missing in the HTTP Response. The jsonServer Data Provider expects responses for lists of resources to contain this header with the total number of results to build the pagination. If you are using CORS, did you declare X-Total-Count in the Access-Control-Expose-Headers header?');\n              }\n              totalString = headers.get('x-total-count').split('/').pop();\n              if (totalString == null) {\n                throw new Error('The X-Total-Count header is invalid in the HTTP Response.');\n              }\n              return [2 /*return*/, {\n                data: json,\n                total: parseInt(totalString, 10)\n              }];\n          }\n        });\n      });\n    },\n    getOne: function (resource, params) {\n      return __awaiter(void 0, void 0, void 0, function () {\n        var url, json;\n        var _a;\n        return __generator(this, function (_b) {\n          switch (_b.label) {\n            case 0:\n              url = \"\".concat(apiUrl, \"/\").concat(resource, \"/\").concat(params.id);\n              if ((_a = params === null || params === void 0 ? void 0 : params.meta) === null || _a === void 0 ? void 0 : _a.embed) {\n                url += \"?_embed=\".concat(params.meta.embed);\n              }\n              return [4 /*yield*/, httpClient(url, {\n                signal: params === null || params === void 0 ? void 0 : params.signal\n              })];\n            case 1:\n              json = _b.sent().json;\n              return [2 /*return*/, {\n                data: json\n              }];\n          }\n        });\n      });\n    },\n    getMany: function (resource, params) {\n      return __awaiter(void 0, void 0, void 0, function () {\n        var query, url, json;\n        var _a;\n        return __generator(this, function (_b) {\n          switch (_b.label) {\n            case 0:\n              query = {\n                id: params.ids,\n                _embed: (_a = params === null || params === void 0 ? void 0 : params.meta) === null || _a === void 0 ? void 0 : _a.embed\n              };\n              url = \"\".concat(apiUrl, \"/\").concat(resource, \"?\").concat(stringify(query));\n              return [4 /*yield*/, httpClient(url, {\n                signal: params === null || params === void 0 ? void 0 : params.signal\n              })];\n            case 1:\n              json = _b.sent().json;\n              return [2 /*return*/, {\n                data: json\n              }];\n          }\n        });\n      });\n    },\n    getManyReference: function (resource, params) {\n      return __awaiter(void 0, void 0, void 0, function () {\n        var _a, page, perPage, _b, field, order, query, url, _c, headers, json, totalString;\n        var _d;\n        var _e;\n        return __generator(this, function (_f) {\n          switch (_f.label) {\n            case 0:\n              _a = params.pagination, page = _a.page, perPage = _a.perPage;\n              _b = params.sort, field = _b.field, order = _b.order;\n              query = __assign(__assign({}, fetchUtils.flattenObject(params.filter)), (_d = {}, _d[params.target] = params.id, _d._sort = field, _d._order = order, _d._start = (page - 1) * perPage, _d._end = page * perPage, _d._embed = (_e = params === null || params === void 0 ? void 0 : params.meta) === null || _e === void 0 ? void 0 : _e.embed, _d));\n              url = \"\".concat(apiUrl, \"/\").concat(resource, \"?\").concat(stringify(query));\n              return [4 /*yield*/, httpClient(url, {\n                signal: params === null || params === void 0 ? void 0 : params.signal\n              })];\n            case 1:\n              _c = _f.sent(), headers = _c.headers, json = _c.json;\n              if (!headers.has('x-total-count')) {\n                throw new Error('The X-Total-Count header is missing in the HTTP Response. The jsonServer Data Provider expects responses for lists of resources to contain this header with the total number of results to build the pagination. If you are using CORS, did you declare X-Total-Count in the Access-Control-Expose-Headers header?');\n              }\n              totalString = headers.get('x-total-count').split('/').pop();\n              if (totalString == null) {\n                throw new Error('The X-Total-Count header is invalid in the HTTP Response.');\n              }\n              return [2 /*return*/, {\n                data: json,\n                total: parseInt(totalString, 10)\n              }];\n          }\n        });\n      });\n    },\n    update: function (resource, params) {\n      return __awaiter(void 0, void 0, void 0, function () {\n        var json;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4 /*yield*/, httpClient(\"\".concat(apiUrl, \"/\").concat(resource, \"/\").concat(params.id), {\n                method: 'PUT',\n                body: JSON.stringify(params.data)\n              })];\n            case 1:\n              json = _a.sent().json;\n              return [2 /*return*/, {\n                data: json\n              }];\n          }\n        });\n      });\n    },\n    // json-server doesn't handle filters on UPDATE route, so we fallback to calling UPDATE n times instead\n    updateMany: function (resource, params) {\n      return __awaiter(void 0, void 0, void 0, function () {\n        var responses;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4 /*yield*/, Promise.all(params.ids.map(function (id) {\n                return httpClient(\"\".concat(apiUrl, \"/\").concat(resource, \"/\").concat(id), {\n                  method: 'PUT',\n                  body: JSON.stringify(params.data)\n                });\n              }))];\n            case 1:\n              responses = _a.sent();\n              return [2 /*return*/, {\n                data: responses.map(function (_a) {\n                  var json = _a.json;\n                  return json.id;\n                })\n              }];\n          }\n        });\n      });\n    },\n    create: function (resource, params) {\n      return __awaiter(void 0, void 0, void 0, function () {\n        var json;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4 /*yield*/, httpClient(\"\".concat(apiUrl, \"/\").concat(resource), {\n                method: 'POST',\n                body: JSON.stringify(params.data)\n              })];\n            case 1:\n              json = _a.sent().json;\n              return [2 /*return*/, {\n                data: __assign(__assign({}, params.data), json)\n              }];\n          }\n        });\n      });\n    },\n    delete: function (resource, params) {\n      return __awaiter(void 0, void 0, void 0, function () {\n        var json;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4 /*yield*/, httpClient(\"\".concat(apiUrl, \"/\").concat(resource, \"/\").concat(params.id), {\n                method: 'DELETE'\n              })];\n            case 1:\n              json = _a.sent().json;\n              return [2 /*return*/, {\n                data: json\n              }];\n          }\n        });\n      });\n    },\n    // json-server doesn't handle filters on DELETE route, so we fallback to calling DELETE n times instead\n    deleteMany: function (resource, params) {\n      return __awaiter(void 0, void 0, void 0, function () {\n        var responses;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4 /*yield*/, Promise.all(params.ids.map(function (id) {\n                return httpClient(\"\".concat(apiUrl, \"/\").concat(resource, \"/\").concat(id), {\n                  method: 'DELETE'\n                });\n              }))];\n            case 1:\n              responses = _a.sent();\n              return [2 /*return*/, {\n                data: responses.map(function (_a) {\n                  var json = _a.json;\n                  return json.id;\n                })\n              }];\n          }\n        });\n      });\n    }\n  };\n});","map":{"version":3,"names":["stringify","fetchUtils","apiUrl","httpClient","fetchJson","getList","resource","params","__awaiter","_a","pagination","page","perPage","_b","sort","field","order","query","__assign","flattenObject","filter","_sort","_order","_start","undefined","_end","_embed","_d","meta","embed","url","concat","signal","_c","_e","sent","headers","json","has","Error","totalString","get","split","pop","data","total","parseInt","getOne","id","getMany","ids","getManyReference","target","_f","update","method","body","JSON","updateMany","Promise","all","map","responses","create","delete","deleteMany"],"sources":["/home/diarietou/Bureau/afterSA/test/testfront/react-admin-test/node_modules/ra-data-json-server/src/index.ts"],"sourcesContent":["import { stringify } from 'query-string';\nimport { fetchUtils, DataProvider } from 'ra-core';\n\n/**\n * Maps react-admin queries to a json-server powered REST API\n *\n * @see https://github.com/typicode/json-server\n *\n * @example\n *\n * getList          => GET http://my.api.url/posts?_sort=title&_order=ASC&_start=0&_end=24\n * getOne           => GET http://my.api.url/posts/123\n * getManyReference => GET http://my.api.url/posts?author_id=345\n * getMany          => GET http://my.api.url/posts?id=123&id=456&id=789\n * create           => POST http://my.api.url/posts/123\n * update           => PUT http://my.api.url/posts/123\n * updateMany       => PUT http://my.api.url/posts/123, PUT http://my.api.url/posts/456, PUT http://my.api.url/posts/789\n * delete           => DELETE http://my.api.url/posts/123\n *\n * @example\n *\n * import * as React from \"react\";\n * import { Admin, Resource } from 'react-admin';\n * import jsonServerProvider from 'ra-data-json-server';\n *\n * import { PostList } from './posts';\n *\n * const App = () => (\n *     <Admin dataProvider={jsonServerProvider('http://jsonplaceholder.typicode.com')}>\n *         <Resource name=\"posts\" list={PostList} />\n *     </Admin>\n * );\n *\n * export default App;\n */\nexport default (apiUrl, httpClient = fetchUtils.fetchJson): DataProvider => ({\n    getList: async (resource, params) => {\n        const { page, perPage } = params.pagination || {};\n        const { field, order } = params.sort || {};\n        const query = {\n            ...fetchUtils.flattenObject(params.filter),\n            _sort: field,\n            _order: order,\n            _start:\n                page != null && perPage != null\n                    ? (page - 1) * perPage\n                    : undefined,\n            _end: page != null && perPage != null ? page * perPage : undefined,\n            _embed: params?.meta?.embed,\n        };\n        const url = `${apiUrl}/${resource}?${stringify(query)}`;\n\n        const { headers, json } = await httpClient(url, {\n            signal: params?.signal,\n        });\n        if (!headers.has('x-total-count')) {\n            throw new Error(\n                'The X-Total-Count header is missing in the HTTP Response. The jsonServer Data Provider expects responses for lists of resources to contain this header with the total number of results to build the pagination. If you are using CORS, did you declare X-Total-Count in the Access-Control-Expose-Headers header?'\n            );\n        }\n        const totalString = headers.get('x-total-count')!.split('/').pop();\n        if (totalString == null) {\n            throw new Error(\n                'The X-Total-Count header is invalid in the HTTP Response.'\n            );\n        }\n        return { data: json, total: parseInt(totalString, 10) };\n    },\n\n    getOne: async (resource, params) => {\n        let url = `${apiUrl}/${resource}/${params.id}`;\n        if (params?.meta?.embed) {\n            url += `?_embed=${params.meta.embed}`;\n        }\n        const { json } = await httpClient(url, { signal: params?.signal });\n        return { data: json };\n    },\n\n    getMany: async (resource, params) => {\n        const query = {\n            id: params.ids,\n            _embed: params?.meta?.embed,\n        };\n        const url = `${apiUrl}/${resource}?${stringify(query)}`;\n        const { json } = await httpClient(url, { signal: params?.signal });\n        return { data: json };\n    },\n\n    getManyReference: async (resource, params) => {\n        const { page, perPage } = params.pagination;\n        const { field, order } = params.sort;\n        const query = {\n            ...fetchUtils.flattenObject(params.filter),\n            [params.target]: params.id,\n            _sort: field,\n            _order: order,\n            _start: (page - 1) * perPage,\n            _end: page * perPage,\n            _embed: params?.meta?.embed,\n        };\n        const url = `${apiUrl}/${resource}?${stringify(query)}`;\n\n        const { headers, json } = await httpClient(url, {\n            signal: params?.signal,\n        });\n\n        if (!headers.has('x-total-count')) {\n            throw new Error(\n                'The X-Total-Count header is missing in the HTTP Response. The jsonServer Data Provider expects responses for lists of resources to contain this header with the total number of results to build the pagination. If you are using CORS, did you declare X-Total-Count in the Access-Control-Expose-Headers header?'\n            );\n        }\n        const totalString = headers.get('x-total-count')!.split('/').pop();\n        if (totalString == null) {\n            throw new Error(\n                'The X-Total-Count header is invalid in the HTTP Response.'\n            );\n        }\n        return { data: json, total: parseInt(totalString, 10) };\n    },\n\n    update: async (resource, params) => {\n        const { json } = await httpClient(\n            `${apiUrl}/${resource}/${params.id}`,\n            {\n                method: 'PUT',\n                body: JSON.stringify(params.data),\n            }\n        );\n        return { data: json };\n    },\n\n    // json-server doesn't handle filters on UPDATE route, so we fallback to calling UPDATE n times instead\n    updateMany: async (resource, params) => {\n        const responses = await Promise.all(\n            params.ids.map(id =>\n                httpClient(`${apiUrl}/${resource}/${id}`, {\n                    method: 'PUT',\n                    body: JSON.stringify(params.data),\n                })\n            )\n        );\n        return { data: responses.map(({ json }) => json.id) };\n    },\n\n    create: async (resource, params) => {\n        const { json } = await httpClient(`${apiUrl}/${resource}`, {\n            method: 'POST',\n            body: JSON.stringify(params.data),\n        });\n        return { data: { ...params.data, ...json } as any };\n    },\n\n    delete: async (resource, params) => {\n        const { json } = await httpClient(\n            `${apiUrl}/${resource}/${params.id}`,\n            { method: 'DELETE' }\n        );\n        return { data: json };\n    },\n\n    // json-server doesn't handle filters on DELETE route, so we fallback to calling DELETE n times instead\n    deleteMany: async (resource, params) => {\n        const responses = await Promise.all(\n            params.ids.map(id =>\n                httpClient(`${apiUrl}/${resource}/${id}`, {\n                    method: 'DELETE',\n                })\n            )\n        );\n        return { data: responses.map(({ json }) => json.id) };\n    },\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}