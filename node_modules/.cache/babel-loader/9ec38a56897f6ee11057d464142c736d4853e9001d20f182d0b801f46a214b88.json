{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport { isValidElement } from 'react';\nimport { Link, useLocation } from 'react-router-dom';\nimport { Tab as MuiTab, Stack, styled } from '@mui/material';\nimport { useTranslate, useSplatPathBase } from 'ra-core';\nimport clsx from 'clsx';\nimport { Labeled } from '../Labeled';\n/**\n * Tab element for the TabbedShowLayout.\n *\n * The `<Tab>` component accepts the following props:\n *\n * - label: The string displayed for each tab\n * - icon: The icon to show before the label (optional). Must be a component.\n * - path: The string used for custom urls\n *\n * It is also available as TabbedShowLayout.Tab.\n *\n * @example\n *     // in src/posts.js\n *     import * as React from \"react\";\n *     import FavoriteIcon from '@mui/icons-material/Favorite';\n *     import PersonPinIcon from '@mui/icons-material/PersonPin';\n *     import { Show, TabbedShowLayout, TextField } from 'react-admin';\n *\n *     export const PostShow = () => (\n *         <Show>\n *             <TabbedShowLayout>\n *                 <TabbedShowLayout.Tab label=\"Content\" icon={<FavoriteIcon />}>\n *                     <TextField source=\"title\" />\n *                     <TextField source=\"subtitle\" />\n *                </TabbedShowLayout.Tab>\n *                 <TabbedShowLayout.Tab label=\"Metadata\" icon={<PersonIcon />} path=\"metadata\">\n *                     <TextField source=\"category\" />\n *                </TabbedShowLayout.Tab>\n *             </TabbedShowLayout>\n *         </Show>\n *     );\n *\n *     // in src/App.js\n *     import * as React from \"react\";\n *     import { Admin, Resource } from 'react-admin';\n *\n *     import { PostShow } from './posts';\n *\n *     const App = () => (\n *         <Admin dataProvider={...}>\n *             <Resource name=\"posts\" show={PostShow} />\n *         </Admin>\n *     );\n *     export default App;\n */\nexport var Tab = function (_a) {\n  var children = _a.children,\n    contentClassName = _a.contentClassName,\n    context = _a.context,\n    count = _a.count,\n    className = _a.className,\n    divider = _a.divider,\n    icon = _a.icon,\n    iconPosition = _a.iconPosition,\n    label = _a.label,\n    record = _a.record,\n    _b = _a.spacing,\n    spacing = _b === void 0 ? 1 : _b,\n    _c = _a.syncWithLocation,\n    syncWithLocation = _c === void 0 ? true : _c,\n    value = _a.value,\n    rest = __rest(_a, [\"children\", \"contentClassName\", \"context\", \"count\", \"className\", \"divider\", \"icon\", \"iconPosition\", \"label\", \"record\", \"spacing\", \"syncWithLocation\", \"value\"]);\n  var translate = useTranslate();\n  var location = useLocation();\n  var splatPathBase = useSplatPathBase();\n  var newPathName = value == null || value === '' ? splatPathBase : \"\".concat(splatPathBase, \"/\").concat(value);\n  var propsForLink = {\n    component: Link,\n    to: __assign(__assign({}, location), {\n      pathname: newPathName\n    })\n  };\n  var renderHeader = function () {\n    var tabLabel = typeof label === 'string' ? translate(label, {\n      _: label\n    }) : label;\n    if (count !== undefined) {\n      tabLabel = React.createElement(\"span\", null, tabLabel, \" (\", count, \")\");\n    }\n    return React.createElement(MuiTab, __assign({\n      key: \"tab-header-\".concat(value),\n      label: tabLabel,\n      value: value,\n      icon: icon,\n      iconPosition: iconPosition,\n      className: clsx('show-tab', className)\n    }, syncWithLocation ? propsForLink : {}, rest));\n  };\n  var renderContent = function () {\n    return React.createElement(Root, {\n      className: contentClassName,\n      spacing: spacing,\n      divider: divider\n    }, React.Children.map(children, function (field) {\n      return field && isValidElement(field) ? React.createElement(Labeled, {\n        key: field.props.source,\n        className: clsx('ra-field', field.props.source && \"ra-field-\".concat(field.props.source), TabClasses.row, field.props.className)\n      }, field) : null;\n    }));\n  };\n  return context === 'header' ? renderHeader() : renderContent();\n};\nvar PREFIX = 'RaTab';\nexport var TabClasses = {\n  row: \"\".concat(PREFIX, \"-row\")\n};\nvar Root = styled(Stack, {\n  name: PREFIX,\n  overridesResolver: function (props, styles) {\n    return styles.root;\n  }\n})(function () {\n  var _a;\n  return _a = {}, _a[\"& .\".concat(TabClasses.row)] = {\n    display: 'inline'\n  }, _a;\n});","map":{"version":3,"names":["React","isValidElement","Link","useLocation","Tab","MuiTab","Stack","styled","useTranslate","useSplatPathBase","clsx","Labeled","_a","children","contentClassName","context","count","className","divider","icon","iconPosition","label","record","_b","spacing","_c","syncWithLocation","value","rest","__rest","translate","location","splatPathBase","newPathName","concat","propsForLink","component","to","__assign","pathname","renderHeader","tabLabel","_","undefined","createElement","key","renderContent","Root","Children","map","field","props","source","TabClasses","row","PREFIX","name","overridesResolver","styles","root","display"],"sources":["/home/diarietou/Bureau/afterSA/test/testfront/react-admin-test/node_modules/ra-ui-materialui/src/detail/Tab.tsx"],"sourcesContent":["import * as React from 'react';\nimport { isValidElement, ReactElement, ReactNode } from 'react';\nimport { Link, useLocation } from 'react-router-dom';\nimport {\n    Tab as MuiTab,\n    TabProps as MuiTabProps,\n    Stack,\n    styled,\n} from '@mui/material';\nimport { ResponsiveStyleValue } from '@mui/system';\nimport { useTranslate, RaRecord, useSplatPathBase } from 'ra-core';\nimport clsx from 'clsx';\n\nimport { Labeled } from '../Labeled';\n\n/**\n * Tab element for the TabbedShowLayout.\n *\n * The `<Tab>` component accepts the following props:\n *\n * - label: The string displayed for each tab\n * - icon: The icon to show before the label (optional). Must be a component.\n * - path: The string used for custom urls\n *\n * It is also available as TabbedShowLayout.Tab.\n *\n * @example\n *     // in src/posts.js\n *     import * as React from \"react\";\n *     import FavoriteIcon from '@mui/icons-material/Favorite';\n *     import PersonPinIcon from '@mui/icons-material/PersonPin';\n *     import { Show, TabbedShowLayout, TextField } from 'react-admin';\n *\n *     export const PostShow = () => (\n *         <Show>\n *             <TabbedShowLayout>\n *                 <TabbedShowLayout.Tab label=\"Content\" icon={<FavoriteIcon />}>\n *                     <TextField source=\"title\" />\n *                     <TextField source=\"subtitle\" />\n *                </TabbedShowLayout.Tab>\n *                 <TabbedShowLayout.Tab label=\"Metadata\" icon={<PersonIcon />} path=\"metadata\">\n *                     <TextField source=\"category\" />\n *                </TabbedShowLayout.Tab>\n *             </TabbedShowLayout>\n *         </Show>\n *     );\n *\n *     // in src/App.js\n *     import * as React from \"react\";\n *     import { Admin, Resource } from 'react-admin';\n *\n *     import { PostShow } from './posts';\n *\n *     const App = () => (\n *         <Admin dataProvider={...}>\n *             <Resource name=\"posts\" show={PostShow} />\n *         </Admin>\n *     );\n *     export default App;\n */\nexport const Tab = ({\n    children,\n    contentClassName,\n    context,\n    count,\n    className,\n    divider,\n    icon,\n    iconPosition,\n    label,\n    record,\n    spacing = 1,\n    syncWithLocation = true,\n    value,\n    ...rest\n}: TabProps) => {\n    const translate = useTranslate();\n    const location = useLocation();\n    const splatPathBase = useSplatPathBase();\n    const newPathName =\n        value == null || value === ''\n            ? splatPathBase\n            : `${splatPathBase}/${value}`;\n    const propsForLink = {\n        component: Link,\n        to: { ...location, pathname: newPathName },\n    };\n\n    const renderHeader = () => {\n        let tabLabel =\n            typeof label === 'string' ? translate(label, { _: label }) : label;\n        if (count !== undefined) {\n            tabLabel = (\n                <span>\n                    {tabLabel} ({count})\n                </span>\n            );\n        }\n\n        return (\n            <MuiTab\n                key={`tab-header-${value}`}\n                label={tabLabel}\n                value={value}\n                icon={icon}\n                iconPosition={iconPosition}\n                className={clsx('show-tab', className)}\n                {...(syncWithLocation ? propsForLink : {})} // to avoid TypeScript screams, see https://github.com/mui/material-ui/issues/9106#issuecomment-451270521\n                {...rest}\n            />\n        );\n    };\n\n    const renderContent = () => (\n        <Root className={contentClassName} spacing={spacing} divider={divider}>\n            {React.Children.map(children, field =>\n                field && isValidElement<any>(field) ? (\n                    <Labeled\n                        key={field.props.source}\n                        className={clsx(\n                            'ra-field',\n                            field.props.source &&\n                                `ra-field-${field.props.source}`,\n                            TabClasses.row,\n                            field.props.className\n                        )}\n                    >\n                        {field}\n                    </Labeled>\n                ) : null\n            )}\n        </Root>\n    );\n\n    return context === 'header' ? renderHeader() : renderContent();\n};\n\nconst PREFIX = 'RaTab';\n\nexport const TabClasses = {\n    row: `${PREFIX}-row`,\n};\n\nconst Root = styled(Stack, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(() => ({\n    [`& .${TabClasses.row}`]: {\n        display: 'inline',\n    },\n}));\n\nexport interface TabProps extends Omit<MuiTabProps, 'children'> {\n    children: ReactNode;\n    contentClassName?: string;\n    context?: 'header' | 'content';\n    count?: ReactNode;\n    className?: string;\n    divider?: ReactNode;\n    icon?: ReactElement;\n    label: string | ReactElement;\n    path?: string;\n    record?: RaRecord;\n    spacing?: ResponsiveStyleValue<number | string>;\n    syncWithLocation?: boolean;\n    value?: string | number;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}