{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport { alpha, styled } from '@mui/material/styles';\nimport ActionUpdate from '@mui/icons-material/Update';\nimport { useRefresh, useNotify, useResourceContext, useRecordContext, useUpdate, useTranslate } from 'ra-core';\nimport { Button } from './Button';\nexport var UpdateWithUndoButton = function (props) {\n  var record = useRecordContext(props);\n  var notify = useNotify();\n  var resource = useResourceContext(props);\n  var refresh = useRefresh();\n  var translate = useTranslate();\n  var data = props.data,\n    _a = props.label,\n    label = _a === void 0 ? 'ra.action.update' : _a,\n    _b = props.icon,\n    icon = _b === void 0 ? defaultIcon : _b,\n    onClick = props.onClick,\n    _c = props.mutationOptions,\n    mutationOptions = _c === void 0 ? {} : _c,\n    rest = __rest(props, [\"data\", \"label\", \"icon\", \"onClick\", \"mutationOptions\"]);\n  var _d = useUpdate(),\n    updateMany = _d[0],\n    isPending = _d[1].isPending;\n  var mutationMeta = mutationOptions.meta,\n    _e = mutationOptions.onSuccess,\n    onSuccess = _e === void 0 ? function () {\n      notify(\"resources.\".concat(resource, \".notifications.updated\"), {\n        type: 'info',\n        messageArgs: {\n          smart_count: 1,\n          _: translate('ra.notification.updated', {\n            smart_count: 1\n          })\n        },\n        undoable: true\n      });\n    } : _e,\n    _f = mutationOptions.onError,\n    onError = _f === void 0 ? function (error) {\n      notify(typeof error === 'string' ? error : error.message || 'ra.notification.http_error', {\n        type: 'error',\n        messageArgs: {\n          _: typeof error === 'string' ? error : error && error.message ? error.message : undefined\n        }\n      });\n      refresh();\n    } : _f,\n    otherMutationOptions = __rest(mutationOptions, [\"meta\", \"onSuccess\", \"onError\"]);\n  var handleClick = function (e) {\n    if (!record) {\n      throw new Error('The UpdateWithUndoButton must be used inside a RecordContext.Provider or must be passed a record prop.');\n    }\n    updateMany(resource, {\n      id: record.id,\n      data: data,\n      meta: mutationMeta,\n      previousData: record\n    }, __assign({\n      onSuccess: onSuccess,\n      onError: onError,\n      mutationMode: 'undoable'\n    }, otherMutationOptions));\n    if (typeof onClick === 'function') {\n      onClick(e);\n    }\n    e.stopPropagation();\n  };\n  return React.createElement(StyledButton, __assign({\n    onClick: handleClick,\n    label: label,\n    disabled: isPending\n  }, sanitizeRestProps(rest)), icon);\n};\nvar defaultIcon = React.createElement(ActionUpdate, null);\nvar sanitizeRestProps = function (_a) {\n  var label = _a.label,\n    rest = __rest(_a, [\"label\"]);\n  return rest;\n};\nvar PREFIX = 'RaUpdateWithUndoButton';\nvar StyledButton = styled(Button, {\n  name: PREFIX,\n  overridesResolver: function (props, styles) {\n    return styles.root;\n  }\n})(function (_a) {\n  var theme = _a.theme;\n  return {\n    color: theme.palette.primary.main,\n    '&:hover': {\n      backgroundColor: alpha(theme.palette.primary.main, 0.12),\n      // Reset on mouse devices\n      '@media (hover: none)': {\n        backgroundColor: 'transparent'\n      }\n    }\n  };\n});","map":{"version":3,"names":["React","alpha","styled","ActionUpdate","useRefresh","useNotify","useResourceContext","useRecordContext","useUpdate","useTranslate","Button","UpdateWithUndoButton","props","record","notify","resource","refresh","translate","data","_a","label","_b","icon","defaultIcon","onClick","_c","mutationOptions","rest","__rest","_d","updateMany","isPending","mutationMeta","meta","_e","onSuccess","concat","type","messageArgs","smart_count","_","undoable","_f","onError","error","message","undefined","otherMutationOptions","handleClick","e","Error","id","previousData","__assign","mutationMode","stopPropagation","createElement","StyledButton","disabled","sanitizeRestProps","PREFIX","name","overridesResolver","styles","root","theme","color","palette","primary","main","backgroundColor"],"sources":["/home/diarietou/Bureau/afterSA/test/testfront/react-admin-test/node_modules/ra-ui-materialui/src/button/UpdateWithUndoButton.tsx"],"sourcesContent":["import * as React from 'react';\nimport { alpha, styled } from '@mui/material/styles';\nimport { ReactElement } from 'react';\nimport ActionUpdate from '@mui/icons-material/Update';\nimport {\n    useRefresh,\n    useNotify,\n    useResourceContext,\n    RaRecord,\n    useRecordContext,\n    useUpdate,\n    UpdateParams,\n    useTranslate,\n} from 'ra-core';\nimport { UseMutationOptions } from '@tanstack/react-query';\n\nimport { Button, ButtonProps } from './Button';\n\nexport const UpdateWithUndoButton = (props: UpdateWithUndoButtonProps) => {\n    const record = useRecordContext(props);\n    const notify = useNotify();\n    const resource = useResourceContext(props);\n    const refresh = useRefresh();\n    const translate = useTranslate();\n\n    const {\n        data,\n        label = 'ra.action.update',\n        icon = defaultIcon,\n        onClick,\n        mutationOptions = {},\n        ...rest\n    } = props;\n\n    const [updateMany, { isPending }] = useUpdate();\n\n    const {\n        meta: mutationMeta,\n        onSuccess = () => {\n            notify(`resources.${resource}.notifications.updated`, {\n                type: 'info',\n                messageArgs: {\n                    smart_count: 1,\n                    _: translate('ra.notification.updated', { smart_count: 1 }),\n                },\n                undoable: true,\n            });\n        },\n        onError = (error: Error | string) => {\n            notify(\n                typeof error === 'string'\n                    ? error\n                    : error.message || 'ra.notification.http_error',\n                {\n                    type: 'error',\n                    messageArgs: {\n                        _:\n                            typeof error === 'string'\n                                ? error\n                                : error && error.message\n                                  ? error.message\n                                  : undefined,\n                    },\n                }\n            );\n            refresh();\n        },\n        ...otherMutationOptions\n    } = mutationOptions;\n\n    const handleClick = e => {\n        if (!record) {\n            throw new Error(\n                'The UpdateWithUndoButton must be used inside a RecordContext.Provider or must be passed a record prop.'\n            );\n        }\n        updateMany(\n            resource,\n            { id: record.id, data, meta: mutationMeta, previousData: record },\n            {\n                onSuccess,\n                onError,\n                mutationMode: 'undoable',\n                ...otherMutationOptions,\n            }\n        );\n        if (typeof onClick === 'function') {\n            onClick(e);\n        }\n        e.stopPropagation();\n    };\n\n    return (\n        <StyledButton\n            onClick={handleClick}\n            label={label}\n            disabled={isPending}\n            {...sanitizeRestProps(rest)}\n        >\n            {icon}\n        </StyledButton>\n    );\n};\n\nconst defaultIcon = <ActionUpdate />;\n\nconst sanitizeRestProps = ({\n    label,\n    ...rest\n}: Omit<UpdateWithUndoButtonProps, 'resource' | 'icon' | 'data'>) => rest;\n\nexport interface UpdateWithUndoButtonProps<\n    RecordType extends RaRecord = any,\n    MutationOptionsError = unknown,\n> extends ButtonProps {\n    icon?: ReactElement;\n    data: any;\n    mutationOptions?: UseMutationOptions<\n        RecordType,\n        MutationOptionsError,\n        UpdateParams<RecordType>\n    > & { meta?: any };\n}\n\nconst PREFIX = 'RaUpdateWithUndoButton';\n\nconst StyledButton = styled(Button, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    color: theme.palette.primary.main,\n    '&:hover': {\n        backgroundColor: alpha(theme.palette.primary.main, 0.12),\n        // Reset on mouse devices\n        '@media (hover: none)': {\n            backgroundColor: 'transparent',\n        },\n    },\n}));\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,KAAK,EAAEC,MAAM,QAAQ,sBAAsB;AAEpD,OAAOC,YAAY,MAAM,4BAA4B;AACrD,SACIC,UAAU,EACVC,SAAS,EACTC,kBAAkB,EAElBC,gBAAgB,EAChBC,SAAS,EAETC,YAAY,QACT,SAAS;AAGhB,SAASC,MAAM,QAAqB,UAAU;AAE9C,OAAO,IAAMC,oBAAoB,GAAG,SAAAA,CAACC,KAAgC;EACjE,IAAMC,MAAM,GAAGN,gBAAgB,CAACK,KAAK,CAAC;EACtC,IAAME,MAAM,GAAGT,SAAS,EAAE;EAC1B,IAAMU,QAAQ,GAAGT,kBAAkB,CAACM,KAAK,CAAC;EAC1C,IAAMI,OAAO,GAAGZ,UAAU,EAAE;EAC5B,IAAMa,SAAS,GAAGR,YAAY,EAAE;EAG5B,IAAAS,IAAI,GAMJN,KAAK,CAAAM,IAND;IACJC,EAAA,GAKAP,KAAK,CAAAQ,KALqB;IAA1BA,KAAK,GAAAD,EAAA,cAAG,kBAAkB,GAAAA,EAAA;IAC1BE,EAAA,GAIAT,KAAK,CAAAU,IAJa;IAAlBA,IAAI,GAAAD,EAAA,cAAGE,WAAW,GAAAF,EAAA;IAClBG,OAAO,GAGPZ,KAAK,CAAAY,OAHE;IACPC,EAAA,GAEAb,KAAK,CAAAc,eAFe;IAApBA,eAAe,GAAAD,EAAA,cAAG,EAAE,GAAAA,EAAA;IACjBE,IAAI,GAAAC,MAAA,CACPhB,KAAK,EAPH,uDAOL,CADU;EAGL,IAAAiB,EAAA,GAA8BrB,SAAS,EAAE;IAAxCsB,UAAU,GAAAD,EAAA;IAAIE,SAAS,GAAAF,EAAA,IAAAE,SAAiB;EAG3C,IAAMC,YAAY,GA+BlBN,eAAe,CAAAO,IA/BG;IAClBC,EAAA,GA8BAR,eAAe,CAAAS,SArBd;IATDA,SAAS,GAAAD,EAAA,cAAG;MACRpB,MAAM,CAAC,aAAAsB,MAAA,CAAarB,QAAQ,2BAAwB,EAAE;QAClDsB,IAAI,EAAE,MAAM;QACZC,WAAW,EAAE;UACTC,WAAW,EAAE,CAAC;UACdC,CAAC,EAAEvB,SAAS,CAAC,yBAAyB,EAAE;YAAEsB,WAAW,EAAE;UAAC,CAAE;SAC7D;QACDE,QAAQ,EAAE;OACb,CAAC;IACN,CAAC,GAAAP,EAAA;IACDQ,EAAA,GAoBAhB,eAAe,CAAAiB,OAFd;IAlBDA,OAAO,GAAAD,EAAA,cAAG,UAACE,KAAqB;MAC5B9B,MAAM,CACF,OAAO8B,KAAK,KAAK,QAAQ,GACnBA,KAAK,GACLA,KAAK,CAACC,OAAO,IAAI,4BAA4B,EACnD;QACIR,IAAI,EAAE,OAAO;QACbC,WAAW,EAAE;UACTE,CAAC,EACG,OAAOI,KAAK,KAAK,QAAQ,GACnBA,KAAK,GACLA,KAAK,IAAIA,KAAK,CAACC,OAAO,GACpBD,KAAK,CAACC,OAAO,GACbC;;OAEnB,CACJ;MACD9B,OAAO,EAAE;IACb,CAAC,GAAA0B,EAAA;IACEK,oBAAoB,GAAAnB,MAAA,CACvBF,eAAe,EAhCb,gCAgCL,CAD0B;EAG3B,IAAMsB,WAAW,GAAG,SAAAA,CAAAC,CAAC;IACjB,IAAI,CAACpC,MAAM,EAAE;MACT,MAAM,IAAIqC,KAAK,CACX,wGAAwG,CAC3G;;IAELpB,UAAU,CACNf,QAAQ,EACR;MAAEoC,EAAE,EAAEtC,MAAM,CAACsC,EAAE;MAAEjC,IAAI,EAAAA,IAAA;MAAEe,IAAI,EAAED,YAAY;MAAEoB,YAAY,EAAEvC;IAAM,CAAE,EAAAwC,QAAA;MAE7DlB,SAAS,EAAAA,SAAA;MACTQ,OAAO,EAAAA,OAAA;MACPW,YAAY,EAAE;IAAU,GACrBP,oBAAoB,EAE9B;IACD,IAAI,OAAOvB,OAAO,KAAK,UAAU,EAAE;MAC/BA,OAAO,CAACyB,CAAC,CAAC;;IAEdA,CAAC,CAACM,eAAe,EAAE;EACvB,CAAC;EAED,OACIvD,KAAA,CAAAwD,aAAA,CAACC,YAAY,EAAAJ,QAAA;IACT7B,OAAO,EAAEwB,WAAW;IACpB5B,KAAK,EAAEA,KAAK;IACZsC,QAAQ,EAAE3B;EAAS,GACf4B,iBAAiB,CAAChC,IAAI,CAAC,GAE1BL,IAAI,CACM;AAEvB,CAAC;AAED,IAAMC,WAAW,GAAGvB,KAAA,CAAAwD,aAAA,CAACrD,YAAY,OAAG;AAEpC,IAAMwD,iBAAiB,GAAG,SAAAA,CAACxC,EAGqC;EAF5D,IAAAC,KAAK,GAAAD,EAAA,CAAAC,KAAA;IACFO,IAAI,GAAAC,MAAA,CAAAT,EAAA,EAFgB,SAG1B,CADU;EAC0D,OAAAQ,IAAI;CAAA;AAezE,IAAMiC,MAAM,GAAG,wBAAwB;AAEvC,IAAMH,YAAY,GAAGvD,MAAM,CAACQ,MAAM,EAAE;EAChCmD,IAAI,EAAED,MAAM;EACZE,iBAAiB,EAAE,SAAAA,CAAClD,KAAK,EAAEmD,MAAM;IAAK,OAAAA,MAAM,CAACC,IAAI;EAAX;CACzC,CAAC,CAAC,UAAC7C,EAAS;MAAP8C,KAAK,GAAA9C,EAAA,CAAA8C,KAAA;EAAO,OAAC;IACfC,KAAK,EAAED,KAAK,CAACE,OAAO,CAACC,OAAO,CAACC,IAAI;IACjC,SAAS,EAAE;MACPC,eAAe,EAAErE,KAAK,CAACgE,KAAK,CAACE,OAAO,CAACC,OAAO,CAACC,IAAI,EAAE,IAAI,CAAC;MACxD;MACA,sBAAsB,EAAE;QACpBC,eAAe,EAAE;;;GAG5B;AATiB,CAShB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}