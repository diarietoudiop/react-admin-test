{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (g && (g = 0, op[0] && (_ = 0)), _) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nimport { useMutation } from '@tanstack/react-query';\nimport useAuthProvider from './useAuthProvider';\n/**\n * A hook that returns a function you can call to determine whether user has access to the given resource\n *\n * @example\n *     import { Datagrid, List, TextField, useCanAccessCallback } from 'react-admin';\n *\n *     const UserList = () => {\n *         const checkAccess = useCanAccessCallback();\n *\n *         const handleRowClick = (id: Identifier, resource: string, record: Record) => {\n *             try {\n *                 const canAccess = checkAccess({ resource: 'users', action: 'edit', record });\n *                 return canAccess ? \"edit\" : \"show\";\n *             } catch (error) {\n *                 console.error(error);\n *             }\n *         };\n *\n *         return (\n *             <List>\n *                 <Datagrid onClick={handleRowClick}>\n *                     <TextField source=\"id\" />\n *                     <TextField source=\"name\" />\n *                     <TextField source=\"email\" />\n *                 </Datagrid>\n *             </List>\n *         );\n *     };\n */\nexport var useCanAccessCallback = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var authProvider = useAuthProvider();\n  var mutateAsync = useMutation(__assign({\n    mutationFn: function (params) {\n      return __awaiter(void 0, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n          if (!authProvider || !authProvider.canAccess) {\n            return [2 /*return*/, true];\n          }\n          return [2 /*return*/, authProvider.canAccess(params)];\n        });\n      });\n    },\n    retry: false\n  }, options)).mutateAsync;\n  return mutateAsync;\n};","map":{"version":3,"names":["useMutation","useAuthProvider","useCanAccessCallback","options","authProvider","mutateAsync","__assign","mutationFn","params","__awaiter","canAccess","retry"],"sources":["/home/diarietou/Bureau/afterSA/test/testfront/react-admin-test/node_modules/ra-core/src/auth/useCanAccessCallback.ts"],"sourcesContent":["import {\n    UseMutateAsyncFunction,\n    useMutation,\n    UseMutationOptions,\n} from '@tanstack/react-query';\nimport useAuthProvider from './useAuthProvider';\nimport { HintedString } from '../types';\n\n/**\n * A hook that returns a function you can call to determine whether user has access to the given resource\n *\n * @example\n *     import { Datagrid, List, TextField, useCanAccessCallback } from 'react-admin';\n *\n *     const UserList = () => {\n *         const checkAccess = useCanAccessCallback();\n *\n *         const handleRowClick = (id: Identifier, resource: string, record: Record) => {\n *             try {\n *                 const canAccess = checkAccess({ resource: 'users', action: 'edit', record });\n *                 return canAccess ? \"edit\" : \"show\";\n *             } catch (error) {\n *                 console.error(error);\n *             }\n *         };\n *\n *         return (\n *             <List>\n *                 <Datagrid onClick={handleRowClick}>\n *                     <TextField source=\"id\" />\n *                     <TextField source=\"name\" />\n *                     <TextField source=\"email\" />\n *                 </Datagrid>\n *             </List>\n *         );\n *     };\n */\nexport const useCanAccessCallback = <\n    RecordType extends Record<string, any> = Record<string, any>,\n    ErrorType = Error,\n>(\n    options: Omit<\n        UseMutationOptions<\n            UseCanAccessCallbackResult,\n            ErrorType,\n            UseCanAccessCallbackOptions<RecordType>\n        >,\n        'mutationFn'\n    > = {}\n) => {\n    const authProvider = useAuthProvider();\n\n    const { mutateAsync } = useMutation<\n        UseCanAccessCallbackResult,\n        ErrorType,\n        UseCanAccessCallbackOptions\n    >({\n        mutationFn: async (\n            params: UseCanAccessCallbackOptions\n        ): Promise<UseCanAccessCallbackResult> => {\n            if (!authProvider || !authProvider.canAccess) {\n                return true;\n            }\n            return authProvider.canAccess(params);\n        },\n        retry: false,\n        ...options,\n    });\n\n    return mutateAsync;\n};\n\nexport type UseCanAccessCallback<\n    RecordType extends Record<string, any> = Record<string, any>,\n    ErrorType = Error,\n> = UseMutateAsyncFunction<\n    UseCanAccessCallbackResult,\n    ErrorType,\n    UseCanAccessCallbackOptions<RecordType>,\n    unknown\n>;\n\nexport type UseCanAccessCallbackOptions<\n    RecordType extends Record<string, any> = Record<string, any>,\n> = {\n    resource: string;\n    action: HintedString<'list' | 'create' | 'edit' | 'show' | 'delete'>;\n    record?: RecordType;\n};\n\nexport type UseCanAccessCallbackResult = boolean;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAEIA,WAAW,QAER,uBAAuB;AAC9B,OAAOC,eAAe,MAAM,mBAAmB;AAG/C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA,OAAO,IAAMC,oBAAoB,GAAG,SAAAA,CAIhCC,OAOM;EAPN,IAAAA,OAAA;IAAAA,OAAA,KAOM;EAAA;EAEN,IAAMC,YAAY,GAAGH,eAAe,EAAE;EAE9B,IAAAI,WAAW,GAAKL,WAAW,CAAAM,QAAA;IAK/BC,UAAU,EAAE,SAAAA,CACRC,MAAmC;MAAA,OAAAC,SAAA;;UAEnC,IAAI,CAACL,YAAY,IAAI,CAACA,YAAY,CAACM,SAAS,EAAE;YAC1C,sBAAO,IAAI;;UAEf,sBAAON,YAAY,CAACM,SAAS,CAACF,MAAM,CAAC;;;KACxC;IACDG,KAAK,EAAE;EAAK,GACTR,OAAO,EACZ,CAAAE,WAfiB;EAiBnB,OAAOA,WAAW;AACtB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}