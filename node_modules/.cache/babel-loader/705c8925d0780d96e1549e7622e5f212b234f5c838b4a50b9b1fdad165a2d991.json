{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { useParams } from 'react-router-dom';\nimport { useAuthenticated, useRequireAccess } from '../../auth';\nimport { useGetOne, useRefresh } from '../../dataProvider';\nimport { useTranslate } from '../../i18n';\nimport { useRedirect } from '../../routing';\nimport { useNotify } from '../../notification';\nimport { useResourceContext, useGetResourceLabel, useGetRecordRepresentation } from '../../core';\n/**\n * Prepare data for the Show view.\n *\n * useShowController does a few things:\n * - it grabs the id from the URL and the resource name from the ResourceContext,\n * - it fetches the record via useGetOne,\n * - it prepares the page title.\n *\n * @param {Object} props The props passed to the Show component.\n *\n * @return {Object} controllerProps Fetched data and callbacks for the Show view\n *\n * @example\n *\n * import { useShowController } from 'react-admin';\n * import ShowView from './ShowView';\n *\n * const MyShow = () => {\n *     const controllerProps = useShowController();\n *     return <ShowView {...controllerProps} />;\n * };\n *\n * @example // useShowController can also take its parameters from props\n *\n * import { useShowController } from 'react-admin';\n * import ShowView from './ShowView';\n *\n * const MyShow = () => {\n *     const controllerProps = useShowController({ resource: 'posts', id: 1234 });\n *     return <ShowView {...controllerProps} />;\n * };\n */\nexport var useShowController = function (props) {\n  if (props === void 0) {\n    props = {};\n  }\n  var _a = props.disableAuthentication,\n    disableAuthentication = _a === void 0 ? false : _a,\n    propsId = props.id,\n    _b = props.queryOptions,\n    queryOptions = _b === void 0 ? {} : _b;\n  var resource = useResourceContext(props);\n  if (!resource) {\n    throw new Error(\"useShowController requires a non-empty resource prop or context\");\n  }\n  var isPendingAuthenticated = useAuthenticated({\n    enabled: !disableAuthentication\n  }).isPending;\n  var isPendingCanAccess = useRequireAccess({\n    action: 'show',\n    resource: resource,\n    // If disableAuthentication is true then isPendingAuthenticated will always be true so this hook is disabled\n    enabled: !isPendingAuthenticated\n  }).isPending;\n  var getRecordRepresentation = useGetRecordRepresentation(resource);\n  var translate = useTranslate();\n  var notify = useNotify();\n  var redirect = useRedirect();\n  var refresh = useRefresh();\n  var routeId = useParams().id;\n  if (!routeId && !propsId) {\n    throw new Error('useShowController requires an id prop or a route with an /:id? parameter.');\n  }\n  var id = propsId != null ? propsId : routeId;\n  var meta = queryOptions.meta,\n    otherQueryOptions = __rest(queryOptions, [\"meta\"]);\n  var _c = useGetOne(resource, {\n      id: id,\n      meta: meta\n    }, __assign({\n      enabled: !isPendingAuthenticated && !isPendingCanAccess || disableAuthentication,\n      onError: function () {\n        notify('ra.notification.item_doesnt_exist', {\n          type: 'error'\n        });\n        redirect('list', resource);\n        refresh();\n      },\n      retry: false\n    }, otherQueryOptions)),\n    record = _c.data,\n    error = _c.error,\n    isLoading = _c.isLoading,\n    isFetching = _c.isFetching,\n    isPending = _c.isPending,\n    refetch = _c.refetch;\n  // eslint-disable-next-line eqeqeq\n  if (record && record.id && record.id != id) {\n    throw new Error(\"useShowController: Fetched record's id attribute (\".concat(record.id, \") must match the requested 'id' (\").concat(id, \")\"));\n  }\n  var getResourceLabel = useGetResourceLabel();\n  var recordRepresentation = getRecordRepresentation(record);\n  var defaultTitle = translate('ra.page.show', {\n    name: getResourceLabel(resource, 1),\n    id: id,\n    record: record,\n    recordRepresentation: typeof recordRepresentation === 'string' ? recordRepresentation : ''\n  });\n  return {\n    defaultTitle: defaultTitle,\n    error: error,\n    isLoading: isLoading,\n    isFetching: isFetching,\n    isPending: isPending,\n    record: record,\n    refetch: refetch,\n    resource: resource\n  };\n};","map":{"version":3,"names":["useParams","useAuthenticated","useRequireAccess","useGetOne","useRefresh","useTranslate","useRedirect","useNotify","useResourceContext","useGetResourceLabel","useGetRecordRepresentation","useShowController","props","_a","disableAuthentication","propsId","id","_b","queryOptions","resource","Error","isPendingAuthenticated","enabled","isPending","isPendingCanAccess","action","getRecordRepresentation","translate","notify","redirect","refresh","routeId","meta","otherQueryOptions","__rest","_c","__assign","onError","type","retry","record","data","error","isLoading","isFetching","refetch","concat","getResourceLabel","recordRepresentation","defaultTitle","name"],"sources":["/home/diarietou/Bureau/afterSA/test/testfront/react-admin-test/node_modules/ra-core/src/controller/show/useShowController.ts"],"sourcesContent":["import { useParams } from 'react-router-dom';\n\nimport { useAuthenticated, useRequireAccess } from '../../auth';\nimport { RaRecord } from '../../types';\nimport {\n    useGetOne,\n    useRefresh,\n    UseGetOneHookValue,\n    UseGetOneOptions,\n} from '../../dataProvider';\nimport { useTranslate } from '../../i18n';\nimport { useRedirect } from '../../routing';\nimport { useNotify } from '../../notification';\nimport {\n    useResourceContext,\n    useGetResourceLabel,\n    useGetRecordRepresentation,\n} from '../../core';\n\n/**\n * Prepare data for the Show view.\n *\n * useShowController does a few things:\n * - it grabs the id from the URL and the resource name from the ResourceContext,\n * - it fetches the record via useGetOne,\n * - it prepares the page title.\n *\n * @param {Object} props The props passed to the Show component.\n *\n * @return {Object} controllerProps Fetched data and callbacks for the Show view\n *\n * @example\n *\n * import { useShowController } from 'react-admin';\n * import ShowView from './ShowView';\n *\n * const MyShow = () => {\n *     const controllerProps = useShowController();\n *     return <ShowView {...controllerProps} />;\n * };\n *\n * @example // useShowController can also take its parameters from props\n *\n * import { useShowController } from 'react-admin';\n * import ShowView from './ShowView';\n *\n * const MyShow = () => {\n *     const controllerProps = useShowController({ resource: 'posts', id: 1234 });\n *     return <ShowView {...controllerProps} />;\n * };\n */\nexport const useShowController = <\n    RecordType extends RaRecord = any,\n    ErrorType = Error,\n>(\n    props: ShowControllerProps<RecordType, ErrorType> = {}\n): ShowControllerResult<RecordType, ErrorType> => {\n    const {\n        disableAuthentication = false,\n        id: propsId,\n        queryOptions = {},\n    } = props;\n    const resource = useResourceContext(props);\n    if (!resource) {\n        throw new Error(\n            `useShowController requires a non-empty resource prop or context`\n        );\n    }\n\n    const { isPending: isPendingAuthenticated } = useAuthenticated({\n        enabled: !disableAuthentication,\n    });\n\n    const { isPending: isPendingCanAccess } = useRequireAccess<RecordType>({\n        action: 'show',\n        resource,\n        // If disableAuthentication is true then isPendingAuthenticated will always be true so this hook is disabled\n        enabled: !isPendingAuthenticated,\n    });\n\n    const getRecordRepresentation = useGetRecordRepresentation(resource);\n    const translate = useTranslate();\n    const notify = useNotify();\n    const redirect = useRedirect();\n    const refresh = useRefresh();\n    const { id: routeId } = useParams<'id'>();\n    if (!routeId && !propsId) {\n        throw new Error(\n            'useShowController requires an id prop or a route with an /:id? parameter.'\n        );\n    }\n    const id = propsId != null ? propsId : routeId;\n    const { meta, ...otherQueryOptions } = queryOptions;\n\n    const {\n        data: record,\n        error,\n        isLoading,\n        isFetching,\n        isPending,\n        refetch,\n    } = useGetOne<RecordType, ErrorType>(\n        resource,\n        { id, meta },\n        {\n            enabled:\n                (!isPendingAuthenticated && !isPendingCanAccess) ||\n                disableAuthentication,\n            onError: () => {\n                notify('ra.notification.item_doesnt_exist', {\n                    type: 'error',\n                });\n                redirect('list', resource);\n                refresh();\n            },\n            retry: false,\n            ...otherQueryOptions,\n        }\n    );\n\n    // eslint-disable-next-line eqeqeq\n    if (record && record.id && record.id != id) {\n        throw new Error(\n            `useShowController: Fetched record's id attribute (${record.id}) must match the requested 'id' (${id})`\n        );\n    }\n\n    const getResourceLabel = useGetResourceLabel();\n    const recordRepresentation = getRecordRepresentation(record);\n    const defaultTitle = translate('ra.page.show', {\n        name: getResourceLabel(resource, 1),\n        id,\n        record,\n        recordRepresentation:\n            typeof recordRepresentation === 'string'\n                ? recordRepresentation\n                : '',\n    });\n\n    return {\n        defaultTitle,\n        error,\n        isLoading,\n        isFetching,\n        isPending,\n        record,\n        refetch,\n        resource,\n    } as ShowControllerResult<RecordType, ErrorType>;\n};\n\nexport interface ShowControllerProps<\n    RecordType extends RaRecord = any,\n    ErrorType = Error,\n> {\n    disableAuthentication?: boolean;\n    id?: RecordType['id'];\n    queryOptions?: UseGetOneOptions<RecordType, ErrorType>;\n    resource?: string;\n}\n\nexport interface ShowControllerBaseResult<RecordType extends RaRecord = any> {\n    defaultTitle?: string;\n    isFetching: boolean;\n    isLoading: boolean;\n    resource: string;\n    record?: RecordType;\n    refetch: UseGetOneHookValue<RecordType>['refetch'];\n}\n\nexport interface ShowControllerLoadingResult<RecordType extends RaRecord = any>\n    extends ShowControllerBaseResult<RecordType> {\n    record: undefined;\n    error: null;\n    isPending: true;\n}\nexport interface ShowControllerLoadingErrorResult<\n    RecordType extends RaRecord = any,\n    TError = Error,\n> extends ShowControllerBaseResult<RecordType> {\n    record: undefined;\n    error: TError;\n    isPending: false;\n}\nexport interface ShowControllerRefetchErrorResult<\n    RecordType extends RaRecord = any,\n    TError = Error,\n> extends ShowControllerBaseResult<RecordType> {\n    record: RecordType;\n    error: TError;\n    isPending: false;\n}\nexport interface ShowControllerSuccessResult<RecordType extends RaRecord = any>\n    extends ShowControllerBaseResult<RecordType> {\n    record: RecordType;\n    error: null;\n    isPending: false;\n}\n\nexport type ShowControllerResult<\n    RecordType extends RaRecord = any,\n    ErrorType = Error,\n> =\n    | ShowControllerLoadingResult<RecordType>\n    | ShowControllerLoadingErrorResult<RecordType, ErrorType>\n    | ShowControllerRefetchErrorResult<RecordType, ErrorType>\n    | ShowControllerSuccessResult<RecordType>;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}