{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { isValidElement, useEffect, useMemo } from 'react';\nimport { useAuthenticated, useRequireAccess } from '../../auth';\nimport { useTranslate } from '../../i18n';\nimport { useNotify } from '../../notification';\nimport { useInfiniteGetList } from '../../dataProvider';\nimport { defaultExporter } from '../../export';\nimport { useResourceContext, useGetResourceLabel } from '../../core';\nimport { useRecordSelection } from './useRecordSelection';\nimport { useListParams } from './useListParams';\nimport { useSelectAll } from './useSelectAll';\n/**\n * Prepare data for the InfiniteList view\n *\n * @param {Object} props The props passed to the InfiniteList component.\n *\n * @return {Object} controllerProps Fetched and computed data for the List view\n *\n * @example\n *\n * import { useInfiniteListController } from 'react-admin';\n * import ListView from './ListView';\n *\n * const MyList = props => {\n *     const controllerProps = useInfiniteListController(props);\n *     return <ListView {...controllerProps} {...props} />;\n * }\n */\nexport var useInfiniteListController = function (props) {\n  if (props === void 0) {\n    props = {};\n  }\n  var _a = props.debounce,\n    debounce = _a === void 0 ? 500 : _a,\n    _b = props.disableAuthentication,\n    disableAuthentication = _b === void 0 ? false : _b,\n    _c = props.disableSyncWithLocation,\n    disableSyncWithLocation = _c === void 0 ? false : _c,\n    _d = props.exporter,\n    exporter = _d === void 0 ? defaultExporter : _d,\n    filter = props.filter,\n    filterDefaultValues = props.filterDefaultValues,\n    _e = props.perPage,\n    perPage = _e === void 0 ? 10 : _e,\n    queryOptions = props.queryOptions,\n    sort = props.sort,\n    storeKey = props.storeKey;\n  var resource = useResourceContext(props);\n  var _f = queryOptions !== null && queryOptions !== void 0 ? queryOptions : {},\n    meta = _f.meta,\n    otherQueryOptions = __rest(_f, [\"meta\"]);\n  if (!resource) {\n    throw new Error(\"<InfiniteList> was called outside of a ResourceContext and without a resource prop. You must set the resource prop.\");\n  }\n  if (filter && isValidElement(filter)) {\n    throw new Error('<InfiniteList> received a React element as `filter` props. If you intended to set the list filter elements, use the `filters` (with an s) prop instead. The `filter` prop is internal and should not be set by the developer.');\n  }\n  var isPendingAuthenticated = useAuthenticated({\n    enabled: !disableAuthentication\n  }).isPending;\n  var isPendingCanAccess = useRequireAccess({\n    action: 'list',\n    resource: resource,\n    // If disableAuthentication is true then isPendingAuthenticated will always be true so this hook is disabled\n    enabled: !isPendingAuthenticated\n  }).isPending;\n  var translate = useTranslate();\n  var notify = useNotify();\n  var _g = useListParams({\n      debounce: debounce,\n      disableSyncWithLocation: disableSyncWithLocation,\n      filterDefaultValues: filterDefaultValues,\n      perPage: perPage,\n      resource: resource,\n      sort: sort,\n      storeKey: storeKey\n    }),\n    query = _g[0],\n    queryModifiers = _g[1];\n  var _h = useRecordSelection({\n      resource: resource\n    }),\n    selectedIds = _h[0],\n    selectionModifiers = _h[1];\n  var _j = useInfiniteGetList(resource, {\n      pagination: {\n        page: query.page,\n        perPage: query.perPage\n      },\n      sort: {\n        field: query.sort,\n        order: query.order\n      },\n      filter: __assign(__assign({}, query.filter), filter),\n      meta: meta\n    }, __assign({\n      enabled: !isPendingAuthenticated && !isPendingCanAccess || disableAuthentication,\n      placeholderData: function (previousData) {\n        return previousData;\n      },\n      retry: false,\n      onError: function (error) {\n        return notify((error === null || error === void 0 ? void 0 : error.message) || 'ra.notification.http_error', {\n          type: 'error',\n          messageArgs: {\n            _: error === null || error === void 0 ? void 0 : error.message\n          }\n        });\n      }\n    }, otherQueryOptions)),\n    data = _j.data,\n    total = _j.total,\n    error = _j.error,\n    isLoading = _j.isLoading,\n    isPending = _j.isPending,\n    isFetching = _j.isFetching,\n    hasNextPage = _j.hasNextPage,\n    hasPreviousPage = _j.hasPreviousPage,\n    fetchNextPage = _j.fetchNextPage,\n    isFetchingNextPage = _j.isFetchingNextPage,\n    fetchPreviousPage = _j.fetchPreviousPage,\n    isFetchingPreviousPage = _j.isFetchingPreviousPage,\n    refetch = _j.refetch;\n  var onSelectAll = useSelectAll({\n    resource: resource,\n    sort: {\n      field: query.sort,\n      order: query.order\n    },\n    filter: __assign(__assign({}, query.filter), filter)\n  });\n  // change page if there is no data\n  useEffect(function () {\n    if (query.page <= 0 || !isFetching && query.page > 1 && (data == null || (data === null || data === void 0 ? void 0 : data.pages.length) === 0)) {\n      // Query for a page that doesn't exist, set page to 1\n      queryModifiers.setPage(1);\n      return;\n    }\n    if (total == null) {\n      return;\n    }\n    var totalPages = Math.ceil(total / query.perPage) || 1;\n    if (!isFetching && query.page > totalPages) {\n      // Query for a page out of bounds, set page to the last existing page\n      // It occurs when deleting the last element of the last page\n      queryModifiers.setPage(totalPages);\n    }\n  }, [isFetching, query.page, query.perPage, data, queryModifiers, total]);\n  var currentSort = useMemo(function () {\n    return {\n      field: query.sort,\n      order: query.order\n    };\n  }, [query.sort, query.order]);\n  var getResourceLabel = useGetResourceLabel();\n  var defaultTitle = translate('ra.page.list', {\n    name: getResourceLabel(resource, 2)\n  });\n  var unwrappedData = useMemo(function () {\n    var _a;\n    return (_a = data === null || data === void 0 ? void 0 : data.pages) === null || _a === void 0 ? void 0 : _a.reduce(function (acc, page) {\n      return __spreadArray(__spreadArray([], acc, true), page.data, true);\n    }, []);\n  }, [data]);\n  return {\n    sort: currentSort,\n    data: unwrappedData,\n    defaultTitle: defaultTitle,\n    displayedFilters: query.displayedFilters,\n    error: error,\n    exporter: exporter,\n    filter: filter,\n    filterValues: query.filterValues,\n    hideFilter: queryModifiers.hideFilter,\n    isFetching: isFetching,\n    isLoading: isLoading,\n    isPending: isPending,\n    onSelect: selectionModifiers.select,\n    onSelectAll: onSelectAll,\n    onToggleItem: selectionModifiers.toggle,\n    onUnselectItems: selectionModifiers.clearSelection,\n    page: query.page,\n    perPage: query.perPage,\n    refetch: refetch,\n    resource: resource,\n    selectedIds: selectedIds,\n    setFilters: queryModifiers.setFilters,\n    setPage: queryModifiers.setPage,\n    setPerPage: queryModifiers.setPerPage,\n    setSort: queryModifiers.setSort,\n    showFilter: queryModifiers.showFilter,\n    total: total,\n    hasNextPage: hasNextPage,\n    hasPreviousPage: hasPreviousPage,\n    fetchNextPage: fetchNextPage,\n    isFetchingNextPage: isFetchingNextPage,\n    fetchPreviousPage: fetchPreviousPage,\n    isFetchingPreviousPage: isFetchingPreviousPage\n  };\n};","map":{"version":3,"names":["isValidElement","useEffect","useMemo","useAuthenticated","useRequireAccess","useTranslate","useNotify","useInfiniteGetList","defaultExporter","useResourceContext","useGetResourceLabel","useRecordSelection","useListParams","useSelectAll","useInfiniteListController","props","_a","debounce","_b","disableAuthentication","_c","disableSyncWithLocation","_d","exporter","filter","filterDefaultValues","_e","perPage","queryOptions","sort","storeKey","resource","_f","meta","otherQueryOptions","__rest","Error","isPendingAuthenticated","enabled","isPending","isPendingCanAccess","action","translate","notify","_g","query","queryModifiers","_h","selectedIds","selectionModifiers","_j","pagination","page","field","order","__assign","placeholderData","previousData","retry","onError","error","message","type","messageArgs","_","data","total","isLoading","isFetching","hasNextPage","hasPreviousPage","fetchNextPage","isFetchingNextPage","fetchPreviousPage","isFetchingPreviousPage","refetch","onSelectAll","pages","length","setPage","totalPages","Math","ceil","currentSort","getResourceLabel","defaultTitle","name","unwrappedData","reduce","acc","__spreadArray","displayedFilters","filterValues","hideFilter","onSelect","select","onToggleItem","toggle","onUnselectItems","clearSelection","setFilters","setPerPage","setSort","showFilter"],"sources":["/home/diarietou/Bureau/afterSA/test/testfront/react-admin-test/node_modules/ra-core/src/controller/list/useInfiniteListController.ts"],"sourcesContent":["import { isValidElement, useEffect, useMemo } from 'react';\nimport type {\n    InfiniteQueryObserverBaseResult,\n    InfiniteData,\n} from '@tanstack/react-query';\n\nimport { useAuthenticated, useRequireAccess } from '../../auth';\nimport { useTranslate } from '../../i18n';\nimport { useNotify } from '../../notification';\nimport { useInfiniteGetList } from '../../dataProvider';\nimport { defaultExporter } from '../../export';\nimport { useResourceContext, useGetResourceLabel } from '../../core';\nimport { useRecordSelection } from './useRecordSelection';\nimport { useListParams } from './useListParams';\nimport { useSelectAll } from './useSelectAll';\nimport type { UseInfiniteGetListOptions } from '../../dataProvider';\nimport type { ListControllerResult } from './useListController';\nimport type {\n    RaRecord,\n    SortPayload,\n    FilterPayload,\n    Exporter,\n    GetInfiniteListResult,\n} from '../../types';\n\n/**\n * Prepare data for the InfiniteList view\n *\n * @param {Object} props The props passed to the InfiniteList component.\n *\n * @return {Object} controllerProps Fetched and computed data for the List view\n *\n * @example\n *\n * import { useInfiniteListController } from 'react-admin';\n * import ListView from './ListView';\n *\n * const MyList = props => {\n *     const controllerProps = useInfiniteListController(props);\n *     return <ListView {...controllerProps} {...props} />;\n * }\n */\nexport const useInfiniteListController = <\n    RecordType extends RaRecord = any,\n    ErrorType = Error,\n>(\n    props: InfiniteListControllerProps<RecordType, ErrorType> = {}\n): InfiniteListControllerResult<RecordType, ErrorType> => {\n    const {\n        debounce = 500,\n        disableAuthentication = false,\n        disableSyncWithLocation = false,\n        exporter = defaultExporter,\n        filter,\n        filterDefaultValues,\n        perPage = 10,\n        queryOptions,\n        sort,\n        storeKey,\n    } = props;\n    const resource = useResourceContext(props);\n    const { meta, ...otherQueryOptions } = queryOptions ?? {};\n\n    if (!resource) {\n        throw new Error(\n            `<InfiniteList> was called outside of a ResourceContext and without a resource prop. You must set the resource prop.`\n        );\n    }\n    if (filter && isValidElement(filter)) {\n        throw new Error(\n            '<InfiniteList> received a React element as `filter` props. If you intended to set the list filter elements, use the `filters` (with an s) prop instead. The `filter` prop is internal and should not be set by the developer.'\n        );\n    }\n\n    const { isPending: isPendingAuthenticated } = useAuthenticated({\n        enabled: !disableAuthentication,\n    });\n\n    const { isPending: isPendingCanAccess } = useRequireAccess<RecordType>({\n        action: 'list',\n        resource,\n        // If disableAuthentication is true then isPendingAuthenticated will always be true so this hook is disabled\n        enabled: !isPendingAuthenticated,\n    });\n\n    const translate = useTranslate();\n    const notify = useNotify();\n\n    const [query, queryModifiers] = useListParams({\n        debounce,\n        disableSyncWithLocation,\n        filterDefaultValues,\n        perPage,\n        resource,\n        sort,\n        storeKey,\n    });\n\n    const [selectedIds, selectionModifiers] = useRecordSelection({ resource });\n\n    const {\n        data,\n        total,\n        error,\n        isLoading,\n        isPending,\n        isFetching,\n        hasNextPage,\n        hasPreviousPage,\n        fetchNextPage,\n        isFetchingNextPage,\n        fetchPreviousPage,\n        isFetchingPreviousPage,\n        refetch,\n    } = useInfiniteGetList<RecordType, ErrorType>(\n        resource,\n        {\n            pagination: {\n                page: query.page,\n                perPage: query.perPage,\n            },\n            sort: { field: query.sort, order: query.order },\n            filter: { ...query.filter, ...filter },\n            meta,\n        },\n        {\n            enabled:\n                (!isPendingAuthenticated && !isPendingCanAccess) ||\n                disableAuthentication,\n            placeholderData: previousData => previousData,\n            retry: false,\n            onError: error =>\n                notify(\n                    (error as Error)?.message || 'ra.notification.http_error',\n                    {\n                        type: 'error',\n                        messageArgs: {\n                            _: (error as Error)?.message,\n                        },\n                    }\n                ),\n            ...otherQueryOptions,\n        }\n    );\n\n    const onSelectAll = useSelectAll({\n        resource,\n        sort: { field: query.sort, order: query.order },\n        filter: { ...query.filter, ...filter },\n    });\n\n    // change page if there is no data\n    useEffect(() => {\n        if (\n            query.page <= 0 ||\n            (!isFetching &&\n                query.page > 1 &&\n                (data == null || data?.pages.length === 0))\n        ) {\n            // Query for a page that doesn't exist, set page to 1\n            queryModifiers.setPage(1);\n            return;\n        }\n        if (total == null) {\n            return;\n        }\n        const totalPages = Math.ceil(total / query.perPage) || 1;\n        if (!isFetching && query.page > totalPages) {\n            // Query for a page out of bounds, set page to the last existing page\n            // It occurs when deleting the last element of the last page\n            queryModifiers.setPage(totalPages);\n        }\n    }, [isFetching, query.page, query.perPage, data, queryModifiers, total]);\n\n    const currentSort = useMemo(\n        () => ({\n            field: query.sort,\n            order: query.order,\n        }),\n        [query.sort, query.order]\n    );\n\n    const getResourceLabel = useGetResourceLabel();\n    const defaultTitle = translate('ra.page.list', {\n        name: getResourceLabel(resource, 2),\n    });\n\n    const unwrappedData = useMemo(\n        () => data?.pages?.reduce((acc, page) => [...acc, ...page.data], []),\n        [data]\n    );\n\n    return {\n        sort: currentSort,\n        data: unwrappedData,\n        defaultTitle,\n        displayedFilters: query.displayedFilters,\n        error,\n        exporter,\n        filter,\n        filterValues: query.filterValues,\n        hideFilter: queryModifiers.hideFilter,\n        isFetching,\n        isLoading,\n        isPending,\n        onSelect: selectionModifiers.select,\n        onSelectAll,\n        onToggleItem: selectionModifiers.toggle,\n        onUnselectItems: selectionModifiers.clearSelection,\n        page: query.page,\n        perPage: query.perPage,\n        refetch,\n        resource,\n        selectedIds,\n        setFilters: queryModifiers.setFilters,\n        setPage: queryModifiers.setPage,\n        setPerPage: queryModifiers.setPerPage,\n        setSort: queryModifiers.setSort,\n        showFilter: queryModifiers.showFilter,\n        total: total,\n        hasNextPage,\n        hasPreviousPage,\n        fetchNextPage,\n        isFetchingNextPage,\n        fetchPreviousPage,\n        isFetchingPreviousPage,\n    } as InfiniteListControllerResult<RecordType, ErrorType>;\n};\n\nexport interface InfiniteListControllerProps<\n    RecordType extends RaRecord = any,\n    ErrorType = Error,\n> {\n    debounce?: number;\n    disableAuthentication?: boolean;\n    /**\n     * Whether to disable the synchronization of the list parameters with the current location (URL search parameters)\n     */\n    disableSyncWithLocation?: boolean;\n    exporter?: Exporter | false;\n    filter?: FilterPayload;\n    filterDefaultValues?: object;\n    perPage?: number;\n    queryOptions?: UseInfiniteGetListOptions<RecordType, ErrorType>;\n    resource?: string;\n    sort?: SortPayload;\n    storeKey?: string | false;\n}\n\nexport type InfiniteListControllerResult<\n    RecordType extends RaRecord = any,\n    ErrorType = Error,\n> = ListControllerResult<RecordType> & {\n    fetchNextPage: InfiniteQueryObserverBaseResult<\n        InfiniteData<GetInfiniteListResult<RecordType>>,\n        ErrorType\n    >['fetchNextPage'];\n    fetchPreviousPage: InfiniteQueryObserverBaseResult<\n        InfiniteData<GetInfiniteListResult<RecordType>>,\n        ErrorType\n    >['fetchPreviousPage'];\n    isFetchingNextPage: InfiniteQueryObserverBaseResult<\n        InfiniteData<GetInfiniteListResult<RecordType>>,\n        ErrorType\n    >['isFetchingNextPage'];\n    isFetchingPreviousPage: InfiniteQueryObserverBaseResult<\n        InfiniteData<GetInfiniteListResult<RecordType>>,\n        ErrorType\n    >['isFetchingPreviousPage'];\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}