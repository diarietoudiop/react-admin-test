{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (g && (g = 0, op[0] && (_ = 0)), _) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { useMemo } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport useAuthProvider from './useAuthProvider';\nimport { useRecordContext } from '../controller';\n/**\n * Checks whether users can access the provided resources.\n *\n * `useCanAccessResources` returns an object describing the state of the request:\n *\n * - start: { isPending: true }\n * - success: { canAccess: Object<string, boolean>, isPending: false }\n * - error: { error: [error from provider], isPending: false }\n *\n * @param {Object} params Any params you want to pass to the authProvider\n * @param {string} params.action The action to check access for\n * @param {string[]} params.resources The list of resources to check access for\n * @param {Object} params.record Optional. The record to check access for\n *\n * @returns Return the react-query result and a canAccess property which is a map of the resources and their access status { [resource: string]: boolean }\n *\n * @example\n * import { useCanAccessResources } from 'react-admin';\n *\n * const UserList = ({ record }) => {\n *     const { isPending, canAccess } = useCanAccessResources({\n *         action: 'read',\n *         resources: ['users.id', 'users.name', 'users.email'],\n *         record\n *     });\n *\n *     if (isPending) {\n *         return null;\n *     }\n *     return (\n *         <SimpleList\n *              primaryText={record => canAccess.users.name ? record.name : ''}\n *              secondaryText={record => canAccess.users.email ? record.email : ''}\n *              tertiaryText={record => canAccess.users.id ? record.id : ''}\n *          />\n *     );\n * };\n */\nexport var useCanAccessResources = function (params) {\n  var authProvider = useAuthProvider();\n  var record = useRecordContext(params);\n  var action = params.action,\n    resources = params.resources,\n    options = __rest(params, [\"action\", \"resources\"]);\n  var queryResult = useQuery(__assign({\n    queryKey: ['auth', 'canAccess', resources, action, record],\n    queryFn: function (_a) {\n      var signal = _a.signal;\n      return __awaiter(void 0, void 0, void 0, function () {\n        var queries, result;\n        return __generator(this, function (_b) {\n          switch (_b.label) {\n            case 0:\n              return [4 /*yield*/, Promise.all(resources.map(function (resource) {\n                return __awaiter(void 0, void 0, void 0, function () {\n                  var canAccess;\n                  return __generator(this, function (_a) {\n                    switch (_a.label) {\n                      case 0:\n                        if (!authProvider || !authProvider.canAccess) {\n                          return [2 /*return*/, {\n                            canAccess: true,\n                            resource: resource\n                          }];\n                        }\n                        return [4 /*yield*/, authProvider.canAccess({\n                          resource: resource,\n                          action: action,\n                          record: record,\n                          signal: authProvider.supportAbortSignal ? signal : undefined\n                        })];\n                      case 1:\n                        canAccess = _a.sent();\n                        return [2 /*return*/, {\n                          canAccess: canAccess,\n                          resource: resource\n                        }];\n                    }\n                  });\n                });\n              }))];\n            case 1:\n              queries = _b.sent();\n              result = queries.reduce(function (acc, _a) {\n                var resource = _a.resource,\n                  canAccess = _a.canAccess;\n                acc[resource] = canAccess;\n                return acc;\n              }, {});\n              return [2 /*return*/, result];\n          }\n        });\n      });\n    }\n  }, options));\n  var result = useMemo(function () {\n    return __assign({\n      canAccess: queryResult.data\n    }, queryResult);\n  }, [queryResult]);\n  var resultWithoutAuthProvider = useMemo(function () {\n    return {\n      canAccess: resources.reduce(function (acc, resource) {\n        acc[resource] = true;\n        return acc;\n      }, {}),\n      isPending: false,\n      isError: false,\n      error: null\n    };\n  }, [resources]);\n  return !authProvider || !authProvider.canAccess ? resultWithoutAuthProvider : result;\n};","map":{"version":3,"names":["useMemo","useQuery","useAuthProvider","useRecordContext","useCanAccessResources","params","authProvider","record","action","resources","options","__rest","queryResult","__assign","queryKey","queryFn","_a","signal","Promise","all","map","resource","__awaiter","canAccess","supportAbortSignal","undefined","sent","queries","_b","result","reduce","acc","data","resultWithoutAuthProvider","isPending","isError","error"],"sources":["/home/diarietou/Bureau/afterSA/test/testfront/react-admin-test/node_modules/ra-core/src/auth/useCanAccessResources.ts"],"sourcesContent":["import { useMemo } from 'react';\nimport { useQuery, UseQueryOptions } from '@tanstack/react-query';\nimport useAuthProvider from './useAuthProvider';\nimport { HintedString } from '../types';\nimport { useRecordContext } from '../controller';\n\n/**\n * Checks whether users can access the provided resources.\n *\n * `useCanAccessResources` returns an object describing the state of the request:\n *\n * - start: { isPending: true }\n * - success: { canAccess: Object<string, boolean>, isPending: false }\n * - error: { error: [error from provider], isPending: false }\n *\n * @param {Object} params Any params you want to pass to the authProvider\n * @param {string} params.action The action to check access for\n * @param {string[]} params.resources The list of resources to check access for\n * @param {Object} params.record Optional. The record to check access for\n *\n * @returns Return the react-query result and a canAccess property which is a map of the resources and their access status { [resource: string]: boolean }\n *\n * @example\n * import { useCanAccessResources } from 'react-admin';\n *\n * const UserList = ({ record }) => {\n *     const { isPending, canAccess } = useCanAccessResources({\n *         action: 'read',\n *         resources: ['users.id', 'users.name', 'users.email'],\n *         record\n *     });\n *\n *     if (isPending) {\n *         return null;\n *     }\n *     return (\n *         <SimpleList\n *              primaryText={record => canAccess.users.name ? record.name : ''}\n *              secondaryText={record => canAccess.users.email ? record.email : ''}\n *              tertiaryText={record => canAccess.users.id ? record.id : ''}\n *          />\n *     );\n * };\n */\nexport const useCanAccessResources = <\n    RecordType extends Record<string, any> = Record<string, any>,\n    ErrorType extends Error = Error,\n>(\n    params: UseCanAccessResourcesOptions<RecordType>\n): UseCanAccessResourcesResult<ErrorType> => {\n    const authProvider = useAuthProvider();\n    const record = useRecordContext<RecordType>(params);\n\n    const { action, resources, ...options } = params;\n\n    const queryResult = useQuery({\n        queryKey: ['auth', 'canAccess', resources, action, record],\n        queryFn: async ({ signal }) => {\n            const queries = await Promise.all(\n                resources.map(async resource => {\n                    if (!authProvider || !authProvider.canAccess) {\n                        return { canAccess: true, resource };\n                    }\n                    const canAccess = await authProvider.canAccess({\n                        resource,\n                        action,\n                        record,\n                        signal: authProvider.supportAbortSignal\n                            ? signal\n                            : undefined,\n                    });\n\n                    return { canAccess, resource };\n                })\n            );\n\n            const result = queries.reduce(\n                (acc, { resource, canAccess }) => {\n                    acc[resource] = canAccess;\n                    return acc;\n                },\n                {} as Record<string, boolean>\n            );\n\n            return result;\n        },\n        ...options,\n    });\n\n    const result = useMemo(() => {\n        return {\n            canAccess: queryResult.data,\n            ...queryResult,\n        } as UseCanAccessResourcesResult<ErrorType>;\n    }, [queryResult]);\n\n    const resultWithoutAuthProvider = useMemo(() => {\n        return {\n            canAccess: resources.reduce(\n                (acc, resource) => {\n                    acc[resource] = true;\n                    return acc;\n                },\n                {} as Record<string, boolean>\n            ),\n            isPending: false,\n            isError: false,\n            error: null,\n        } as UseCanAccessResourcesResult<ErrorType>;\n    }, [resources]);\n\n    return !authProvider || !authProvider.canAccess\n        ? resultWithoutAuthProvider\n        : result;\n};\n\nexport interface UseCanAccessResourcesOptions<\n    RecordType extends Record<string, any> = Record<string, any>,\n    ErrorType extends Error = Error,\n> extends Omit<\n        UseQueryOptions<Record<string, boolean>, ErrorType>,\n        'queryKey' | 'queryFn'\n    > {\n    resources: string[];\n    action: HintedString<'list' | 'create' | 'edit' | 'show' | 'delete'>;\n    record?: RecordType;\n}\n\nexport type UseCanAccessResourcesResult<ErrorType = Error> =\n    | UseCanAccessResourcesLoadingResult\n    | UseCanAccessResourcesLoadingErrorResult<ErrorType>\n    | UseCanAccessResourcesRefetchErrorResult<ErrorType>\n    | UseCanAccessResourcesSuccessResult;\n\nexport interface UseCanAccessResourcesLoadingResult {\n    canAccess: undefined;\n    error: null;\n    isPending: true;\n}\nexport interface UseCanAccessResourcesLoadingErrorResult<ErrorType = Error> {\n    canAccess: undefined;\n    error: ErrorType;\n    isPending: false;\n}\nexport interface UseCanAccessResourcesRefetchErrorResult<ErrorType = Error> {\n    canAccess: Record<string, boolean>;\n    error: ErrorType;\n    isPending: false;\n}\nexport interface UseCanAccessResourcesSuccessResult {\n    canAccess: Record<string, boolean>;\n    error: null;\n    isPending: false;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}