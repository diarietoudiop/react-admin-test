{"ast":null,"code":"import * as React from 'react';\nimport { useAuthenticated } from './useAuthenticated';\n/**\n * Restrict access to children to authenticated users.\n * Redirects anonymous users to the login page.\n *\n * Use it to decorate your custom page components to require\n * authentication.\n *\n * @see useAuthState\n *\n * @example\n * import { Admin, CustomRoutes, Authenticated } from 'react-admin';\n *\n * const customRoutes = [\n *     <Route\n *         path=\"/foo\"\n *         element={\n *             <Authenticated authParams={{ foo: 'bar' }}>\n *                 <Foo />\n *             </Authenticated>\n *         }\n *     />\n * ];\n * const App = () => (\n *     <Admin>\n *         <CustomRoutes>{customRoutes}</CustomRoutes>\n *     </Admin>\n * );\n */\nexport var Authenticated = function (props) {\n  var authParams = props.authParams,\n    _a = props.loading,\n    loading = _a === void 0 ? null : _a,\n    children = props.children;\n  // this hook will redirect to login if the user is not authenticated\n  var _b = useAuthenticated({\n      params: authParams\n    }),\n    isPending = _b.isPending,\n    isError = _b.isError;\n  if (isPending || isError) {\n    return loading;\n  }\n  return React.createElement(React.Fragment, null, children);\n};","map":{"version":3,"names":["React","useAuthenticated","Authenticated","props","authParams","_a","loading","children","_b","params","isPending","isError","createElement","Fragment"],"sources":["/home/diarietou/Bureau/afterSA/test/testfront/react-admin-test/node_modules/ra-core/src/auth/Authenticated.tsx"],"sourcesContent":["import * as React from 'react';\nimport { ReactNode } from 'react';\n\nimport { useAuthenticated } from './useAuthenticated';\n\n/**\n * Restrict access to children to authenticated users.\n * Redirects anonymous users to the login page.\n *\n * Use it to decorate your custom page components to require\n * authentication.\n *\n * @see useAuthState\n *\n * @example\n * import { Admin, CustomRoutes, Authenticated } from 'react-admin';\n *\n * const customRoutes = [\n *     <Route\n *         path=\"/foo\"\n *         element={\n *             <Authenticated authParams={{ foo: 'bar' }}>\n *                 <Foo />\n *             </Authenticated>\n *         }\n *     />\n * ];\n * const App = () => (\n *     <Admin>\n *         <CustomRoutes>{customRoutes}</CustomRoutes>\n *     </Admin>\n * );\n */\nexport const Authenticated = (props: AuthenticatedProps) => {\n    const { authParams, loading = null, children } = props;\n\n    // this hook will redirect to login if the user is not authenticated\n    const { isPending, isError } = useAuthenticated({ params: authParams });\n\n    if (isPending || isError) {\n        return loading;\n    }\n\n    return <>{children}</>;\n};\n\nexport interface AuthenticatedProps {\n    children: ReactNode;\n    authParams?: object;\n    loading?: ReactNode;\n    /**\n     * @deprecated Authenticated now never renders children when not authenticated.\n     */\n    requireAuth?: boolean;\n}\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAG9B,SAASC,gBAAgB,QAAQ,oBAAoB;AAErD;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA,OAAO,IAAMC,aAAa,GAAG,SAAAA,CAACC,KAAyB;EAC3C,IAAAC,UAAU,GAA+BD,KAAK,CAAAC,UAApC;IAAEC,EAAA,GAA6BF,KAAK,CAAAG,OAApB;IAAdA,OAAO,GAAAD,EAAA,cAAG,IAAI,GAAAA,EAAA;IAAEE,QAAQ,GAAKJ,KAAK,CAAAI,QAAV;EAE5C;EACM,IAAAC,EAAA,GAAyBP,gBAAgB,CAAC;MAAEQ,MAAM,EAAEL;IAAU,CAAE,CAAC;IAA/DM,SAAS,GAAAF,EAAA,CAAAE,SAAA;IAAEC,OAAO,GAAAH,EAAA,CAAAG,OAA6C;EAEvE,IAAID,SAAS,IAAIC,OAAO,EAAE;IACtB,OAAOL,OAAO;;EAGlB,OAAON,KAAA,CAAAY,aAAA,CAAAZ,KAAA,CAAAa,QAAA,QAAGN,QAAQ,CAAI;AAC1B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}