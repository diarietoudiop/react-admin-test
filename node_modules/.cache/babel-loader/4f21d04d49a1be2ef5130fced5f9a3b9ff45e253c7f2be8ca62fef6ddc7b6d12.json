{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (g && (g = 0, op[0] && (_ = 0)), _) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { useCallback, useEffect, useRef, useState } from 'react';\nimport { useQueryClient } from '@tanstack/react-query';\nimport get from 'lodash/get';\nimport isEqual from 'lodash/isEqual';\nimport lodashDebounce from 'lodash/debounce';\nimport { removeEmpty, useEvent } from '../../util';\nimport { useDataProvider, useGetManyReference } from '../../dataProvider';\nimport { useNotify } from '../../notification';\nimport usePaginationState from '../usePaginationState';\nimport { useRecordSelection } from '../list/useRecordSelection';\nimport useSortState from '../useSortState';\nimport { useResourceContext } from '../../core';\n/**\n * Fetch reference records, and return them when available\n *\n * Uses dataProvider.getManyReference() internally.\n *\n * @example // fetch the comments related to the current post\n * const { isPending, data } = useReferenceManyFieldController({\n *     reference: 'comments',\n *     target: 'post_id',\n *     record: { id: 123, title: 'hello, world' },\n *     resource: 'posts',\n * });\n *\n * @param {Object} props\n * @param {string} props.reference The linked resource name. Required.\n * @param {string} props.target The target resource key. Required.\n * @param {Object} props.filter The filter applied on the recorded records list\n * @param {number} props.page the page number\n * @param {number} props.perPage the number of item per page\n * @param {Object} props.record The current resource record\n * @param {string} props.resource The current resource name\n * @param {Object} props.sort the sort to apply to the referenced records\n * @param {string} props.source The key of the linked resource identifier\n * @param {UseQuery Options} props.queryOptions `react-query` options`\n *\n * @returns {ListControllerResult} The reference many props\n */\nexport var useReferenceManyFieldController = function (props) {\n  var _a;\n  var _b = props.debounce,\n    debounce = _b === void 0 ? 500 : _b,\n    reference = props.reference,\n    record = props.record,\n    target = props.target,\n    _c = props.filter,\n    filter = _c === void 0 ? defaultFilter : _c,\n    _d = props.source,\n    source = _d === void 0 ? 'id' : _d,\n    initialPage = props.page,\n    initialPerPage = props.perPage,\n    _e = props.sort,\n    initialSort = _e === void 0 ? {\n      field: 'id',\n      order: 'DESC'\n    } : _e,\n    _f = props.queryOptions,\n    queryOptions = _f === void 0 ? {} : _f;\n  var notify = useNotify();\n  var resource = useResourceContext(props);\n  var dataProvider = useDataProvider();\n  var queryClient = useQueryClient();\n  var storeKey = (_a = props.storeKey) !== null && _a !== void 0 ? _a : \"\".concat(resource, \".\").concat(record === null || record === void 0 ? void 0 : record.id, \".\").concat(reference);\n  var meta = queryOptions.meta,\n    otherQueryOptions = __rest(queryOptions, [\"meta\"]);\n  // pagination logic\n  var _g = usePaginationState({\n      page: initialPage,\n      perPage: initialPerPage\n    }),\n    page = _g.page,\n    setPage = _g.setPage,\n    perPage = _g.perPage,\n    setPerPage = _g.setPerPage;\n  // sort logic\n  var _h = useSortState(initialSort),\n    sort = _h.sort,\n    setSortState = _h.setSort;\n  var setSort = useCallback(function (sort) {\n    setSortState(sort);\n    setPage(1);\n  }, [setPage, setSortState]);\n  // selection logic\n  var _j = useRecordSelection({\n      resource: storeKey\n    }),\n    selectedIds = _j[0],\n    selectionModifiers = _j[1];\n  // filter logic\n  var filterRef = useRef(filter);\n  var _k = useState({}),\n    displayedFilters = _k[0],\n    setDisplayedFilters = _k[1];\n  var _l = useState(filter),\n    filterValues = _l[0],\n    setFilterValues = _l[1];\n  var hideFilter = useCallback(function (filterName) {\n    setDisplayedFilters(function (previousState) {\n      var _a = previousState,\n        _b = filterName,\n        _ = _a[_b],\n        newState = __rest(_a, [typeof _b === \"symbol\" ? _b : _b + \"\"]);\n      return newState;\n    });\n    setFilterValues(function (previousState) {\n      var _a = previousState,\n        _b = filterName,\n        _ = _a[_b],\n        newState = __rest(_a, [typeof _b === \"symbol\" ? _b : _b + \"\"]);\n      return newState;\n    });\n  }, [setDisplayedFilters, setFilterValues]);\n  var showFilter = useCallback(function (filterName, defaultValue) {\n    setDisplayedFilters(function (previousState) {\n      var _a;\n      return __assign(__assign({}, previousState), (_a = {}, _a[filterName] = true, _a));\n    });\n    setFilterValues(function (previousState) {\n      var _a;\n      return __assign(__assign({}, previousState), (_a = {}, _a[filterName] = defaultValue, _a));\n    });\n  }, [setDisplayedFilters, setFilterValues]);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  var debouncedSetFilters = useCallback(lodashDebounce(function (filters, displayedFilters) {\n    setFilterValues(removeEmpty(filters));\n    setDisplayedFilters(displayedFilters);\n    setPage(1);\n  }, debounce), [setDisplayedFilters, setFilterValues, setPage]);\n  var setFilters = useCallback(function (filters, displayedFilters, debounce) {\n    if (debounce === void 0) {\n      debounce = false;\n    }\n    if (debounce) {\n      debouncedSetFilters(filters, displayedFilters);\n    } else {\n      setFilterValues(removeEmpty(filters));\n      setDisplayedFilters(displayedFilters);\n      setPage(1);\n    }\n  }, [setDisplayedFilters, setFilterValues, setPage, debouncedSetFilters]);\n  // handle filter prop change\n  useEffect(function () {\n    if (!isEqual(filter, filterRef.current)) {\n      filterRef.current = filter;\n      setFilterValues(filter);\n    }\n  }, [filter]);\n  var _m = useGetManyReference(reference, {\n      target: target,\n      id: get(record, source),\n      pagination: {\n        page: page,\n        perPage: perPage\n      },\n      sort: sort,\n      filter: filterValues,\n      meta: meta\n    }, __assign({\n      enabled: get(record, source) != null,\n      placeholderData: function (previousData) {\n        return previousData;\n      },\n      onError: function (error) {\n        return notify(typeof error === 'string' ? error : (error === null || error === void 0 ? void 0 : error.message) || 'ra.notification.http_error', {\n          type: 'error',\n          messageArgs: {\n            _: typeof error === 'string' ? error : (error === null || error === void 0 ? void 0 : error.message) ? error.message : undefined\n          }\n        });\n      }\n    }, otherQueryOptions)),\n    data = _m.data,\n    total = _m.total,\n    responseMeta = _m.meta,\n    pageInfo = _m.pageInfo,\n    error = _m.error,\n    isFetching = _m.isFetching,\n    isLoading = _m.isLoading,\n    isPending = _m.isPending,\n    refetch = _m.refetch;\n  var onSelectAll = useEvent(function (_a) {\n    var _b = _a === void 0 ? {} : _a,\n      _c = _b.limit,\n      limit = _c === void 0 ? 250 : _c,\n      _d = _b.queryOptions,\n      queryOptions = _d === void 0 ? {} : _d;\n    return __awaiter(void 0, void 0, void 0, function () {\n      var meta, onSuccess, onError, results, allIds, error_1;\n      var _e;\n      return __generator(this, function (_f) {\n        switch (_f.label) {\n          case 0:\n            meta = queryOptions.meta, onSuccess = queryOptions.onSuccess, onError = queryOptions.onError;\n            _f.label = 1;\n          case 1:\n            _f.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, queryClient.fetchQuery({\n              queryKey: [resource, 'getManyReference', {\n                target: target,\n                id: get(record, source),\n                pagination: {\n                  page: 1,\n                  perPage: limit\n                },\n                sort: sort,\n                filter: filter,\n                meta: meta\n              }],\n              queryFn: function () {\n                return dataProvider.getManyReference(reference, {\n                  target: target,\n                  id: get(record, source),\n                  pagination: {\n                    page: 1,\n                    perPage: limit\n                  },\n                  sort: sort,\n                  filter: filter,\n                  meta: meta\n                });\n              }\n            })];\n          case 2:\n            results = _f.sent();\n            allIds = ((_e = results.data) === null || _e === void 0 ? void 0 : _e.map(function (_a) {\n              var id = _a.id;\n              return id;\n            })) || [];\n            selectionModifiers.select(allIds);\n            if (allIds.length === limit) {\n              notify('ra.message.select_all_limit_reached', {\n                messageArgs: {\n                  max: limit\n                },\n                type: 'warning'\n              });\n            }\n            if (onSuccess) {\n              onSuccess(results);\n            }\n            return [2 /*return*/, results.data];\n          case 3:\n            error_1 = _f.sent();\n            if (onError) {\n              onError(error_1);\n            }\n            notify('ra.notification.http_error', {\n              type: 'warning'\n            });\n            return [3 /*break*/, 4];\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  });\n  return {\n    sort: sort,\n    data: data,\n    meta: responseMeta,\n    defaultTitle: undefined,\n    displayedFilters: displayedFilters,\n    error: error,\n    filterValues: filterValues,\n    hideFilter: hideFilter,\n    isFetching: isFetching,\n    isLoading: isLoading,\n    isPending: isPending,\n    onSelect: selectionModifiers.select,\n    onSelectAll: onSelectAll,\n    onToggleItem: selectionModifiers.toggle,\n    onUnselectItems: selectionModifiers.clearSelection,\n    page: page,\n    perPage: perPage,\n    refetch: refetch,\n    resource: reference,\n    selectedIds: selectedIds,\n    setFilters: setFilters,\n    setPage: setPage,\n    setPerPage: setPerPage,\n    hasNextPage: pageInfo ? pageInfo.hasNextPage : total != null ? page * perPage < total : undefined,\n    hasPreviousPage: pageInfo ? pageInfo.hasPreviousPage : page > 1,\n    setSort: setSort,\n    showFilter: showFilter,\n    total: total\n  };\n};\nvar defaultFilter = {};","map":{"version":3,"names":["useCallback","useEffect","useRef","useState","useQueryClient","get","isEqual","lodashDebounce","removeEmpty","useEvent","useDataProvider","useGetManyReference","useNotify","usePaginationState","useRecordSelection","useSortState","useResourceContext","useReferenceManyFieldController","props","_b","debounce","reference","record","target","_c","filter","defaultFilter","_d","source","initialPage","page","initialPerPage","perPage","_e","sort","initialSort","field","order","_f","queryOptions","notify","resource","dataProvider","queryClient","storeKey","_a","concat","id","meta","otherQueryOptions","__rest","_g","setPage","setPerPage","_h","setSortState","setSort","_j","selectedIds","selectionModifiers","filterRef","_k","displayedFilters","setDisplayedFilters","_l","filterValues","setFilterValues","hideFilter","filterName","previousState","_","newState","showFilter","defaultValue","__assign","debouncedSetFilters","filters","setFilters","current","_m","pagination","enabled","placeholderData","previousData","onError","error","message","type","messageArgs","undefined","data","total","responseMeta","pageInfo","isFetching","isLoading","isPending","refetch","onSelectAll","limit","onSuccess","fetchQuery","queryKey","queryFn","getManyReference","results","sent","allIds","map","select","length","max","error_1","defaultTitle","onSelect","onToggleItem","toggle","onUnselectItems","clearSelection","hasNextPage","hasPreviousPage"],"sources":["/home/diarietou/Bureau/afterSA/test/testfront/react-admin-test/node_modules/ra-core/src/controller/field/useReferenceManyFieldController.ts"],"sourcesContent":["import { useCallback, useEffect, useRef, useState } from 'react';\nimport { useQueryClient, UseQueryOptions } from '@tanstack/react-query';\nimport get from 'lodash/get';\nimport isEqual from 'lodash/isEqual';\nimport lodashDebounce from 'lodash/debounce';\n\nimport { removeEmpty, useEvent } from '../../util';\nimport { useDataProvider, useGetManyReference } from '../../dataProvider';\nimport { useNotify } from '../../notification';\nimport { FilterPayload, Identifier, RaRecord, SortPayload } from '../../types';\nimport type { ListControllerResult, HandleSelectAllParams } from '../list';\nimport usePaginationState from '../usePaginationState';\nimport { useRecordSelection } from '../list/useRecordSelection';\nimport useSortState from '../useSortState';\nimport { useResourceContext } from '../../core';\n\n/**\n * Fetch reference records, and return them when available\n *\n * Uses dataProvider.getManyReference() internally.\n *\n * @example // fetch the comments related to the current post\n * const { isPending, data } = useReferenceManyFieldController({\n *     reference: 'comments',\n *     target: 'post_id',\n *     record: { id: 123, title: 'hello, world' },\n *     resource: 'posts',\n * });\n *\n * @param {Object} props\n * @param {string} props.reference The linked resource name. Required.\n * @param {string} props.target The target resource key. Required.\n * @param {Object} props.filter The filter applied on the recorded records list\n * @param {number} props.page the page number\n * @param {number} props.perPage the number of item per page\n * @param {Object} props.record The current resource record\n * @param {string} props.resource The current resource name\n * @param {Object} props.sort the sort to apply to the referenced records\n * @param {string} props.source The key of the linked resource identifier\n * @param {UseQuery Options} props.queryOptions `react-query` options`\n *\n * @returns {ListControllerResult} The reference many props\n */\nexport const useReferenceManyFieldController = <\n    RecordType extends RaRecord = RaRecord,\n    ReferenceRecordType extends RaRecord = RaRecord,\n    ErrorType = Error,\n>(\n    props: UseReferenceManyFieldControllerParams<\n        RecordType,\n        ReferenceRecordType,\n        ErrorType\n    >\n): ListControllerResult<ReferenceRecordType, ErrorType> => {\n    const {\n        debounce = 500,\n        reference,\n        record,\n        target,\n        filter = defaultFilter,\n        source = 'id',\n        page: initialPage,\n        perPage: initialPerPage,\n        sort: initialSort = { field: 'id', order: 'DESC' },\n        queryOptions = {} as UseQueryOptions<\n            { data: ReferenceRecordType[]; total: number },\n            ErrorType\n        >,\n    } = props;\n    const notify = useNotify();\n    const resource = useResourceContext(props);\n    const dataProvider = useDataProvider();\n    const queryClient = useQueryClient();\n    const storeKey = props.storeKey ?? `${resource}.${record?.id}.${reference}`;\n    const { meta, ...otherQueryOptions } = queryOptions;\n\n    // pagination logic\n    const { page, setPage, perPage, setPerPage } = usePaginationState({\n        page: initialPage,\n        perPage: initialPerPage,\n    });\n\n    // sort logic\n    const { sort, setSort: setSortState } = useSortState(initialSort);\n    const setSort = useCallback(\n        (sort: SortPayload) => {\n            setSortState(sort);\n            setPage(1);\n        },\n        [setPage, setSortState]\n    );\n\n    // selection logic\n    const [selectedIds, selectionModifiers] = useRecordSelection({\n        resource: storeKey,\n    });\n\n    // filter logic\n    const filterRef = useRef(filter);\n    const [displayedFilters, setDisplayedFilters] = useState<{\n        [key: string]: boolean;\n    }>({});\n    const [filterValues, setFilterValues] = useState<{\n        [key: string]: any;\n    }>(filter);\n    const hideFilter = useCallback(\n        (filterName: string) => {\n            setDisplayedFilters(previousState => {\n                const { [filterName]: _, ...newState } = previousState;\n                return newState;\n            });\n            setFilterValues(previousState => {\n                const { [filterName]: _, ...newState } = previousState;\n                return newState;\n            });\n        },\n        [setDisplayedFilters, setFilterValues]\n    );\n    const showFilter = useCallback(\n        (filterName: string, defaultValue: any) => {\n            setDisplayedFilters(previousState => ({\n                ...previousState,\n                [filterName]: true,\n            }));\n            setFilterValues(previousState => ({\n                ...previousState,\n                [filterName]: defaultValue,\n            }));\n        },\n        [setDisplayedFilters, setFilterValues]\n    );\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    const debouncedSetFilters = useCallback(\n        lodashDebounce((filters, displayedFilters) => {\n            setFilterValues(removeEmpty(filters));\n            setDisplayedFilters(displayedFilters);\n            setPage(1);\n        }, debounce),\n        [setDisplayedFilters, setFilterValues, setPage]\n    );\n\n    const setFilters = useCallback(\n        (filters, displayedFilters, debounce = false) => {\n            if (debounce) {\n                debouncedSetFilters(filters, displayedFilters);\n            } else {\n                setFilterValues(removeEmpty(filters));\n                setDisplayedFilters(displayedFilters);\n                setPage(1);\n            }\n        },\n        [setDisplayedFilters, setFilterValues, setPage, debouncedSetFilters]\n    );\n    // handle filter prop change\n    useEffect(() => {\n        if (!isEqual(filter, filterRef.current)) {\n            filterRef.current = filter;\n            setFilterValues(filter);\n        }\n    }, [filter]);\n\n    const {\n        data,\n        total,\n        meta: responseMeta,\n        pageInfo,\n        error,\n        isFetching,\n        isLoading,\n        isPending,\n        refetch,\n    } = useGetManyReference<ReferenceRecordType, ErrorType>(\n        reference,\n        {\n            target,\n            id: get(record, source) as Identifier,\n            pagination: { page, perPage },\n            sort,\n            filter: filterValues,\n            meta,\n        },\n        {\n            enabled: get(record, source) != null,\n            placeholderData: previousData => previousData,\n            onError: error =>\n                notify(\n                    typeof error === 'string'\n                        ? error\n                        : (error as Error)?.message ||\n                              'ra.notification.http_error',\n                    {\n                        type: 'error',\n                        messageArgs: {\n                            _:\n                                typeof error === 'string'\n                                    ? error\n                                    : (error as Error)?.message\n                                      ? (error as Error).message\n                                      : undefined,\n                        },\n                    }\n                ),\n            ...otherQueryOptions,\n        }\n    );\n\n    const onSelectAll = useEvent(\n        async ({\n            limit = 250,\n            queryOptions = {},\n        }: HandleSelectAllParams = {}) => {\n            const { meta, onSuccess, onError } = queryOptions;\n            try {\n                const results = await queryClient.fetchQuery({\n                    queryKey: [\n                        resource,\n                        'getManyReference',\n                        {\n                            target,\n                            id: get(record, source) as Identifier,\n                            pagination: { page: 1, perPage: limit },\n                            sort,\n                            filter,\n                            meta,\n                        },\n                    ],\n                    queryFn: () =>\n                        dataProvider.getManyReference(reference, {\n                            target,\n                            id: get(record, source) as Identifier,\n                            pagination: { page: 1, perPage: limit },\n                            sort,\n                            filter,\n                            meta,\n                        }),\n                });\n\n                const allIds = results.data?.map(({ id }) => id) || [];\n                selectionModifiers.select(allIds);\n                if (allIds.length === limit) {\n                    notify('ra.message.select_all_limit_reached', {\n                        messageArgs: { max: limit },\n                        type: 'warning',\n                    });\n                }\n\n                if (onSuccess) {\n                    onSuccess(results);\n                }\n\n                return results.data;\n            } catch (error) {\n                if (onError) {\n                    onError(error);\n                }\n                notify('ra.notification.http_error', { type: 'warning' });\n            }\n        }\n    );\n\n    return {\n        sort,\n        data,\n        meta: responseMeta,\n        defaultTitle: undefined,\n        displayedFilters,\n        error,\n        filterValues,\n        hideFilter,\n        isFetching,\n        isLoading,\n        isPending,\n        onSelect: selectionModifiers.select,\n        onSelectAll,\n        onToggleItem: selectionModifiers.toggle,\n        onUnselectItems: selectionModifiers.clearSelection,\n        page,\n        perPage,\n        refetch,\n        resource: reference,\n        selectedIds,\n        setFilters,\n        setPage,\n        setPerPage,\n        hasNextPage: pageInfo\n            ? pageInfo.hasNextPage\n            : total != null\n              ? page * perPage < total\n              : undefined,\n        hasPreviousPage: pageInfo ? pageInfo.hasPreviousPage : page > 1,\n        setSort,\n        showFilter,\n        total,\n    } as ListControllerResult<ReferenceRecordType, ErrorType>;\n};\n\nexport interface UseReferenceManyFieldControllerParams<\n    RecordType extends Record<string, any> = Record<string, any>,\n    ReferenceRecordType extends Record<string, any> = Record<string, any>,\n    ErrorType = Error,\n> {\n    debounce?: number;\n    filter?: FilterPayload;\n    page?: number;\n    perPage?: number;\n    record?: RecordType;\n    reference: string;\n    resource?: string;\n    sort?: SortPayload;\n    source?: string;\n    storeKey?: string;\n    target: string;\n    queryOptions?: Omit<\n        UseQueryOptions<\n            { data: ReferenceRecordType[]; total: number },\n            ErrorType\n        >,\n        'queryKey' | 'queryFn'\n    >;\n}\n\nconst defaultFilter = {};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}