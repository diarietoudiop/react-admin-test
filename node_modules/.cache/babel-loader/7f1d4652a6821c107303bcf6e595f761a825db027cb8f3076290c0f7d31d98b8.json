{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (g && (g = 0, op[0] && (_ = 0)), _) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { useMemo, useRef } from 'react';\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useDataProvider } from './useDataProvider';\nimport { useAddUndoableMutation } from './undo/useAddUndoableMutation';\nimport { useEvent } from '../util';\n/**\n * Get a callback to call the dataProvider.updateMany() method, the result and the loading state.\n *\n * @param {string} resource\n * @param {Params} params The updateMany parameters { ids, data, meta }\n * @param {Object} options Options object to pass to the queryClient.\n * May include side effects to be executed upon success or failure, e.g. { onSuccess: () => { refresh(); } }\n * May include a mutation mode (optimistic/pessimistic/undoable), e.g. { mutationMode: 'undoable' }\n *\n * @typedef Params\n * @prop params.ids The resource identifiers, e.g. [123, 456]\n * @prop params.data The updates to merge into the record, e.g. { views: 10 }\n * @prop params.meta Optional meta parameters\n *\n * @returns The current mutation state. Destructure as [updateMany, { data, error, isPending }].\n *\n * The return value updates according to the request state:\n *\n * - initial: [updateMany, { isPending: false, isIdle: true }]\n * - start:   [updateMany, { isPending: true }]\n * - success: [updateMany, { data: [data from response], isPending: false, isSuccess: true }]\n * - error:   [updateMany, { error: [error from response], isPending: false, isError: true }]\n *\n * The updateMany() function must be called with a resource and a parameter object: updateMany(resource, { ids, data, previousData }, options)\n *\n * This hook uses react-query useMutation under the hood.\n * This means the state object contains mutate, isIdle, reset and other react-query methods.\n *\n * @see https://tanstack.com/query/v5/docs/react/reference/useMutation\n *\n * @example // set params when calling the updateMany callback\n *\n * import { useUpdateMany, useListContext } from 'react-admin';\n *\n * const BulkResetViewsButton = () => {\n *     const { selectedIds } = useListContext();\n *     const [updateMany, { isPending, error }] = useUpdateMany();\n *     const handleClick = () => {\n *         updateMany('posts', { ids: selectedIds, data: { views: 0 } });\n *     }\n *     if (error) { return <p>ERROR</p>; }\n *     return <button disabled={isPending} onClick={handleClick}>Reset views</button>;\n * };\n *\n * @example // set params when calling the hook\n *\n * import { useUpdateMany, useListContext } from 'react-admin';\n *\n * const BulkResetViewsButton = () => {\n *     const { selectedIds } = useListContext();\n *     const [updateMany, { isPending, error }] = useUpdateMany('posts', { ids: selectedIds, data: { views: 0 } });\n *     if (error) { return <p>ERROR</p>; }\n *     return <button disabled={isPending} onClick={() => updateMany()}>Reset views</button>;\n * };\n */\nexport var useUpdateMany = function (resource, params, options) {\n  if (params === void 0) {\n    params = {};\n  }\n  if (options === void 0) {\n    options = {};\n  }\n  var dataProvider = useDataProvider();\n  var queryClient = useQueryClient();\n  var addUndoableMutation = useAddUndoableMutation();\n  var ids = params.ids,\n    data = params.data,\n    meta = params.meta;\n  var _a = options.mutationMode,\n    mutationMode = _a === void 0 ? 'pessimistic' : _a,\n    mutationOptions = __rest(options, [\"mutationMode\"]);\n  var mode = useRef(mutationMode);\n  var paramsRef = useRef(params);\n  var snapshot = useRef([]);\n  var hasCallTimeOnError = useRef(false);\n  var hasCallTimeOnSuccess = useRef(false);\n  var hasCallTimeOnSettled = useRef(false);\n  var updateCache = function (_a) {\n    var resource = _a.resource,\n      ids = _a.ids,\n      data = _a.data,\n      meta = _a.meta;\n    return __awaiter(void 0, void 0, void 0, function () {\n      var updatedAt, clonedData, updateColl;\n      return __generator(this, function (_b) {\n        updatedAt = mode.current === 'undoable' ? Date.now() + 1000 * 5 : Date.now();\n        clonedData = JSON.parse(JSON.stringify(data));\n        updateColl = function (old) {\n          if (!old) return old;\n          var newCollection = __spreadArray([], old, true);\n          ids.forEach(function (id) {\n            // eslint-disable-next-line eqeqeq\n            var index = old.findIndex(function (record) {\n              return record.id == id;\n            });\n            if (index === -1) {\n              return;\n            }\n            newCollection = __spreadArray(__spreadArray(__spreadArray([], newCollection.slice(0, index), true), [__assign(__assign({}, newCollection[index]), clonedData)], false), newCollection.slice(index + 1), true);\n          });\n          return newCollection;\n        };\n        ids.forEach(function (id) {\n          queryClient.setQueryData([resource, 'getOne', {\n            id: String(id),\n            meta: meta\n          }], function (record) {\n            return __assign(__assign({}, record), clonedData);\n          }, {\n            updatedAt: updatedAt\n          });\n        });\n        queryClient.setQueriesData({\n          queryKey: [resource, 'getList']\n        }, function (res) {\n          return res && res.data ? __assign(__assign({}, res), {\n            data: updateColl(res.data)\n          }) : res;\n        }, {\n          updatedAt: updatedAt\n        });\n        queryClient.setQueriesData({\n          queryKey: [resource, 'getInfiniteList']\n        }, function (res) {\n          return res && res.pages ? __assign(__assign({}, res), {\n            pages: res.pages.map(function (page) {\n              return __assign(__assign({}, page), {\n                data: updateColl(page.data)\n              });\n            })\n          }) : res;\n        }, {\n          updatedAt: updatedAt\n        });\n        queryClient.setQueriesData({\n          queryKey: [resource, 'getMany']\n        }, function (coll) {\n          return coll && coll.length > 0 ? updateColl(coll) : coll;\n        }, {\n          updatedAt: updatedAt\n        });\n        queryClient.setQueriesData({\n          queryKey: [resource, 'getManyReference']\n        }, function (res) {\n          return res && res.data ? {\n            data: updateColl(res.data),\n            total: res.total\n          } : res;\n        }, {\n          updatedAt: updatedAt\n        });\n        return [2 /*return*/];\n      });\n    });\n  };\n  var mutation = useMutation(__assign(__assign({\n    mutationFn: function (_a) {\n      var _b = _a === void 0 ? {} : _a,\n        _c = _b.resource,\n        callTimeResource = _c === void 0 ? resource : _c,\n        _d = _b.ids,\n        callTimeIds = _d === void 0 ? paramsRef.current.ids : _d,\n        _e = _b.data,\n        callTimeData = _e === void 0 ? paramsRef.current.data : _e,\n        _f = _b.meta,\n        callTimeMeta = _f === void 0 ? paramsRef.current.meta : _f;\n      if (!callTimeResource) {\n        throw new Error('useUpdateMany mutation requires a non-empty resource');\n      }\n      if (!callTimeIds) {\n        throw new Error('useUpdateMany mutation requires an array of ids');\n      }\n      if (!callTimeData) {\n        throw new Error('useUpdateMany mutation requires a non-empty data object');\n      }\n      return dataProvider.updateMany(callTimeResource, {\n        ids: callTimeIds,\n        data: callTimeData,\n        meta: callTimeMeta\n      }).then(function (_a) {\n        var data = _a.data;\n        return data || [];\n      });\n    }\n  }, mutationOptions), {\n    onMutate: function (variables) {\n      return __awaiter(void 0, void 0, void 0, function () {\n        var userContext;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              if (!mutationOptions.onMutate) return [3 /*break*/, 2];\n              return [4 /*yield*/, mutationOptions.onMutate(variables)];\n            case 1:\n              userContext = _a.sent() || {};\n              return [2 /*return*/, __assign({\n                snapshot: snapshot.current\n              }, userContext)];\n            case 2:\n              // Return a context object with the snapshot value\n              return [2 /*return*/, {\n                snapshot: snapshot.current\n              }];\n          }\n        });\n      });\n    },\n    onError: function (error, variables, context) {\n      if (variables === void 0) {\n        variables = {};\n      }\n      if (mode.current === 'optimistic' || mode.current === 'undoable') {\n        // If the mutation fails, use the context returned from onMutate to rollback\n        context.snapshot.forEach(function (_a) {\n          var key = _a[0],\n            value = _a[1];\n          queryClient.setQueryData(key, value);\n        });\n      }\n      if (mutationOptions.onError && !hasCallTimeOnError.current) {\n        return mutationOptions.onError(error, variables, context);\n      }\n      // call-time error callback is executed by react-query\n    },\n    onSuccess: function (dataFromResponse, variables, context) {\n      if (variables === void 0) {\n        variables = {};\n      }\n      if (mode.current === 'pessimistic') {\n        // update the getOne and getList query cache with the new result\n        var _a = variables.resource,\n          callTimeResource = _a === void 0 ? resource : _a,\n          _b = variables.ids,\n          callTimeIds = _b === void 0 ? ids : _b,\n          _c = variables.data,\n          callTimeData = _c === void 0 ? data : _c,\n          _d = variables.meta,\n          callTimeMeta = _d === void 0 ? meta : _d;\n        if (!callTimeResource) {\n          throw new Error('useUpdateMany mutation requires a non-empty resource');\n        }\n        if (!callTimeIds) {\n          throw new Error('useUpdateMany mutation requires an array of ids');\n        }\n        updateCache({\n          resource: callTimeResource,\n          ids: callTimeIds,\n          data: callTimeData,\n          meta: callTimeMeta\n        });\n        if (mutationOptions.onSuccess && !hasCallTimeOnSuccess.current) {\n          mutationOptions.onSuccess(dataFromResponse, variables, context);\n        }\n      }\n    },\n    onSettled: function (data, error, variables, context) {\n      if (variables === void 0) {\n        variables = {};\n      }\n      if (mode.current === 'optimistic' || mode.current === 'undoable') {\n        // Always refetch after error or success:\n        context.snapshot.forEach(function (_a) {\n          var queryKey = _a[0];\n          queryClient.invalidateQueries({\n            queryKey: queryKey\n          });\n        });\n      }\n      if (mutationOptions.onSettled && !hasCallTimeOnSettled.current) {\n        return mutationOptions.onSettled(data, error, variables, context);\n      }\n    }\n  }));\n  var updateMany = function (callTimeResource, callTimeParams, callTimeOptions) {\n    if (callTimeResource === void 0) {\n      callTimeResource = resource;\n    }\n    if (callTimeParams === void 0) {\n      callTimeParams = {};\n    }\n    if (callTimeOptions === void 0) {\n      callTimeOptions = {};\n    }\n    return __awaiter(void 0, void 0, void 0, function () {\n      var mutationMode, _a, returnPromise, otherCallTimeOptions, _b, callTimeIds, _c, callTimeData, _d, callTimeMeta, queryKeys;\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            if (!callTimeResource) {\n              throw new Error('useUpdateMany mutation requires a non-empty resource');\n            }\n            mutationMode = callTimeOptions.mutationMode, _a = callTimeOptions.returnPromise, returnPromise = _a === void 0 ? mutationOptions.returnPromise : _a, otherCallTimeOptions = __rest(callTimeOptions, [\"mutationMode\", \"returnPromise\"]);\n            hasCallTimeOnError.current = !!otherCallTimeOptions.onError;\n            hasCallTimeOnSuccess.current = !!otherCallTimeOptions.onSuccess;\n            hasCallTimeOnSettled.current = !!otherCallTimeOptions.onSettled;\n            // store the hook time params *at the moment of the call*\n            // because they may change afterwards, which would break the undoable mode\n            // as the previousData would be overwritten by the optimistic update\n            paramsRef.current = params;\n            if (mutationMode) {\n              mode.current = mutationMode;\n            }\n            if (returnPromise && mode.current !== 'pessimistic') {\n              console.warn('The returnPromise parameter can only be used if the mutationMode is set to pessimistic');\n            }\n            if (mode.current === 'pessimistic') {\n              if (returnPromise) {\n                return [2 /*return*/, mutation.mutateAsync(__assign({\n                  resource: callTimeResource\n                }, callTimeParams), otherCallTimeOptions)];\n              }\n              return [2 /*return*/, mutation.mutate(__assign({\n                resource: callTimeResource\n              }, callTimeParams), otherCallTimeOptions)];\n            }\n            _b = callTimeParams.ids, callTimeIds = _b === void 0 ? ids : _b, _c = callTimeParams.data, callTimeData = _c === void 0 ? data : _c, _d = callTimeParams.meta, callTimeMeta = _d === void 0 ? meta : _d;\n            if (!callTimeIds) {\n              throw new Error('useUpdateMany mutation requires an array of ids');\n            }\n            queryKeys = [[callTimeResource, 'getOne'], [callTimeResource, 'getList'], [callTimeResource, 'getInfiniteList'], [callTimeResource, 'getMany'], [callTimeResource, 'getManyReference']];\n            /**\n             * Snapshot the previous values via queryClient.getQueriesData()\n             *\n             * The snapshotData ref will contain an array of tuples [query key, associated data]\n             *\n             * @example\n             * [\n             *   [['posts', 'getOne', { id: '1' }], { id: 1, title: 'Hello' }],\n             *   [['posts', 'getList'], { data: [{ id: 1, title: 'Hello' }], total: 1 }],\n             *   [['posts', 'getMany'], [{ id: 1, title: 'Hello' }]],\n             * ]\n             *\n             * @see https://tanstack.com/query/v5/docs/react/reference/QueryClient#queryclientgetqueriesdata\n             */\n            snapshot.current = queryKeys.reduce(function (prev, queryKey) {\n              return prev.concat(queryClient.getQueriesData({\n                queryKey: queryKey\n              }));\n            }, []);\n            // Cancel any outgoing re-fetches (so they don't overwrite our optimistic update)\n            return [4 /*yield*/, Promise.all(snapshot.current.map(function (_a) {\n              var queryKey = _a[0];\n              return queryClient.cancelQueries({\n                queryKey: queryKey\n              });\n            }))];\n          case 1:\n            // Cancel any outgoing re-fetches (so they don't overwrite our optimistic update)\n            _e.sent();\n            // Optimistically update to the new data\n            return [4 /*yield*/, updateCache({\n              resource: callTimeResource,\n              ids: callTimeIds,\n              data: callTimeData,\n              meta: callTimeMeta\n            })];\n          case 2:\n            // Optimistically update to the new data\n            _e.sent();\n            // run the success callbacks during the next tick\n            setTimeout(function () {\n              if (otherCallTimeOptions.onSuccess) {\n                otherCallTimeOptions.onSuccess(callTimeIds, __assign({\n                  resource: callTimeResource\n                }, callTimeParams), {\n                  snapshot: snapshot.current\n                });\n              } else if (mutationOptions.onSuccess) {\n                mutationOptions.onSuccess(callTimeIds, __assign({\n                  resource: callTimeResource\n                }, callTimeParams), {\n                  snapshot: snapshot.current\n                });\n              }\n            }, 0);\n            if (mode.current === 'optimistic') {\n              // call the mutate method without success side effects\n              return [2 /*return*/, mutation.mutate(__assign({\n                resource: callTimeResource\n              }, callTimeParams), {\n                onSettled: otherCallTimeOptions.onSettled,\n                onError: otherCallTimeOptions.onError\n              })];\n            } else {\n              // Undoable mutation: add the mutation to the undoable queue.\n              // The Notification component will dequeue it when the user confirms or cancels the message.\n              addUndoableMutation(function (_a) {\n                var isUndo = _a.isUndo;\n                if (isUndo) {\n                  // rollback\n                  snapshot.current.forEach(function (_a) {\n                    var key = _a[0],\n                      value = _a[1];\n                    queryClient.setQueryData(key, value);\n                  });\n                } else {\n                  // call the mutate method without success side effects\n                  mutation.mutate(__assign({\n                    resource: callTimeResource\n                  }, callTimeParams), {\n                    onSettled: otherCallTimeOptions.onSettled,\n                    onError: otherCallTimeOptions.onError\n                  });\n                }\n              });\n            }\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  var mutationResult = useMemo(function () {\n    return __assign({\n      isLoading: mutation.isPending\n    }, mutation);\n  }, [mutation]);\n  return [useEvent(updateMany), mutationResult];\n};","map":{"version":3,"names":["useMemo","useRef","useMutation","useQueryClient","useDataProvider","useAddUndoableMutation","useEvent","useUpdateMany","resource","params","options","dataProvider","queryClient","addUndoableMutation","ids","data","meta","_a","mutationMode","mutationOptions","__rest","mode","paramsRef","snapshot","hasCallTimeOnError","hasCallTimeOnSuccess","hasCallTimeOnSettled","updateCache","updatedAt","current","Date","now","clonedData","JSON","parse","stringify","updateColl","old","newCollection","__spreadArray","forEach","id","index","findIndex","record","slice","setQueryData","String","__assign","setQueriesData","queryKey","res","pages","map","page","coll","length","total","mutation","mutationFn","_b","_c","callTimeResource","_d","callTimeIds","_e","callTimeData","_f","callTimeMeta","Error","updateMany","then","onMutate","variables","__awaiter","userContext","sent","onError","error","context","key","value","onSuccess","dataFromResponse","onSettled","invalidateQueries","callTimeParams","callTimeOptions","returnPromise","otherCallTimeOptions","console","warn","mutateAsync","mutate","queryKeys","reduce","prev","concat","getQueriesData","Promise","all","cancelQueries","setTimeout","isUndo","mutationResult","isLoading","isPending"],"sources":["/home/diarietou/Bureau/afterSA/test/testfront/react-admin-test/node_modules/ra-core/src/dataProvider/useUpdateMany.ts"],"sourcesContent":["import { useMemo, useRef } from 'react';\nimport {\n    useMutation,\n    useQueryClient,\n    UseMutationOptions,\n    UseMutationResult,\n    MutateOptions,\n    QueryKey,\n    UseInfiniteQueryResult,\n    InfiniteData,\n} from '@tanstack/react-query';\n\nimport { useDataProvider } from './useDataProvider';\nimport { useAddUndoableMutation } from './undo/useAddUndoableMutation';\nimport {\n    RaRecord,\n    UpdateManyParams,\n    MutationMode,\n    GetListResult as OriginalGetListResult,\n    GetInfiniteListResult,\n} from '../types';\nimport { useEvent } from '../util';\nimport { Identifier } from '..';\n\n/**\n * Get a callback to call the dataProvider.updateMany() method, the result and the loading state.\n *\n * @param {string} resource\n * @param {Params} params The updateMany parameters { ids, data, meta }\n * @param {Object} options Options object to pass to the queryClient.\n * May include side effects to be executed upon success or failure, e.g. { onSuccess: () => { refresh(); } }\n * May include a mutation mode (optimistic/pessimistic/undoable), e.g. { mutationMode: 'undoable' }\n *\n * @typedef Params\n * @prop params.ids The resource identifiers, e.g. [123, 456]\n * @prop params.data The updates to merge into the record, e.g. { views: 10 }\n * @prop params.meta Optional meta parameters\n *\n * @returns The current mutation state. Destructure as [updateMany, { data, error, isPending }].\n *\n * The return value updates according to the request state:\n *\n * - initial: [updateMany, { isPending: false, isIdle: true }]\n * - start:   [updateMany, { isPending: true }]\n * - success: [updateMany, { data: [data from response], isPending: false, isSuccess: true }]\n * - error:   [updateMany, { error: [error from response], isPending: false, isError: true }]\n *\n * The updateMany() function must be called with a resource and a parameter object: updateMany(resource, { ids, data, previousData }, options)\n *\n * This hook uses react-query useMutation under the hood.\n * This means the state object contains mutate, isIdle, reset and other react-query methods.\n *\n * @see https://tanstack.com/query/v5/docs/react/reference/useMutation\n *\n * @example // set params when calling the updateMany callback\n *\n * import { useUpdateMany, useListContext } from 'react-admin';\n *\n * const BulkResetViewsButton = () => {\n *     const { selectedIds } = useListContext();\n *     const [updateMany, { isPending, error }] = useUpdateMany();\n *     const handleClick = () => {\n *         updateMany('posts', { ids: selectedIds, data: { views: 0 } });\n *     }\n *     if (error) { return <p>ERROR</p>; }\n *     return <button disabled={isPending} onClick={handleClick}>Reset views</button>;\n * };\n *\n * @example // set params when calling the hook\n *\n * import { useUpdateMany, useListContext } from 'react-admin';\n *\n * const BulkResetViewsButton = () => {\n *     const { selectedIds } = useListContext();\n *     const [updateMany, { isPending, error }] = useUpdateMany('posts', { ids: selectedIds, data: { views: 0 } });\n *     if (error) { return <p>ERROR</p>; }\n *     return <button disabled={isPending} onClick={() => updateMany()}>Reset views</button>;\n * };\n */\nexport const useUpdateMany = <\n    RecordType extends RaRecord = any,\n    MutationError = unknown,\n>(\n    resource?: string,\n    params: Partial<UpdateManyParams<Partial<RecordType>>> = {},\n    options: UseUpdateManyOptions<RecordType, MutationError> = {}\n): UseUpdateManyResult<RecordType, boolean, MutationError> => {\n    const dataProvider = useDataProvider();\n    const queryClient = useQueryClient();\n    const addUndoableMutation = useAddUndoableMutation();\n    const { ids, data, meta } = params;\n    const { mutationMode = 'pessimistic', ...mutationOptions } = options;\n    const mode = useRef<MutationMode>(mutationMode);\n    const paramsRef =\n        useRef<Partial<UpdateManyParams<Partial<RecordType>>>>(params);\n    const snapshot = useRef<Snapshot>([]);\n    const hasCallTimeOnError = useRef(false);\n    const hasCallTimeOnSuccess = useRef(false);\n    const hasCallTimeOnSettled = useRef(false);\n\n    const updateCache = async ({\n        resource,\n        ids,\n        data,\n        meta,\n    }: {\n        resource: string;\n        ids: Identifier[];\n        data: any;\n        meta?: any;\n    }) => {\n        // hack: only way to tell react-query not to fetch this query for the next 5 seconds\n        // because setQueryData doesn't accept a stale time option\n        const updatedAt =\n            mode.current === 'undoable' ? Date.now() + 1000 * 5 : Date.now();\n        // Stringify and parse the data to remove undefined values.\n        // If we don't do this, an update with { id: undefined } as payload\n        // would remove the id from the record, which no real data provider does.\n        const clonedData = JSON.parse(JSON.stringify(data));\n\n        const updateColl = (old: RecordType[]) => {\n            if (!old) return old;\n            let newCollection = [...old];\n            ids.forEach(id => {\n                // eslint-disable-next-line eqeqeq\n                const index = old.findIndex(record => record.id == id);\n                if (index === -1) {\n                    return;\n                }\n                newCollection = [\n                    ...newCollection.slice(0, index),\n                    { ...newCollection[index], ...clonedData },\n                    ...newCollection.slice(index + 1),\n                ];\n            });\n            return newCollection;\n        };\n\n        type GetListResult = Omit<OriginalGetListResult, 'data'> & {\n            data?: RecordType[];\n        };\n\n        ids.forEach(id => {\n            queryClient.setQueryData(\n                [resource, 'getOne', { id: String(id), meta }],\n                (record: RecordType) => ({ ...record, ...clonedData }),\n                { updatedAt }\n            );\n        });\n        queryClient.setQueriesData(\n            { queryKey: [resource, 'getList'] },\n            (res: GetListResult) =>\n                res && res.data ? { ...res, data: updateColl(res.data) } : res,\n            { updatedAt }\n        );\n        queryClient.setQueriesData(\n            { queryKey: [resource, 'getInfiniteList'] },\n            (\n                res: UseInfiniteQueryResult<\n                    InfiniteData<GetInfiniteListResult>\n                >['data']\n            ) =>\n                res && res.pages\n                    ? {\n                          ...res,\n                          pages: res.pages.map(page => ({\n                              ...page,\n                              data: updateColl(page.data),\n                          })),\n                      }\n                    : res,\n            { updatedAt }\n        );\n        queryClient.setQueriesData(\n            { queryKey: [resource, 'getMany'] },\n            (coll: RecordType[]) =>\n                coll && coll.length > 0 ? updateColl(coll) : coll,\n            { updatedAt }\n        );\n        queryClient.setQueriesData(\n            { queryKey: [resource, 'getManyReference'] },\n            (res: GetListResult) =>\n                res && res.data\n                    ? { data: updateColl(res.data), total: res.total }\n                    : res,\n            { updatedAt }\n        );\n    };\n\n    const mutation = useMutation<\n        Array<RecordType['id']>,\n        MutationError,\n        Partial<UseUpdateManyMutateParams<RecordType>>\n    >({\n        mutationFn: ({\n            resource: callTimeResource = resource,\n            ids: callTimeIds = paramsRef.current.ids,\n            data: callTimeData = paramsRef.current.data,\n            meta: callTimeMeta = paramsRef.current.meta,\n        } = {}) => {\n            if (!callTimeResource) {\n                throw new Error(\n                    'useUpdateMany mutation requires a non-empty resource'\n                );\n            }\n            if (!callTimeIds) {\n                throw new Error(\n                    'useUpdateMany mutation requires an array of ids'\n                );\n            }\n            if (!callTimeData) {\n                throw new Error(\n                    'useUpdateMany mutation requires a non-empty data object'\n                );\n            }\n            return dataProvider\n                .updateMany<RecordType>(callTimeResource, {\n                    ids: callTimeIds,\n                    data: callTimeData,\n                    meta: callTimeMeta,\n                })\n                .then(({ data }) => data || []);\n        },\n        ...mutationOptions,\n        onMutate: async (\n            variables: Partial<UseUpdateManyMutateParams<RecordType>>\n        ) => {\n            if (mutationOptions.onMutate) {\n                const userContext =\n                    (await mutationOptions.onMutate(variables)) || {};\n                return {\n                    snapshot: snapshot.current,\n                    // @ts-ignore\n                    ...userContext,\n                };\n            } else {\n                // Return a context object with the snapshot value\n                return { snapshot: snapshot.current };\n            }\n        },\n        onError: (\n            error: MutationError,\n            variables: Partial<UseUpdateManyMutateParams<RecordType>> = {},\n            context: { snapshot: Snapshot }\n        ) => {\n            if (mode.current === 'optimistic' || mode.current === 'undoable') {\n                // If the mutation fails, use the context returned from onMutate to rollback\n                context.snapshot.forEach(([key, value]) => {\n                    queryClient.setQueryData(key, value);\n                });\n            }\n\n            if (mutationOptions.onError && !hasCallTimeOnError.current) {\n                return mutationOptions.onError(error, variables, context);\n            }\n            // call-time error callback is executed by react-query\n        },\n        onSuccess: (\n            dataFromResponse: Array<RecordType['id']>,\n            variables: Partial<UseUpdateManyMutateParams<RecordType>> = {},\n            context: unknown\n        ) => {\n            if (mode.current === 'pessimistic') {\n                // update the getOne and getList query cache with the new result\n                const {\n                    resource: callTimeResource = resource,\n                    ids: callTimeIds = ids,\n                    data: callTimeData = data,\n                    meta: callTimeMeta = meta,\n                } = variables;\n                if (!callTimeResource) {\n                    throw new Error(\n                        'useUpdateMany mutation requires a non-empty resource'\n                    );\n                }\n                if (!callTimeIds) {\n                    throw new Error(\n                        'useUpdateMany mutation requires an array of ids'\n                    );\n                }\n                updateCache({\n                    resource: callTimeResource,\n                    ids: callTimeIds,\n                    data: callTimeData,\n                    meta: callTimeMeta,\n                });\n\n                if (\n                    mutationOptions.onSuccess &&\n                    !hasCallTimeOnSuccess.current\n                ) {\n                    mutationOptions.onSuccess(\n                        dataFromResponse,\n                        variables,\n                        context\n                    );\n                }\n            }\n        },\n        onSettled: (\n            data: Array<RecordType['id']>,\n            error: MutationError,\n            variables: Partial<UseUpdateManyMutateParams<RecordType>> = {},\n            context: { snapshot: Snapshot }\n        ) => {\n            if (mode.current === 'optimistic' || mode.current === 'undoable') {\n                // Always refetch after error or success:\n                context.snapshot.forEach(([queryKey]) => {\n                    queryClient.invalidateQueries({ queryKey });\n                });\n            }\n\n            if (mutationOptions.onSettled && !hasCallTimeOnSettled.current) {\n                return mutationOptions.onSettled(\n                    data,\n                    error,\n                    variables,\n                    context\n                );\n            }\n        },\n    });\n\n    const updateMany = async (\n        callTimeResource: string | undefined = resource,\n        callTimeParams: Partial<UpdateManyParams<RecordType>> = {},\n        callTimeOptions: MutateOptions<\n            Array<RecordType['id']>,\n            unknown,\n            Partial<UseUpdateManyMutateParams<RecordType>>,\n            unknown\n        > & { mutationMode?: MutationMode; returnPromise?: boolean } = {}\n    ) => {\n        if (!callTimeResource) {\n            throw new Error(\n                'useUpdateMany mutation requires a non-empty resource'\n            );\n        }\n        const {\n            mutationMode,\n            returnPromise = mutationOptions.returnPromise,\n            ...otherCallTimeOptions\n        } = callTimeOptions;\n\n        hasCallTimeOnError.current = !!otherCallTimeOptions.onError;\n        hasCallTimeOnSuccess.current = !!otherCallTimeOptions.onSuccess;\n        hasCallTimeOnSettled.current = !!otherCallTimeOptions.onSettled;\n\n        // store the hook time params *at the moment of the call*\n        // because they may change afterwards, which would break the undoable mode\n        // as the previousData would be overwritten by the optimistic update\n        paramsRef.current = params;\n\n        if (mutationMode) {\n            mode.current = mutationMode;\n        }\n\n        if (returnPromise && mode.current !== 'pessimistic') {\n            console.warn(\n                'The returnPromise parameter can only be used if the mutationMode is set to pessimistic'\n            );\n        }\n\n        if (mode.current === 'pessimistic') {\n            if (returnPromise) {\n                return mutation.mutateAsync(\n                    { resource: callTimeResource, ...callTimeParams },\n                    otherCallTimeOptions\n                );\n            }\n            return mutation.mutate(\n                { resource: callTimeResource, ...callTimeParams },\n                otherCallTimeOptions\n            );\n        }\n\n        const {\n            ids: callTimeIds = ids,\n            data: callTimeData = data,\n            meta: callTimeMeta = meta,\n        } = callTimeParams;\n        if (!callTimeIds) {\n            throw new Error('useUpdateMany mutation requires an array of ids');\n        }\n\n        // optimistic update as documented in https://react-query-v5.tanstack.com/guides/optimistic-updates\n        // except we do it in a mutate wrapper instead of the onMutate callback\n        // to have access to success side effects\n\n        const queryKeys = [\n            [callTimeResource, 'getOne'],\n            [callTimeResource, 'getList'],\n            [callTimeResource, 'getInfiniteList'],\n            [callTimeResource, 'getMany'],\n            [callTimeResource, 'getManyReference'],\n        ];\n\n        /**\n         * Snapshot the previous values via queryClient.getQueriesData()\n         *\n         * The snapshotData ref will contain an array of tuples [query key, associated data]\n         *\n         * @example\n         * [\n         *   [['posts', 'getOne', { id: '1' }], { id: 1, title: 'Hello' }],\n         *   [['posts', 'getList'], { data: [{ id: 1, title: 'Hello' }], total: 1 }],\n         *   [['posts', 'getMany'], [{ id: 1, title: 'Hello' }]],\n         * ]\n         *\n         * @see https://tanstack.com/query/v5/docs/react/reference/QueryClient#queryclientgetqueriesdata\n         */\n        snapshot.current = queryKeys.reduce(\n            (prev, queryKey) =>\n                prev.concat(queryClient.getQueriesData({ queryKey })),\n            [] as Snapshot\n        );\n\n        // Cancel any outgoing re-fetches (so they don't overwrite our optimistic update)\n        await Promise.all(\n            snapshot.current.map(([queryKey]) =>\n                queryClient.cancelQueries({ queryKey })\n            )\n        );\n\n        // Optimistically update to the new data\n        await updateCache({\n            resource: callTimeResource,\n            ids: callTimeIds,\n            data: callTimeData,\n            meta: callTimeMeta,\n        });\n\n        // run the success callbacks during the next tick\n        setTimeout(() => {\n            if (otherCallTimeOptions.onSuccess) {\n                otherCallTimeOptions.onSuccess(\n                    callTimeIds,\n                    { resource: callTimeResource, ...callTimeParams },\n                    { snapshot: snapshot.current }\n                );\n            } else if (mutationOptions.onSuccess) {\n                mutationOptions.onSuccess(\n                    callTimeIds,\n                    { resource: callTimeResource, ...callTimeParams },\n                    { snapshot: snapshot.current }\n                );\n            }\n        }, 0);\n\n        if (mode.current === 'optimistic') {\n            // call the mutate method without success side effects\n            return mutation.mutate(\n                { resource: callTimeResource, ...callTimeParams },\n                {\n                    onSettled: otherCallTimeOptions.onSettled,\n                    onError: otherCallTimeOptions.onError,\n                }\n            );\n        } else {\n            // Undoable mutation: add the mutation to the undoable queue.\n            // The Notification component will dequeue it when the user confirms or cancels the message.\n            addUndoableMutation(({ isUndo }) => {\n                if (isUndo) {\n                    // rollback\n                    snapshot.current.forEach(([key, value]) => {\n                        queryClient.setQueryData(key, value);\n                    });\n                } else {\n                    // call the mutate method without success side effects\n                    mutation.mutate(\n                        { resource: callTimeResource, ...callTimeParams },\n                        {\n                            onSettled: otherCallTimeOptions.onSettled,\n                            onError: otherCallTimeOptions.onError,\n                        }\n                    );\n                }\n            });\n        }\n    };\n\n    const mutationResult = useMemo(\n        () => ({\n            isLoading: mutation.isPending,\n            ...mutation,\n        }),\n        [mutation]\n    );\n\n    return [useEvent(updateMany), mutationResult];\n};\n\ntype Snapshot = [key: QueryKey, value: any][];\n\nexport interface UseUpdateManyMutateParams<RecordType extends RaRecord = any> {\n    resource?: string;\n    ids?: Array<RecordType['id']>;\n    data?: Partial<RecordType>;\n    previousData?: any;\n    meta?: any;\n}\n\nexport type UseUpdateManyOptions<\n    RecordType extends RaRecord = any,\n    MutationError = unknown,\n> = UseMutationOptions<\n    Array<RecordType['id']>,\n    MutationError,\n    Partial<Omit<UseUpdateManyMutateParams<RecordType>, 'mutationFn'>>\n> & { mutationMode?: MutationMode; returnPromise?: boolean };\n\nexport type UseUpdateManyResult<\n    RecordType extends RaRecord = any,\n    TReturnPromise extends boolean = boolean,\n    MutationError = unknown,\n> = [\n    (\n        resource?: string,\n        params?: Partial<UpdateManyParams<RecordType>>,\n        options?: MutateOptions<\n            Array<RecordType['id']>,\n            MutationError,\n            Partial<UseUpdateManyMutateParams<RecordType>>,\n            unknown\n        > & { mutationMode?: MutationMode; returnPromise?: TReturnPromise }\n    ) => Promise<TReturnPromise extends true ? Array<RecordType['id']> : void>,\n    UseMutationResult<\n        Array<RecordType['id']>,\n        MutationError,\n        Partial<UpdateManyParams<Partial<RecordType>> & { resource?: string }>,\n        unknown\n    > & { isLoading: boolean },\n];\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,OAAO,EAAEC,MAAM,QAAQ,OAAO;AACvC,SACIC,WAAW,EACXC,cAAc,QAOX,uBAAuB;AAE9B,SAASC,eAAe,QAAQ,mBAAmB;AACnD,SAASC,sBAAsB,QAAQ,+BAA+B;AAQtE,SAASC,QAAQ,QAAQ,SAAS;AAGlC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuDA,OAAO,IAAMC,aAAa,GAAG,SAAAA,CAIzBC,QAAiB,EACjBC,MAA2D,EAC3DC,OAA6D;EAD7D,IAAAD,MAAA;IAAAA,MAAA,KAA2D;EAAA;EAC3D,IAAAC,OAAA;IAAAA,OAAA,KAA6D;EAAA;EAE7D,IAAMC,YAAY,GAAGP,eAAe,EAAE;EACtC,IAAMQ,WAAW,GAAGT,cAAc,EAAE;EACpC,IAAMU,mBAAmB,GAAGR,sBAAsB,EAAE;EAC5C,IAAAS,GAAG,GAAiBL,MAAM,CAAAK,GAAvB;IAAEC,IAAI,GAAWN,MAAM,CAAAM,IAAjB;IAAEC,IAAI,GAAKP,MAAM,CAAAO,IAAX;EACf,IAAAC,EAAA,GAAqDP,OAAO,CAAAQ,YAAhC;IAA5BA,YAAY,GAAAD,EAAA,cAAG,aAAa,GAAAA,EAAA;IAAKE,eAAe,GAAAC,MAAA,CAAKV,OAAO,EAA9D,gBAAoD,CAAF;EACxD,IAAMW,IAAI,GAAGpB,MAAM,CAAeiB,YAAY,CAAC;EAC/C,IAAMI,SAAS,GACXrB,MAAM,CAAiDQ,MAAM,CAAC;EAClE,IAAMc,QAAQ,GAAGtB,MAAM,CAAW,EAAE,CAAC;EACrC,IAAMuB,kBAAkB,GAAGvB,MAAM,CAAC,KAAK,CAAC;EACxC,IAAMwB,oBAAoB,GAAGxB,MAAM,CAAC,KAAK,CAAC;EAC1C,IAAMyB,oBAAoB,GAAGzB,MAAM,CAAC,KAAK,CAAC;EAE1C,IAAM0B,WAAW,GAAG,SAAAA,CAAOV,EAU1B;QATGT,QAAQ,GAAAS,EAAA,CAAAT,QAAA;MACRM,GAAG,GAAAG,EAAA,CAAAH,GAAA;MACHC,IAAI,GAAAE,EAAA,CAAAF,IAAA;MACJC,IAAI,GAAAC,EAAA,CAAAD,IAAA;;;;QASEY,SAAS,GACXP,IAAI,CAACQ,OAAO,KAAK,UAAU,GAAGC,IAAI,CAACC,GAAG,EAAE,GAAG,IAAI,GAAG,CAAC,GAAGD,IAAI,CAACC,GAAG,EAAE;QAI9DC,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAACpB,IAAI,CAAC,CAAC;QAE7CqB,UAAU,GAAG,SAAAA,CAACC,GAAiB;UACjC,IAAI,CAACA,GAAG,EAAE,OAAOA,GAAG;UACpB,IAAIC,aAAa,GAAAC,aAAA,KAAOF,GAAG,OAAC;UAC5BvB,GAAG,CAAC0B,OAAO,CAAC,UAAAC,EAAE;YACV;YACA,IAAMC,KAAK,GAAGL,GAAG,CAACM,SAAS,CAAC,UAAAC,MAAM;cAAI,OAAAA,MAAM,CAACH,EAAE,IAAIA,EAAE;YAAf,CAAe,CAAC;YACtD,IAAIC,KAAK,KAAK,CAAC,CAAC,EAAE;cACd;;YAEJJ,aAAa,GAAAC,aAAA,CAAAA,aAAA,CAAAA,aAAA,KACND,aAAa,CAACO,KAAK,CAAC,CAAC,EAAEH,KAAK,CAAC,U,sBAC3BJ,aAAa,CAACI,KAAK,CAAC,GAAKV,UAAU,E,UACrCM,aAAa,CAACO,KAAK,CAACH,KAAK,GAAG,CAAC,CAAC,OACpC;UACL,CAAC,CAAC;UACF,OAAOJ,aAAa;QACxB,CAAC;QAMDxB,GAAG,CAAC0B,OAAO,CAAC,UAAAC,EAAE;UACV7B,WAAW,CAACkC,YAAY,CACpB,CAACtC,QAAQ,EAAE,QAAQ,EAAE;YAAEiC,EAAE,EAAEM,MAAM,CAACN,EAAE,CAAC;YAAEzB,IAAI,EAAAA;UAAA,CAAE,CAAC,EAC9C,UAAC4B,MAAkB;YAAK,OAAAI,QAAA,CAAAA,QAAA,KAAMJ,MAAM,GAAKZ,UAAU;UAA3B,CAA8B,EACtD;YAAEJ,SAAS,EAAAA;UAAA,CAAE,CAChB;QACL,CAAC,CAAC;QACFhB,WAAW,CAACqC,cAAc,CACtB;UAAEC,QAAQ,EAAE,CAAC1C,QAAQ,EAAE,SAAS;QAAC,CAAE,EACnC,UAAC2C,GAAkB;UACf,OAAAA,GAAG,IAAIA,GAAG,CAACpC,IAAI,GAAEiC,QAAA,CAAAA,QAAA,KAAMG,GAAG;YAAEpC,IAAI,EAAEqB,UAAU,CAACe,GAAG,CAACpC,IAAI;UAAC,KAAKoC,GAAG;QAA9D,CAA8D,EAClE;UAAEvB,SAAS,EAAAA;QAAA,CAAE,CAChB;QACDhB,WAAW,CAACqC,cAAc,CACtB;UAAEC,QAAQ,EAAE,CAAC1C,QAAQ,EAAE,iBAAiB;QAAC,CAAE,EAC3C,UACI2C,GAES;UAET,OAAAA,GAAG,IAAIA,GAAG,CAACC,KAAK,GACXJ,QAAA,CAAAA,QAAA,KACQG,GAAG;YACNC,KAAK,EAAED,GAAG,CAACC,KAAK,CAACC,GAAG,CAAC,UAAAC,IAAI;cAAI,OAAAN,QAAA,CAAAA,QAAA,KACtBM,IAAI;gBACPvC,IAAI,EAAEqB,UAAU,CAACkB,IAAI,CAACvC,IAAI;cAAC;YAFF,CAG3B;UAAC,KAEPoC,GAAG;QART,CAQS,EACb;UAAEvB,SAAS,EAAAA;QAAA,CAAE,CAChB;QACDhB,WAAW,CAACqC,cAAc,CACtB;UAAEC,QAAQ,EAAE,CAAC1C,QAAQ,EAAE,SAAS;QAAC,CAAE,EACnC,UAAC+C,IAAkB;UACf,OAAAA,IAAI,IAAIA,IAAI,CAACC,MAAM,GAAG,CAAC,GAAGpB,UAAU,CAACmB,IAAI,CAAC,GAAGA,IAAI;QAAjD,CAAiD,EACrD;UAAE3B,SAAS,EAAAA;QAAA,CAAE,CAChB;QACDhB,WAAW,CAACqC,cAAc,CACtB;UAAEC,QAAQ,EAAE,CAAC1C,QAAQ,EAAE,kBAAkB;QAAC,CAAE,EAC5C,UAAC2C,GAAkB;UACf,OAAAA,GAAG,IAAIA,GAAG,CAACpC,IAAI,GACT;YAAEA,IAAI,EAAEqB,UAAU,CAACe,GAAG,CAACpC,IAAI,CAAC;YAAE0C,KAAK,EAAEN,GAAG,CAACM;UAAK,CAAE,GAChDN,GAAG;QAFT,CAES,EACb;UAAEvB,SAAS,EAAAA;QAAA,CAAE,CAChB;;;;GACJ;EAED,IAAM8B,QAAQ,GAAGxD,WAAW,CAAA8C,QAAA,CAAAA,QAAA;IAKxBW,UAAU,EAAE,SAAAA,CAAC1C,EAKP;UALO2C,EAAA,GAAA3C,EAAA,cAKT,EAAE,GAAAA,EAAA;QAJF4C,EAAA,GAAAD,EAAA,CAAApD,QAAqC;QAA3BsD,gBAAgB,GAAAD,EAAA,cAAGrD,QAAQ,GAAAqD,EAAA;QACrCE,EAAA,GAAAH,EAAA,CAAA9C,GAAwC;QAAnCkD,WAAW,GAAAD,EAAA,cAAGzC,SAAS,CAACO,OAAO,CAACf,GAAG,GAAAiD,EAAA;QACxCE,EAAA,GAAAL,EAAA,CAAA7C,IAA2C;QAArCmD,YAAY,GAAAD,EAAA,cAAG3C,SAAS,CAACO,OAAO,CAACd,IAAI,GAAAkD,EAAA;QAC3CE,EAAA,GAAAP,EAAA,CAAA5C,IAA2C;QAArCoD,YAAY,GAAAD,EAAA,cAAG7C,SAAS,CAACO,OAAO,CAACb,IAAI,GAAAmD,EAAA;MAE3C,IAAI,CAACL,gBAAgB,EAAE;QACnB,MAAM,IAAIO,KAAK,CACX,sDAAsD,CACzD;;MAEL,IAAI,CAACL,WAAW,EAAE;QACd,MAAM,IAAIK,KAAK,CACX,iDAAiD,CACpD;;MAEL,IAAI,CAACH,YAAY,EAAE;QACf,MAAM,IAAIG,KAAK,CACX,yDAAyD,CAC5D;;MAEL,OAAO1D,YAAY,CACd2D,UAAU,CAAaR,gBAAgB,EAAE;QACtChD,GAAG,EAAEkD,WAAW;QAChBjD,IAAI,EAAEmD,YAAY;QAClBlD,IAAI,EAAEoD;OACT,CAAC,CACDG,IAAI,CAAC,UAACtD,EAAQ;YAANF,IAAI,GAAAE,EAAA,CAAAF,IAAA;QAAO,OAAAA,IAAI,IAAI,EAAE;MAAV,CAAU,CAAC;IACvC;EAAC,GACEI,eAAe;IAClBqD,QAAQ,EAAE,SAAAA,CACNC,SAAyD;MAAA,OAAAC,SAAA;;;;;mBAErDvD,eAAe,CAACqD,QAAQ,EAAxB;cAEK,qBAAMrD,eAAe,CAACqD,QAAQ,CAACC,SAAS,CAAC;;cADxCE,WAAW,GACZ1D,EAAA,CAAA2D,IAAA,EAAyC,IAAK,EAAE;cACrD,sBAAA5B,QAAA;gBACIzB,QAAQ,EAAEA,QAAQ,CAACM;cAAO,GAEvB8C,WAAW;;cAGlB;cACA,sBAAO;gBAAEpD,QAAQ,EAAEA,QAAQ,CAACM;cAAO,CAAE;;;;KAE5C;IACDgD,OAAO,EAAE,SAAAA,CACLC,KAAoB,EACpBL,SAA8D,EAC9DM,OAA+B;MAD/B,IAAAN,SAAA;QAAAA,SAAA,KAA8D;MAAA;MAG9D,IAAIpD,IAAI,CAACQ,OAAO,KAAK,YAAY,IAAIR,IAAI,CAACQ,OAAO,KAAK,UAAU,EAAE;QAC9D;QACAkD,OAAO,CAACxD,QAAQ,CAACiB,OAAO,CAAC,UAACvB,EAAY;cAAX+D,GAAG,GAAA/D,EAAA;YAAEgE,KAAK,GAAAhE,EAAA;UACjCL,WAAW,CAACkC,YAAY,CAACkC,GAAG,EAAEC,KAAK,CAAC;QACxC,CAAC,CAAC;;MAGN,IAAI9D,eAAe,CAAC0D,OAAO,IAAI,CAACrD,kBAAkB,CAACK,OAAO,EAAE;QACxD,OAAOV,eAAe,CAAC0D,OAAO,CAACC,KAAK,EAAEL,SAAS,EAAEM,OAAO,CAAC;;MAE7D;IACJ,CAAC;IACDG,SAAS,EAAE,SAAAA,CACPC,gBAAyC,EACzCV,SAA8D,EAC9DM,OAAgB;MADhB,IAAAN,SAAA;QAAAA,SAAA,KAA8D;MAAA;MAG9D,IAAIpD,IAAI,CAACQ,OAAO,KAAK,aAAa,EAAE;QAChC;QAEI,IAAAZ,EAAA,GAIAwD,SAAS,CAAAjE,QAJ4B;UAA3BsD,gBAAgB,GAAA7C,EAAA,cAAGT,QAAQ,GAAAS,EAAA;UACrC2C,EAAA,GAGAa,SAAS,CAAA3D,GAHa;UAAjBkD,WAAW,GAAAJ,EAAA,cAAG9C,GAAG,GAAA8C,EAAA;UACtBC,EAAA,GAEAY,SAAS,CAAA1D,IAFgB;UAAnBmD,YAAY,GAAAL,EAAA,cAAG9C,IAAI,GAAA8C,EAAA;UACzBE,EAAA,GACAU,SAAS,CAAAzD,IADgB;UAAnBoD,YAAY,GAAAL,EAAA,cAAG/C,IAAI,GAAA+C,EAAA;QAE7B,IAAI,CAACD,gBAAgB,EAAE;UACnB,MAAM,IAAIO,KAAK,CACX,sDAAsD,CACzD;;QAEL,IAAI,CAACL,WAAW,EAAE;UACd,MAAM,IAAIK,KAAK,CACX,iDAAiD,CACpD;;QAEL1C,WAAW,CAAC;UACRnB,QAAQ,EAAEsD,gBAAgB;UAC1BhD,GAAG,EAAEkD,WAAW;UAChBjD,IAAI,EAAEmD,YAAY;UAClBlD,IAAI,EAAEoD;SACT,CAAC;QAEF,IACIjD,eAAe,CAAC+D,SAAS,IACzB,CAACzD,oBAAoB,CAACI,OAAO,EAC/B;UACEV,eAAe,CAAC+D,SAAS,CACrBC,gBAAgB,EAChBV,SAAS,EACTM,OAAO,CACV;;;IAGb,CAAC;IACDK,SAAS,EAAE,SAAAA,CACPrE,IAA6B,EAC7B+D,KAAoB,EACpBL,SAA8D,EAC9DM,OAA+B;MAD/B,IAAAN,SAAA;QAAAA,SAAA,KAA8D;MAAA;MAG9D,IAAIpD,IAAI,CAACQ,OAAO,KAAK,YAAY,IAAIR,IAAI,CAACQ,OAAO,KAAK,UAAU,EAAE;QAC9D;QACAkD,OAAO,CAACxD,QAAQ,CAACiB,OAAO,CAAC,UAACvB,EAAU;cAATiC,QAAQ,GAAAjC,EAAA;UAC/BL,WAAW,CAACyE,iBAAiB,CAAC;YAAEnC,QAAQ,EAAAA;UAAA,CAAE,CAAC;QAC/C,CAAC,CAAC;;MAGN,IAAI/B,eAAe,CAACiE,SAAS,IAAI,CAAC1D,oBAAoB,CAACG,OAAO,EAAE;QAC5D,OAAOV,eAAe,CAACiE,SAAS,CAC5BrE,IAAI,EACJ+D,KAAK,EACLL,SAAS,EACTM,OAAO,CACV;;IAET;EAAC,GACH;EAEF,IAAMT,UAAU,GAAG,SAAAA,CACfR,gBAA+C,EAC/CwB,cAA0D,EAC1DC,eAKiE;IAPjE,IAAAzB,gBAAA;MAAAA,gBAAA,GAAAtD,QAA+C;IAAA;IAC/C,IAAA8E,cAAA;MAAAA,cAAA,KAA0D;IAAA;IAC1D,IAAAC,eAAA;MAAAA,eAAA,KAKiE;IAAA;;;;;;YAEjE,IAAI,CAACzB,gBAAgB,EAAE;cACnB,MAAM,IAAIO,KAAK,CACX,sDAAsD,CACzD;;YAGDnD,YAAY,GAGZqE,eAAe,CAAArE,YAHH,EACZD,EAAA,GAEAsE,eAAe,CAAAC,aAF8B,EAA7CA,aAAa,GAAAvE,EAAA,cAAGE,eAAe,CAACqE,aAAa,GAAAvE,EAAA,EAC1CwE,oBAAoB,GAAArE,MAAA,CACvBmE,eAAe,EAJb,iCAIL,CAD0B;YAG3B/D,kBAAkB,CAACK,OAAO,GAAG,CAAC,CAAC4D,oBAAoB,CAACZ,OAAO;YAC3DpD,oBAAoB,CAACI,OAAO,GAAG,CAAC,CAAC4D,oBAAoB,CAACP,SAAS;YAC/DxD,oBAAoB,CAACG,OAAO,GAAG,CAAC,CAAC4D,oBAAoB,CAACL,SAAS;YAE/D;YACA;YACA;YACA9D,SAAS,CAACO,OAAO,GAAGpB,MAAM;YAE1B,IAAIS,YAAY,EAAE;cACdG,IAAI,CAACQ,OAAO,GAAGX,YAAY;;YAG/B,IAAIsE,aAAa,IAAInE,IAAI,CAACQ,OAAO,KAAK,aAAa,EAAE;cACjD6D,OAAO,CAACC,IAAI,CACR,wFAAwF,CAC3F;;YAGL,IAAItE,IAAI,CAACQ,OAAO,KAAK,aAAa,EAAE;cAChC,IAAI2D,aAAa,EAAE;gBACf,sBAAO9B,QAAQ,CAACkC,WAAW,CAAA5C,QAAA;kBACrBxC,QAAQ,EAAEsD;gBAAgB,GAAKwB,cAAc,GAC/CG,oBAAoB,CACvB;;cAEL,sBAAO/B,QAAQ,CAACmC,MAAM,CAAA7C,QAAA;gBAChBxC,QAAQ,EAAEsD;cAAgB,GAAKwB,cAAc,GAC/CG,oBAAoB,CACvB;;YAID7B,EAAA,GAGA0B,cAAc,CAAAxE,GAHQ,EAAjBkD,WAAW,GAAAJ,EAAA,cAAG9C,GAAG,GAAA8C,EAAA,EACtBC,EAAA,GAEAyB,cAAc,CAAAvE,IAFW,EAAnBmD,YAAY,GAAAL,EAAA,cAAG9C,IAAI,GAAA8C,EAAA,EACzBE,EAAA,GACAuB,cAAc,CAAAtE,IADW,EAAnBoD,YAAY,GAAAL,EAAA,cAAG/C,IAAI,GAAA+C,EAAA;YAE7B,IAAI,CAACC,WAAW,EAAE;cACd,MAAM,IAAIK,KAAK,CAAC,iDAAiD,CAAC;;YAOhEyB,SAAS,GAAG,CACd,CAAChC,gBAAgB,EAAE,QAAQ,CAAC,EAC5B,CAACA,gBAAgB,EAAE,SAAS,CAAC,EAC7B,CAACA,gBAAgB,EAAE,iBAAiB,CAAC,EACrC,CAACA,gBAAgB,EAAE,SAAS,CAAC,EAC7B,CAACA,gBAAgB,EAAE,kBAAkB,CAAC,CACzC;YAED;;;;;;;;;;;;;;YAcAvC,QAAQ,CAACM,OAAO,GAAGiE,SAAS,CAACC,MAAM,CAC/B,UAACC,IAAI,EAAE9C,QAAQ;cACX,OAAA8C,IAAI,CAACC,MAAM,CAACrF,WAAW,CAACsF,cAAc,CAAC;gBAAEhD,QAAQ,EAAAA;cAAA,CAAE,CAAC,CAAC;YAArD,CAAqD,EACzD,EAAc,CACjB;YAED;YACA,qBAAMiD,OAAO,CAACC,GAAG,CACb7E,QAAQ,CAACM,OAAO,CAACwB,GAAG,CAAC,UAACpC,EAAU;kBAATiC,QAAQ,GAAAjC,EAAA;cAC3B,OAAAL,WAAW,CAACyF,aAAa,CAAC;gBAAEnD,QAAQ,EAAAA;cAAA,CAAE,CAAC;YAAvC,CAAuC,CAC1C,CACJ;;YALD;YACAe,EAAA,CAAAW,IAAA,EAIC;YAED;YACA,qBAAMjD,WAAW,CAAC;cACdnB,QAAQ,EAAEsD,gBAAgB;cAC1BhD,GAAG,EAAEkD,WAAW;cAChBjD,IAAI,EAAEmD,YAAY;cAClBlD,IAAI,EAAEoD;aACT,CAAC;;YANF;YACAH,EAAA,CAAAW,IAAA,EAKE;YAEF;YACA0B,UAAU,CAAC;cACP,IAAIb,oBAAoB,CAACP,SAAS,EAAE;gBAChCO,oBAAoB,CAACP,SAAS,CAC1BlB,WAAW,EAAAhB,QAAA;kBACTxC,QAAQ,EAAEsD;gBAAgB,GAAKwB,cAAc,GAC/C;kBAAE/D,QAAQ,EAAEA,QAAQ,CAACM;gBAAO,CAAE,CACjC;eACJ,MAAM,IAAIV,eAAe,CAAC+D,SAAS,EAAE;gBAClC/D,eAAe,CAAC+D,SAAS,CACrBlB,WAAW,EAAAhB,QAAA;kBACTxC,QAAQ,EAAEsD;gBAAgB,GAAKwB,cAAc,GAC/C;kBAAE/D,QAAQ,EAAEA,QAAQ,CAACM;gBAAO,CAAE,CACjC;;YAET,CAAC,EAAE,CAAC,CAAC;YAEL,IAAIR,IAAI,CAACQ,OAAO,KAAK,YAAY,EAAE;cAC/B;cACA,sBAAO6B,QAAQ,CAACmC,MAAM,CAAA7C,QAAA;gBAChBxC,QAAQ,EAAEsD;cAAgB,GAAKwB,cAAc,GAC/C;gBACIF,SAAS,EAAEK,oBAAoB,CAACL,SAAS;gBACzCP,OAAO,EAAEY,oBAAoB,CAACZ;eACjC,CACJ;aACJ,MAAM;cACH;cACA;cACAhE,mBAAmB,CAAC,UAACI,EAAU;oBAARsF,MAAM,GAAAtF,EAAA,CAAAsF,MAAA;gBACzB,IAAIA,MAAM,EAAE;kBACR;kBACAhF,QAAQ,CAACM,OAAO,CAACW,OAAO,CAAC,UAACvB,EAAY;wBAAX+D,GAAG,GAAA/D,EAAA;sBAAEgE,KAAK,GAAAhE,EAAA;oBACjCL,WAAW,CAACkC,YAAY,CAACkC,GAAG,EAAEC,KAAK,CAAC;kBACxC,CAAC,CAAC;iBACL,MAAM;kBACH;kBACAvB,QAAQ,CAACmC,MAAM,CAAA7C,QAAA;oBACTxC,QAAQ,EAAEsD;kBAAgB,GAAKwB,cAAc,GAC/C;oBACIF,SAAS,EAAEK,oBAAoB,CAACL,SAAS;oBACzCP,OAAO,EAAEY,oBAAoB,CAACZ;mBACjC,CACJ;;cAET,CAAC,CAAC;;;;;;GAET;EAED,IAAM2B,cAAc,GAAGxG,OAAO,CAC1B;IAAM,OAAAgD,QAAA;MACFyD,SAAS,EAAE/C,QAAQ,CAACgD;IAAS,GAC1BhD,QAAQ;EAFT,CAGJ,EACF,CAACA,QAAQ,CAAC,CACb;EAED,OAAO,CAACpD,QAAQ,CAACgE,UAAU,CAAC,EAAEkC,cAAc,CAAC;AACjD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}