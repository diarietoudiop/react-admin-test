{"ast":null,"code":"import { createContext, useContext } from 'react';\n/**\n * Context that provides a function that accept a source and return getters for the modified source and label.\n *\n * This allows some special inputs to prefix or suffix the source of their children.\n *\n * @example\n * const sourceContext = {\n *  getSource: source => `coordinates.${source}`,\n *  getLabel: source => `resources.posts.fields.${source}`,\n * }\n * const CoordinatesInput = () => {\n *   return (\n *     <SourceContextProvider value={sourceContext}>\n *       <TextInput source=\"lat\" />\n *       <TextInput source=\"lng\" />\n *     </SourceContextProvider>\n *   );\n * };\n */\nexport var SourceContext = createContext(undefined);\nvar defaultContextValue = {\n  getSource: function (source) {\n    return source;\n  },\n  getLabel: function (source) {\n    return source;\n  }\n};\nexport var SourceContextProvider = SourceContext.Provider;\nexport var useSourceContext = function () {\n  var context = useContext(SourceContext);\n  if (!context) {\n    return defaultContextValue;\n  }\n  return context;\n};\nexport var useOptionalSourceContext = function () {\n  return useContext(SourceContext);\n};","map":{"version":3,"names":["createContext","useContext","SourceContext","undefined","defaultContextValue","getSource","source","getLabel","SourceContextProvider","Provider","useSourceContext","context","useOptionalSourceContext"],"sources":["/home/diarietou/Bureau/afterSA/test/testfront/react-admin-test/node_modules/ra-core/src/core/SourceContext.tsx"],"sourcesContent":["import { createContext, useContext } from 'react';\n\nexport type SourceContextValue = {\n    /*\n     * Returns the source for a field or input, modified according to the context.\n     */\n    getSource: (source: string) => string;\n    /*\n     * Returns the label for a field or input, modified according to the context. Returns a translation key.\n     */\n    getLabel: (source: string) => string;\n};\n\n/**\n * Context that provides a function that accept a source and return getters for the modified source and label.\n *\n * This allows some special inputs to prefix or suffix the source of their children.\n *\n * @example\n * const sourceContext = {\n *  getSource: source => `coordinates.${source}`,\n *  getLabel: source => `resources.posts.fields.${source}`,\n * }\n * const CoordinatesInput = () => {\n *   return (\n *     <SourceContextProvider value={sourceContext}>\n *       <TextInput source=\"lat\" />\n *       <TextInput source=\"lng\" />\n *     </SourceContextProvider>\n *   );\n * };\n */\nexport const SourceContext = createContext<SourceContextValue | undefined>(\n    undefined\n);\n\nconst defaultContextValue = {\n    getSource: (source: string) => source,\n    getLabel: (source: string) => source,\n};\nexport const SourceContextProvider = SourceContext.Provider;\n\nexport const useSourceContext = () => {\n    const context = useContext(SourceContext);\n    if (!context) {\n        return defaultContextValue;\n    }\n    return context;\n};\n\nexport const useOptionalSourceContext = () => useContext(SourceContext);\n"],"mappings":"AAAA,SAASA,aAAa,EAAEC,UAAU,QAAQ,OAAO;AAajD;;;;;;;;;;;;;;;;;;;AAmBA,OAAO,IAAMC,aAAa,GAAGF,aAAa,CACtCG,SAAS,CACZ;AAED,IAAMC,mBAAmB,GAAG;EACxBC,SAAS,EAAE,SAAAA,CAACC,MAAc;IAAK,OAAAA,MAAM;EAAN,CAAM;EACrCC,QAAQ,EAAE,SAAAA,CAACD,MAAc;IAAK,OAAAA,MAAM;EAAN;CACjC;AACD,OAAO,IAAME,qBAAqB,GAAGN,aAAa,CAACO,QAAQ;AAE3D,OAAO,IAAMC,gBAAgB,GAAG,SAAAA,CAAA;EAC5B,IAAMC,OAAO,GAAGV,UAAU,CAACC,aAAa,CAAC;EACzC,IAAI,CAACS,OAAO,EAAE;IACV,OAAOP,mBAAmB;;EAE9B,OAAOO,OAAO;AAClB,CAAC;AAED,OAAO,IAAMC,wBAAwB,GAAG,SAAAA,CAAA;EAAM,OAAAX,UAAU,CAACC,aAAa,CAAC;AAAzB,CAAyB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}