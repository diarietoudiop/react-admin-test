{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport { EditBase, useCheckMinimumRequiredProps } from 'ra-core';\nimport { EditView } from './EditView';\nimport { Loading } from '../layout';\n/**\n * Page component for the Edit view\n *\n * The `<Edit>` component renders the page title and actions,\n * fetches the record from the data provider.\n * It is not responsible for rendering the actual form -\n * that's the job of its child component (usually `<SimpleForm>`),\n * to which it passes the `record` as prop.\n *\n * The <Edit> component accepts the following props:\n *\n * - actions\n * - aside\n * - component\n * - title\n * - mutationMode\n * - mutationOptions\n *\n * @example\n *\n * // in src/posts.js\n * import * as React from \"react\";\n * import { Edit, SimpleForm, TextInput } from 'react-admin';\n *\n * export const PostEdit = () => (\n *     <Edit>\n *         <SimpleForm>\n *             <TextInput source=\"title\" />\n *         </SimpleForm>\n *     </Edit>\n * );\n *\n * // in src/App.js\n * import * as React from \"react\";\n * import { Admin, Resource } from 'react-admin';\n *\n * import { PostEdit } from './posts';\n *\n * const App = () => (\n *     <Admin dataProvider={...}>\n *         <Resource name=\"posts\" edit={PostEdit} />\n *     </Admin>\n * );\n * export default App;\n */\nexport var Edit = function (props) {\n  useCheckMinimumRequiredProps('Edit', ['children'], props);\n  var resource = props.resource,\n    id = props.id,\n    mutationMode = props.mutationMode,\n    mutationOptions = props.mutationOptions,\n    queryOptions = props.queryOptions,\n    redirect = props.redirect,\n    transform = props.transform,\n    disableAuthentication = props.disableAuthentication,\n    _a = props.loading,\n    loading = _a === void 0 ? defaultLoading : _a,\n    rest = __rest(props, [\"resource\", \"id\", \"mutationMode\", \"mutationOptions\", \"queryOptions\", \"redirect\", \"transform\", \"disableAuthentication\", \"loading\"]);\n  return React.createElement(EditBase, {\n    resource: resource,\n    id: id,\n    mutationMode: mutationMode,\n    mutationOptions: mutationOptions,\n    queryOptions: queryOptions,\n    redirect: redirect,\n    transform: transform,\n    disableAuthentication: disableAuthentication,\n    loading: loading\n  }, React.createElement(EditView, __assign({}, rest)));\n};\nvar defaultLoading = React.createElement(Loading, null);","map":{"version":3,"names":["React","EditBase","useCheckMinimumRequiredProps","EditView","Loading","Edit","props","resource","id","mutationMode","mutationOptions","queryOptions","redirect","transform","disableAuthentication","_a","loading","defaultLoading","rest","__rest","createElement","__assign"],"sources":["/home/diarietou/Bureau/afterSA/test/testfront/react-admin-test/node_modules/ra-ui-materialui/src/detail/Edit.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n    EditBase,\n    useCheckMinimumRequiredProps,\n    RaRecord,\n    EditBaseProps,\n} from 'ra-core';\nimport { EditView, EditViewProps } from './EditView';\nimport { Loading } from '../layout';\n\n/**\n * Page component for the Edit view\n *\n * The `<Edit>` component renders the page title and actions,\n * fetches the record from the data provider.\n * It is not responsible for rendering the actual form -\n * that's the job of its child component (usually `<SimpleForm>`),\n * to which it passes the `record` as prop.\n *\n * The <Edit> component accepts the following props:\n *\n * - actions\n * - aside\n * - component\n * - title\n * - mutationMode\n * - mutationOptions\n *\n * @example\n *\n * // in src/posts.js\n * import * as React from \"react\";\n * import { Edit, SimpleForm, TextInput } from 'react-admin';\n *\n * export const PostEdit = () => (\n *     <Edit>\n *         <SimpleForm>\n *             <TextInput source=\"title\" />\n *         </SimpleForm>\n *     </Edit>\n * );\n *\n * // in src/App.js\n * import * as React from \"react\";\n * import { Admin, Resource } from 'react-admin';\n *\n * import { PostEdit } from './posts';\n *\n * const App = () => (\n *     <Admin dataProvider={...}>\n *         <Resource name=\"posts\" edit={PostEdit} />\n *     </Admin>\n * );\n * export default App;\n */\nexport const Edit = <RecordType extends RaRecord = any>(\n    props: EditProps<RecordType, Error>\n) => {\n    useCheckMinimumRequiredProps('Edit', ['children'], props);\n    const {\n        resource,\n        id,\n        mutationMode,\n        mutationOptions,\n        queryOptions,\n        redirect,\n        transform,\n        disableAuthentication,\n        loading = defaultLoading,\n        ...rest\n    } = props;\n    return (\n        <EditBase<RecordType>\n            resource={resource}\n            id={id}\n            mutationMode={mutationMode}\n            mutationOptions={mutationOptions}\n            queryOptions={queryOptions}\n            redirect={redirect}\n            transform={transform}\n            disableAuthentication={disableAuthentication}\n            loading={loading}\n        >\n            <EditView {...rest} />\n        </EditBase>\n    );\n};\n\nexport interface EditProps<RecordType extends RaRecord = any, ErrorType = Error>\n    extends EditBaseProps<RecordType, ErrorType>,\n        Omit<EditViewProps, 'children'> {}\n\nconst defaultLoading = <Loading />;\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SACIC,QAAQ,EACRC,4BAA4B,QAGzB,SAAS;AAChB,SAASC,QAAQ,QAAuB,YAAY;AACpD,SAASC,OAAO,QAAQ,WAAW;AAEnC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6CA,OAAO,IAAMC,IAAI,GAAG,SAAAA,CAChBC,KAAmC;EAEnCJ,4BAA4B,CAAC,MAAM,EAAE,CAAC,UAAU,CAAC,EAAEI,KAAK,CAAC;EAErD,IAAAC,QAAQ,GAURD,KAAK,CAAAC,QAVG;IACRC,EAAE,GASFF,KAAK,CAAAE,EATH;IACFC,YAAY,GAQZH,KAAK,CAAAG,YARO;IACZC,eAAe,GAOfJ,KAAK,CAAAI,eAPU;IACfC,YAAY,GAMZL,KAAK,CAAAK,YANO;IACZC,QAAQ,GAKRN,KAAK,CAAAM,QALG;IACRC,SAAS,GAITP,KAAK,CAAAO,SAJI;IACTC,qBAAqB,GAGrBR,KAAK,CAAAQ,qBAHgB;IACrBC,EAAA,GAEAT,KAAK,CAAAU,OAFmB;IAAxBA,OAAO,GAAAD,EAAA,cAAGE,cAAc,GAAAF,EAAA;IACrBG,IAAI,GAAAC,MAAA,CACPb,KAAK,EAXH,kIAWL,CADU;EAEX,OACIN,KAAA,CAAAoB,aAAA,CAACnB,QAAQ;IACLM,QAAQ,EAAEA,QAAQ;IAClBC,EAAE,EAAEA,EAAE;IACNC,YAAY,EAAEA,YAAY;IAC1BC,eAAe,EAAEA,eAAe;IAChCC,YAAY,EAAEA,YAAY;IAC1BC,QAAQ,EAAEA,QAAQ;IAClBC,SAAS,EAAEA,SAAS;IACpBC,qBAAqB,EAAEA,qBAAqB;IAC5CE,OAAO,EAAEA;EAAO,GAEhBhB,KAAA,CAAAoB,aAAA,CAACjB,QAAQ,EAAAkB,QAAA,KAAKH,IAAI,EAAI,CACf;AAEnB,CAAC;AAMD,IAAMD,cAAc,GAAGjB,KAAA,CAAAoB,aAAA,CAAChB,OAAO,OAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}