{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport { Navigate } from 'react-router';\nimport { useCanAccess } from './useCanAccess';\nimport { useBasename } from '../routing';\n/**\n * A component that only displays its children after checking whether users are authorized to access the provided resource and action.\n * @param options\n * @param options.action The action to check. One of 'list', 'create', 'edit', 'show', 'delete', or a custom action.\n * @param options.resource The resource to check. e.g. 'posts', 'comments', 'users'\n * @param options.children The component to render if users are authorized.\n * @param options.loading An optional element to render while the authorization is being checked. Defaults to null.\n * @param options.accessDenied An optional element to render if users are denied access. Defaults to null.\n * @param options.error An optional element to render if an error occur while checking users access rights. Redirect users to `/authentication-error` by default.\n */\nexport var CanAccess = function (_a) {\n  var children = _a.children,\n    _b = _a.loading,\n    loading = _b === void 0 ? null : _b,\n    _c = _a.accessDenied,\n    accessDenied = _c === void 0 ? null : _c,\n    _d = _a.error,\n    errorElement = _d === void 0 ? DEFAULT_ERROR : _d,\n    props = __rest(_a, [\"children\", \"loading\", \"accessDenied\", \"error\"]);\n  var _e = useCanAccess(props),\n    canAccess = _e.canAccess,\n    error = _e.error,\n    isPending = _e.isPending;\n  if (isPending) {\n    return loading;\n  }\n  if (error) {\n    return errorElement;\n  }\n  if (canAccess === false) {\n    return accessDenied;\n  }\n  return children;\n};\nvar CanAccessDefaultError = function () {\n  var basename = useBasename();\n  return React.createElement(Navigate, {\n    to: \"\".concat(basename, \"/authentication-error\")\n  });\n};\nvar DEFAULT_ERROR = React.createElement(CanAccessDefaultError, null);","map":{"version":3,"names":["React","Navigate","useCanAccess","useBasename","CanAccess","_a","children","_b","loading","_c","accessDenied","_d","error","errorElement","DEFAULT_ERROR","props","__rest","_e","canAccess","isPending","CanAccessDefaultError","basename","createElement","to","concat"],"sources":["/home/diarietou/Bureau/afterSA/test/testfront/react-admin-test/node_modules/ra-core/src/auth/CanAccess.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Navigate } from 'react-router';\nimport { useCanAccess, UseCanAccessOptions } from './useCanAccess';\nimport { RaRecord } from '../types';\nimport { useBasename } from '../routing';\n\n/**\n * A component that only displays its children after checking whether users are authorized to access the provided resource and action.\n * @param options\n * @param options.action The action to check. One of 'list', 'create', 'edit', 'show', 'delete', or a custom action.\n * @param options.resource The resource to check. e.g. 'posts', 'comments', 'users'\n * @param options.children The component to render if users are authorized.\n * @param options.loading An optional element to render while the authorization is being checked. Defaults to null.\n * @param options.accessDenied An optional element to render if users are denied access. Defaults to null.\n * @param options.error An optional element to render if an error occur while checking users access rights. Redirect users to `/authentication-error` by default.\n */\nexport const CanAccess = <\n    RecordType extends RaRecord | Omit<RaRecord, 'id'> = RaRecord,\n    ErrorType extends Error = Error,\n>({\n    children,\n    loading = null,\n    accessDenied = null,\n    error: errorElement = DEFAULT_ERROR,\n    ...props\n}: CanAccessProps<RecordType, ErrorType>) => {\n    const { canAccess, error, isPending } = useCanAccess(props);\n\n    if (isPending) {\n        return loading;\n    }\n\n    if (error) {\n        return errorElement;\n    }\n\n    if (canAccess === false) {\n        return accessDenied;\n    }\n\n    return children;\n};\n\nexport interface CanAccessProps<\n    RecordType extends RaRecord | Omit<RaRecord, 'id'> = RaRecord,\n    ErrorType extends Error = Error,\n> extends UseCanAccessOptions<RecordType, ErrorType> {\n    children: React.ReactNode;\n    loading?: React.ReactNode;\n    accessDenied?: React.ReactNode;\n    error?: React.ReactNode;\n}\n\nconst CanAccessDefaultError = () => {\n    const basename = useBasename();\n    return <Navigate to={`${basename}/authentication-error`} />;\n};\n\nconst DEFAULT_ERROR = <CanAccessDefaultError />;\n"],"mappings":";;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,QAAQ,QAAQ,cAAc;AACvC,SAASC,YAAY,QAA6B,gBAAgB;AAElE,SAASC,WAAW,QAAQ,YAAY;AAExC;;;;;;;;;;AAUA,OAAO,IAAMC,SAAS,GAAG,SAAAA,CAGvBC,EAMsC;EALpC,IAAAC,QAAQ,GAAAD,EAAA,CAAAC,QAAA;IACRC,EAAA,GAAAF,EAAA,CAAAG,OAAc;IAAdA,OAAO,GAAAD,EAAA,cAAG,IAAI,GAAAA,EAAA;IACdE,EAAA,GAAAJ,EAAA,CAAAK,YAAmB;IAAnBA,YAAY,GAAAD,EAAA,cAAG,IAAI,GAAAA,EAAA;IACnBE,EAAA,GAAAN,EAAA,CAAAO,KAAmC;IAA5BC,YAAY,GAAAF,EAAA,cAAGG,aAAa,GAAAH,EAAA;IAChCI,KAAK,GAAAC,MAAA,CAAAX,EAAA,EALV,gDAMD,CADW;EAEF,IAAAY,EAAA,GAAkCf,YAAY,CAACa,KAAK,CAAC;IAAnDG,SAAS,GAAAD,EAAA,CAAAC,SAAA;IAAEN,KAAK,GAAAK,EAAA,CAAAL,KAAA;IAAEO,SAAS,GAAAF,EAAA,CAAAE,SAAwB;EAE3D,IAAIA,SAAS,EAAE;IACX,OAAOX,OAAO;;EAGlB,IAAII,KAAK,EAAE;IACP,OAAOC,YAAY;;EAGvB,IAAIK,SAAS,KAAK,KAAK,EAAE;IACrB,OAAOR,YAAY;;EAGvB,OAAOJ,QAAQ;AACnB,CAAC;AAYD,IAAMc,qBAAqB,GAAG,SAAAA,CAAA;EAC1B,IAAMC,QAAQ,GAAGlB,WAAW,EAAE;EAC9B,OAAOH,KAAA,CAAAsB,aAAA,CAACrB,QAAQ;IAACsB,EAAE,EAAE,GAAAC,MAAA,CAAGH,QAAQ;EAAuB,EAAI;AAC/D,CAAC;AAED,IAAMP,aAAa,GAAGd,KAAA,CAAAsB,aAAA,CAACF,qBAAqB,OAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}