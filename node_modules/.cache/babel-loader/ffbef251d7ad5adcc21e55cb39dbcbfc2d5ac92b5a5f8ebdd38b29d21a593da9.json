{"ast":null,"code":"import { useCanAccessResources } from '../auth/useCanAccessResources';\nimport { useAuthenticated } from '../auth';\nimport { useResourceDefinitions } from './useResourceDefinitions';\n/**\n * A hook that returns the first resource for which users have access to the list page.\n * It calls the `authProvider.canAccess` if available to check the permissions.\n */\nexport var useFirstResourceWithListAccess = function () {\n  var isPendingAuthenticated = useAuthenticated().isPending;\n  var resources = useResourceDefinitions();\n  var resourcesNames = Object.keys(resources).filter(function (resource) {\n    return resources[resource].hasList;\n  });\n  var _a = useCanAccessResources({\n      action: 'list',\n      resources: resourcesNames,\n      enabled: !isPendingAuthenticated\n    }),\n    canAccess = _a.canAccess,\n    isPending = _a.isPending;\n  var firstResourceWithListAccess = resourcesNames.find(function (resource) {\n    return canAccess && canAccess[resource] === true;\n  });\n  return {\n    resource: firstResourceWithListAccess,\n    isPending: isPending\n  };\n};","map":{"version":3,"names":["useCanAccessResources","useAuthenticated","useResourceDefinitions","useFirstResourceWithListAccess","isPendingAuthenticated","isPending","resources","resourcesNames","Object","keys","filter","resource","hasList","_a","action","enabled","canAccess","firstResourceWithListAccess","find"],"sources":["/home/diarietou/Bureau/afterSA/test/testfront/react-admin-test/node_modules/ra-core/src/core/useFirstResourceWithListAccess.tsx"],"sourcesContent":["import { useCanAccessResources } from '../auth/useCanAccessResources';\nimport { useAuthenticated } from '../auth';\nimport { useResourceDefinitions } from './useResourceDefinitions';\n\n/**\n * A hook that returns the first resource for which users have access to the list page.\n * It calls the `authProvider.canAccess` if available to check the permissions.\n */\nexport const useFirstResourceWithListAccess = () => {\n    const { isPending: isPendingAuthenticated } = useAuthenticated();\n    const resources = useResourceDefinitions();\n    const resourcesNames = Object.keys(resources).filter(\n        resource => resources[resource].hasList\n    );\n\n    const { canAccess, isPending } = useCanAccessResources({\n        action: 'list',\n        resources: resourcesNames,\n        enabled: !isPendingAuthenticated,\n    });\n\n    const firstResourceWithListAccess = resourcesNames.find(\n        resource => canAccess && canAccess[resource] === true\n    );\n\n    return { resource: firstResourceWithListAccess, isPending };\n};\n"],"mappings":"AAAA,SAASA,qBAAqB,QAAQ,+BAA+B;AACrE,SAASC,gBAAgB,QAAQ,SAAS;AAC1C,SAASC,sBAAsB,QAAQ,0BAA0B;AAEjE;;;;AAIA,OAAO,IAAMC,8BAA8B,GAAG,SAAAA,CAAA;EAClC,IAAWC,sBAAsB,GAAKH,gBAAgB,EAAE,CAAAI,SAAvB;EACzC,IAAMC,SAAS,GAAGJ,sBAAsB,EAAE;EAC1C,IAAMK,cAAc,GAAGC,MAAM,CAACC,IAAI,CAACH,SAAS,CAAC,CAACI,MAAM,CAChD,UAAAC,QAAQ;IAAI,OAAAL,SAAS,CAACK,QAAQ,CAAC,CAACC,OAAO;EAA3B,CAA2B,CAC1C;EAEK,IAAAC,EAAA,GAA2Bb,qBAAqB,CAAC;MACnDc,MAAM,EAAE,MAAM;MACdR,SAAS,EAAEC,cAAc;MACzBQ,OAAO,EAAE,CAACX;KACb,CAAC;IAJMY,SAAS,GAAAH,EAAA,CAAAG,SAAA;IAAEX,SAAS,GAAAQ,EAAA,CAAAR,SAI1B;EAEF,IAAMY,2BAA2B,GAAGV,cAAc,CAACW,IAAI,CACnD,UAAAP,QAAQ;IAAI,OAAAK,SAAS,IAAIA,SAAS,CAACL,QAAQ,CAAC,KAAK,IAAI;EAAzC,CAAyC,CACxD;EAED,OAAO;IAAEA,QAAQ,EAAEM,2BAA2B;IAAEZ,SAAS,EAAAA;EAAA,CAAE;AAC/D,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}