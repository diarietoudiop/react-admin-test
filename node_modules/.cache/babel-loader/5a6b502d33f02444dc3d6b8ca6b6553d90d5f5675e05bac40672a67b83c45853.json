{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (g && (g = 0, op[0] && (_ = 0)), _) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { useQueryClient } from '@tanstack/react-query';\nimport { useNotify } from '../../notification';\nimport { useDataProvider } from '../../dataProvider';\nimport { useRecordSelection } from './useRecordSelection';\nimport { useResourceContext } from '../../core';\nimport { useEvent } from '../../util';\n/**\n * Get a callback to select all records of a resource (capped by the limit parameter)\n *\n * @param {Object} params The hook parameters { resource, sort, filter }\n * @returns {Function} handleSelectAll A function to select all items of a list\n *\n * @example\n * import { List, Datagrid, BulkActionsToolbar, BulkDeleteButton, useListContext, useSelectAll } from 'react-admin';\n *\n * const MySelectAllButton = () => {\n *   const { sort, filter } = useListContext();\n *   const handleSelectAll = useSelectAll({ resource: 'posts', sort, filter });\n *   const handleClick = () => handleSelectAll({\n *       queryOptions: { meta: { foo: 'bar' } },\n *       limit: 250,\n *   });\n *   return <button onClick={handleClick}>Select All</button>;\n * };\n *\n * const PostBulkActionsToolbar = () => (\n *     <BulkActionsToolbar actions={<MySelectAllButton/>}>\n *         <BulkDeleteButton />\n *     </BulkActionsToolbar>\n * );\n *\n * export const PostList = () => (\n *     <List>\n *         <Datagrid bulkActionsToolbar={<PostBulkActionsToolbar />}>\n *             ...\n *         </Datagrid>\n *     </List>\n * );\n */\nexport var useSelectAll = function (params) {\n  var sort = params.sort,\n    filter = params.filter;\n  var resource = useResourceContext(params);\n  if (!resource) {\n    throw new Error('useSelectAll should be used inside a ResourceContextProvider or passed a resource prop');\n  }\n  var dataProvider = useDataProvider();\n  var queryClient = useQueryClient();\n  var _a = useRecordSelection({\n      resource: resource\n    }),\n    select = _a[1].select;\n  var notify = useNotify();\n  var handleSelectAll = useEvent(function (_a) {\n    var _b = _a === void 0 ? {} : _a,\n      _c = _b.queryOptions,\n      queryOptions = _c === void 0 ? {} : _c,\n      _d = _b.limit,\n      limit = _d === void 0 ? 250 : _d;\n    return __awaiter(void 0, void 0, void 0, function () {\n      var meta, onSuccess, onError, otherQueryOptions, results, allIds, error_1;\n      var _e;\n      return __generator(this, function (_f) {\n        switch (_f.label) {\n          case 0:\n            meta = queryOptions.meta, onSuccess = queryOptions.onSuccess, onError = queryOptions.onError, otherQueryOptions = __rest(queryOptions, [\"meta\", \"onSuccess\", \"onError\"]);\n            _f.label = 1;\n          case 1:\n            _f.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, queryClient.fetchQuery(__assign({\n              queryKey: [resource, 'getList', {\n                pagination: {\n                  page: 1,\n                  perPage: limit\n                },\n                sort: sort,\n                filter: filter,\n                meta: meta\n              }],\n              queryFn: function () {\n                return dataProvider.getList(resource, {\n                  pagination: {\n                    page: 1,\n                    perPage: limit\n                  },\n                  sort: sort,\n                  filter: filter,\n                  meta: meta\n                });\n              }\n            }, otherQueryOptions))];\n          case 2:\n            results = _f.sent();\n            allIds = ((_e = results.data) === null || _e === void 0 ? void 0 : _e.map(function (_a) {\n              var id = _a.id;\n              return id;\n            })) || [];\n            select(allIds);\n            if (allIds.length === limit) {\n              notify('ra.message.select_all_limit_reached', {\n                messageArgs: {\n                  max: limit\n                },\n                type: 'warning'\n              });\n            }\n            if (onSuccess) {\n              onSuccess(results);\n            }\n            return [2 /*return*/, results.data];\n          case 3:\n            error_1 = _f.sent();\n            if (onError) {\n              onError(error_1);\n            } else {\n              notify('ra.notification.http_error', {\n                type: 'warning'\n              });\n            }\n            return [3 /*break*/, 4];\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  });\n  return handleSelectAll;\n};","map":{"version":3,"names":["useQueryClient","useNotify","useDataProvider","useRecordSelection","useResourceContext","useEvent","useSelectAll","params","sort","filter","resource","Error","dataProvider","queryClient","_a","select","notify","handleSelectAll","_b","_c","queryOptions","_d","limit","meta","onSuccess","onError","otherQueryOptions","__rest","fetchQuery","__assign","queryKey","pagination","page","perPage","queryFn","getList","results","_f","sent","allIds","_e","data","map","id","length","messageArgs","max","type","error_1"],"sources":["/home/diarietou/Bureau/afterSA/test/testfront/react-admin-test/node_modules/ra-core/src/controller/list/useSelectAll.tsx"],"sourcesContent":["import { useQueryClient } from '@tanstack/react-query';\n\nimport { useNotify } from '../../notification';\nimport { useDataProvider, UseGetListOptions } from '../../dataProvider';\nimport { useRecordSelection } from './useRecordSelection';\nimport { useResourceContext } from '../../core';\nimport { useEvent } from '../../util';\nimport type { FilterPayload, RaRecord, SortPayload } from '../../types';\n\n/**\n * Get a callback to select all records of a resource (capped by the limit parameter)\n *\n * @param {Object} params The hook parameters { resource, sort, filter }\n * @returns {Function} handleSelectAll A function to select all items of a list\n *\n * @example\n * import { List, Datagrid, BulkActionsToolbar, BulkDeleteButton, useListContext, useSelectAll } from 'react-admin';\n *\n * const MySelectAllButton = () => {\n *   const { sort, filter } = useListContext();\n *   const handleSelectAll = useSelectAll({ resource: 'posts', sort, filter });\n *   const handleClick = () => handleSelectAll({\n *       queryOptions: { meta: { foo: 'bar' } },\n *       limit: 250,\n *   });\n *   return <button onClick={handleClick}>Select All</button>;\n * };\n *\n * const PostBulkActionsToolbar = () => (\n *     <BulkActionsToolbar actions={<MySelectAllButton/>}>\n *         <BulkDeleteButton />\n *     </BulkActionsToolbar>\n * );\n *\n * export const PostList = () => (\n *     <List>\n *         <Datagrid bulkActionsToolbar={<PostBulkActionsToolbar />}>\n *             ...\n *         </Datagrid>\n *     </List>\n * );\n */\nexport const useSelectAll = (\n    params: UseSelectAllParams\n): UseSelectAllResult => {\n    const { sort, filter } = params;\n    const resource = useResourceContext(params);\n    if (!resource) {\n        throw new Error(\n            'useSelectAll should be used inside a ResourceContextProvider or passed a resource prop'\n        );\n    }\n    const dataProvider = useDataProvider();\n    const queryClient = useQueryClient();\n    const [, { select }] = useRecordSelection({ resource });\n    const notify = useNotify();\n\n    const handleSelectAll = useEvent(\n        async ({\n            queryOptions = {},\n            limit = 250,\n        }: HandleSelectAllParams = {}) => {\n            const { meta, onSuccess, onError, ...otherQueryOptions } =\n                queryOptions;\n            try {\n                const results = await queryClient.fetchQuery({\n                    queryKey: [\n                        resource,\n                        'getList',\n                        {\n                            pagination: { page: 1, perPage: limit },\n                            sort,\n                            filter,\n                            meta,\n                        },\n                    ],\n                    queryFn: () =>\n                        dataProvider.getList(resource, {\n                            pagination: {\n                                page: 1,\n                                perPage: limit,\n                            },\n                            sort,\n                            filter,\n                            meta,\n                        }),\n                    ...otherQueryOptions,\n                });\n\n                const allIds = results.data?.map(({ id }) => id) || [];\n                select(allIds);\n                if (allIds.length === limit) {\n                    notify('ra.message.select_all_limit_reached', {\n                        messageArgs: { max: limit },\n                        type: 'warning',\n                    });\n                }\n\n                if (onSuccess) {\n                    onSuccess(results);\n                }\n\n                return results.data;\n            } catch (error) {\n                if (onError) {\n                    onError(error);\n                } else {\n                    notify('ra.notification.http_error', { type: 'warning' });\n                }\n            }\n        }\n    );\n    return handleSelectAll;\n};\n\nexport interface UseSelectAllParams {\n    resource?: string;\n    sort?: SortPayload;\n    filter?: FilterPayload;\n}\n\nexport interface HandleSelectAllParams<RecordType extends RaRecord = any> {\n    limit?: number;\n    queryOptions?: UseGetListOptions<RecordType>;\n}\n\nexport type UseSelectAllResult = (options?: HandleSelectAllParams) => void;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}