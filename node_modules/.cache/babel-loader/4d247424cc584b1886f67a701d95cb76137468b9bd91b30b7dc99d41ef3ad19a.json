{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport { useMemo } from 'react';\nimport { useGetPathForRecord } from '../../routing';\nimport { useReference } from '../useReference';\nimport { useFieldValue } from '../../util';\nexport var useReferenceFieldController = function (options) {\n  var link = options.link,\n    reference = options.reference,\n    queryOptions = options.queryOptions;\n  if (!reference) {\n    throw new Error('useReferenceFieldController: missing reference prop. You must provide a reference, e.g. reference=\"posts\".');\n  }\n  var id = useFieldValue(options);\n  var referenceRecordQuery = useReference({\n    reference: reference,\n    id: id,\n    options: __assign(__assign({}, queryOptions), {\n      enabled: ((queryOptions === null || queryOptions === void 0 ? void 0 : queryOptions.enabled) == null || (queryOptions === null || queryOptions === void 0 ? void 0 : queryOptions.enabled) === true) && id != null\n    })\n  });\n  var path = useGetPathForRecord({\n    record: referenceRecordQuery.referenceRecord,\n    resource: reference,\n    link: link\n  });\n  var result = useMemo(function () {\n    return __assign(__assign({}, referenceRecordQuery), {\n      link: path\n    });\n  }, [path, referenceRecordQuery]);\n  return result;\n};","map":{"version":3,"names":["useMemo","useGetPathForRecord","useReference","useFieldValue","useReferenceFieldController","options","link","reference","queryOptions","Error","id","referenceRecordQuery","__assign","enabled","path","record","referenceRecord","resource","result"],"sources":["/home/diarietou/Bureau/afterSA/test/testfront/react-admin-test/node_modules/ra-core/src/controller/field/useReferenceFieldController.ts"],"sourcesContent":["import { useMemo } from 'react';\nimport { UseQueryOptions } from '@tanstack/react-query';\n\nimport { RaRecord } from '../../types';\nimport { LinkToType, useGetPathForRecord } from '../../routing';\nimport { UseReferenceResult, useReference } from '../useReference';\nimport { useFieldValue } from '../../util';\n\nexport const useReferenceFieldController = <\n    ReferenceRecordType extends RaRecord = RaRecord,\n    ErrorType = Error,\n>(\n    options: UseReferenceFieldControllerOptions<ReferenceRecordType, ErrorType>\n): UseReferenceFieldControllerResult<ReferenceRecordType, ErrorType> => {\n    const { link, reference, queryOptions } = options;\n    if (!reference) {\n        throw new Error(\n            'useReferenceFieldController: missing reference prop. You must provide a reference, e.g. reference=\"posts\".'\n        );\n    }\n    const id = useFieldValue(options);\n    const referenceRecordQuery = useReference<ReferenceRecordType, ErrorType>({\n        reference,\n        id,\n        options: {\n            ...queryOptions,\n            enabled:\n                (queryOptions?.enabled == null ||\n                    queryOptions?.enabled === true) &&\n                id != null,\n        },\n    });\n\n    const path = useGetPathForRecord({\n        record: referenceRecordQuery.referenceRecord,\n        resource: reference,\n        link,\n    });\n\n    const result = useMemo(\n        () =>\n            ({\n                ...referenceRecordQuery,\n                link: path,\n            }) as const,\n        [path, referenceRecordQuery]\n    );\n\n    return result;\n};\n\nexport interface UseReferenceFieldControllerOptions<\n    ReferenceRecordType extends RaRecord = RaRecord,\n    ErrorType = Error,\n> {\n    source: string;\n    queryOptions?: Omit<\n        UseQueryOptions<ReferenceRecordType[], ErrorType>,\n        'queryFn' | 'queryKey'\n    >;\n    reference: string;\n    link?: LinkToType<ReferenceRecordType>;\n}\n\nexport interface UseReferenceFieldControllerResult<\n    ReferenceRecordType extends RaRecord = RaRecord,\n    ErrorType = Error,\n> extends UseReferenceResult<ReferenceRecordType, ErrorType> {\n    link?: string | false;\n}\n"],"mappings":";;;;;;;;;;AAAA,SAASA,OAAO,QAAQ,OAAO;AAI/B,SAAqBC,mBAAmB,QAAQ,eAAe;AAC/D,SAA6BC,YAAY,QAAQ,iBAAiB;AAClE,SAASC,aAAa,QAAQ,YAAY;AAE1C,OAAO,IAAMC,2BAA2B,GAAG,SAAAA,CAIvCC,OAA2E;EAEnE,IAAAC,IAAI,GAA8BD,OAAO,CAAAC,IAArC;IAAEC,SAAS,GAAmBF,OAAO,CAAAE,SAA1B;IAAEC,YAAY,GAAKH,OAAO,CAAAG,YAAZ;EACrC,IAAI,CAACD,SAAS,EAAE;IACZ,MAAM,IAAIE,KAAK,CACX,4GAA4G,CAC/G;;EAEL,IAAMC,EAAE,GAAGP,aAAa,CAACE,OAAO,CAAC;EACjC,IAAMM,oBAAoB,GAAGT,YAAY,CAAiC;IACtEK,SAAS,EAAAA,SAAA;IACTG,EAAE,EAAAA,EAAA;IACFL,OAAO,EAAAO,QAAA,CAAAA,QAAA,KACAJ,YAAY;MACfK,OAAO,EACH,CAAC,CAAAL,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAEK,OAAO,KAAI,IAAI,IAC1B,CAAAL,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAEK,OAAO,MAAK,IAAI,KAClCH,EAAE,IAAI;IAAI;GAErB,CAAC;EAEF,IAAMI,IAAI,GAAGb,mBAAmB,CAAC;IAC7Bc,MAAM,EAAEJ,oBAAoB,CAACK,eAAe;IAC5CC,QAAQ,EAAEV,SAAS;IACnBD,IAAI,EAAAA;GACP,CAAC;EAEF,IAAMY,MAAM,GAAGlB,OAAO,CAClB;IACI,OAAAY,QAAA,CAAAA,QAAA,KACOD,oBAAoB;MACvBL,IAAI,EAAEQ;IAAI;EAFd,CAGW,EACf,CAACA,IAAI,EAAEH,oBAAoB,CAAC,CAC/B;EAED,OAAOO,MAAM;AACjB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}