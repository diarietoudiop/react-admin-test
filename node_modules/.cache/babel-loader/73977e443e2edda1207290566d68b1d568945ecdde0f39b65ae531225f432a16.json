{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport { BulkDeleteWithConfirmButton } from './BulkDeleteWithConfirmButton';\nimport { BulkDeleteWithUndoButton } from './BulkDeleteWithUndoButton';\nimport { useCanAccess, useResourceContext } from 'ra-core';\n/**\n * Deletes the selected rows.\n *\n * To be used inside the <Datagrid bulkActionButtons> prop (where it's enabled by default).\n *\n * @example // basic usage\n * import { BulkDeleteButton, BulkExportButton, List, Datagrid } from 'react-admin';\n *\n * const PostBulkActionButtons = () => (\n *     <>\n *         <BulkExportButton />\n *         <BulkDeleteButton />\n *     </>\n * );\n *\n * export const PostList = () => (\n *     <List>\n *        <Datagrid bulkActionButtons={<PostBulkActionButtons />}>\n *             ...\n *       </Datagrid>\n *     </List>\n * );\n */\nexport var BulkDeleteButton = function (_a) {\n  var _b = _a.mutationMode,\n    mutationMode = _b === void 0 ? 'undoable' : _b,\n    props = __rest(_a, [\"mutationMode\"]);\n  var resource = useResourceContext(props);\n  if (!resource) {\n    throw new Error('<BulkDeleteButton> components should be used inside a <Resource> component or provided with a resource prop.');\n  }\n  var _c = useCanAccess({\n      action: 'delete',\n      resource: resource\n    }),\n    canAccess = _c.canAccess,\n    isPending = _c.isPending;\n  if (!canAccess || isPending) {\n    return null;\n  }\n  return mutationMode === 'undoable' ? React.createElement(BulkDeleteWithUndoButton, __assign({}, props)) : React.createElement(BulkDeleteWithConfirmButton, __assign({\n    mutationMode: mutationMode\n  }, props));\n};","map":{"version":3,"names":["React","BulkDeleteWithConfirmButton","BulkDeleteWithUndoButton","useCanAccess","useResourceContext","BulkDeleteButton","_a","_b","mutationMode","props","__rest","resource","Error","_c","action","canAccess","isPending","createElement","__assign"],"sources":["/home/diarietou/Bureau/afterSA/test/testfront/react-admin-test/node_modules/ra-ui-materialui/src/button/BulkDeleteButton.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n    BulkDeleteWithConfirmButton,\n    BulkDeleteWithConfirmButtonProps,\n} from './BulkDeleteWithConfirmButton';\nimport {\n    BulkDeleteWithUndoButton,\n    BulkDeleteWithUndoButtonProps,\n} from './BulkDeleteWithUndoButton';\nimport { MutationMode, useCanAccess, useResourceContext } from 'ra-core';\n\n/**\n * Deletes the selected rows.\n *\n * To be used inside the <Datagrid bulkActionButtons> prop (where it's enabled by default).\n *\n * @example // basic usage\n * import { BulkDeleteButton, BulkExportButton, List, Datagrid } from 'react-admin';\n *\n * const PostBulkActionButtons = () => (\n *     <>\n *         <BulkExportButton />\n *         <BulkDeleteButton />\n *     </>\n * );\n *\n * export const PostList = () => (\n *     <List>\n *        <Datagrid bulkActionButtons={<PostBulkActionButtons />}>\n *             ...\n *       </Datagrid>\n *     </List>\n * );\n */\nexport const BulkDeleteButton = ({\n    mutationMode = 'undoable',\n    ...props\n}: BulkDeleteButtonProps) => {\n    const resource = useResourceContext(props);\n    if (!resource) {\n        throw new Error(\n            '<BulkDeleteButton> components should be used inside a <Resource> component or provided with a resource prop.'\n        );\n    }\n    const { canAccess, isPending } = useCanAccess({\n        action: 'delete',\n        resource,\n    });\n    if (!canAccess || isPending) {\n        return null;\n    }\n    return mutationMode === 'undoable' ? (\n        <BulkDeleteWithUndoButton {...props} />\n    ) : (\n        <BulkDeleteWithConfirmButton mutationMode={mutationMode} {...props} />\n    );\n};\n\ninterface Props {\n    mutationMode?: MutationMode;\n}\n\nexport type BulkDeleteButtonProps = Props &\n    (BulkDeleteWithUndoButtonProps | BulkDeleteWithConfirmButtonProps);\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SACIC,2BAA2B,QAExB,+BAA+B;AACtC,SACIC,wBAAwB,QAErB,4BAA4B;AACnC,SAAuBC,YAAY,EAAEC,kBAAkB,QAAQ,SAAS;AAExE;;;;;;;;;;;;;;;;;;;;;;;AAuBA,OAAO,IAAMC,gBAAgB,GAAG,SAAAA,CAACC,EAGT;EAFpB,IAAAC,EAAA,GAAAD,EAAA,CAAAE,YAAyB;IAAzBA,YAAY,GAAAD,EAAA,cAAG,UAAU,GAAAA,EAAA;IACtBE,KAAK,GAAAC,MAAA,CAAAJ,EAAA,EAFqB,gBAGhC,CADW;EAER,IAAMK,QAAQ,GAAGP,kBAAkB,CAACK,KAAK,CAAC;EAC1C,IAAI,CAACE,QAAQ,EAAE;IACX,MAAM,IAAIC,KAAK,CACX,8GAA8G,CACjH;;EAEC,IAAAC,EAAA,GAA2BV,YAAY,CAAC;MAC1CW,MAAM,EAAE,QAAQ;MAChBH,QAAQ,EAAAA;KACX,CAAC;IAHMI,SAAS,GAAAF,EAAA,CAAAE,SAAA;IAAEC,SAAS,GAAAH,EAAA,CAAAG,SAG1B;EACF,IAAI,CAACD,SAAS,IAAIC,SAAS,EAAE;IACzB,OAAO,IAAI;;EAEf,OAAOR,YAAY,KAAK,UAAU,GAC9BR,KAAA,CAAAiB,aAAA,CAACf,wBAAwB,EAAAgB,QAAA,KAAKT,KAAK,EAAI,GAEvCT,KAAA,CAAAiB,aAAA,CAAChB,2BAA2B,EAAAiB,QAAA;IAACV,YAAY,EAAEA;EAAY,GAAMC,KAAK,EACrE;AACL,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}