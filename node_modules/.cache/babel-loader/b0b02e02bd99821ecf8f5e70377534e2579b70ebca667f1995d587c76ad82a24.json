{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { useQueryClient } from '@tanstack/react-query';\nimport { useResourceContext } from '../core';\nimport useAuthProvider from './useAuthProvider';\n/**\n * A hook that returns true if the authProvider is currently checking the authentication status or the user's access rights.\n * @param params\n * @param params.action The action to check access for\n * @param params.resource The resource to check access for (optional). Defaults to the resource of the current ResourceContext.\n * @returns {boolean} true if the authProvider is currently checking the authentication status or the user's access rights, false otherwise.\n */\nexport var useIsAuthPending = function (params) {\n  var action = params.action,\n    props = __rest(params, [\"action\"]);\n  var queryClient = useQueryClient();\n  var authProvider = useAuthProvider();\n  var resource = useResourceContext(props);\n  if (!authProvider) {\n    return false;\n  }\n  var authQueryState = queryClient.getQueryState(['auth', 'checkAuth', {}]);\n  var canAccessQueryState = queryClient.getQueryState(['auth', 'canAccess', {\n    action: action,\n    resource: resource\n  }]);\n  if ((authQueryState === null || authQueryState === void 0 ? void 0 : authQueryState.status) === 'pending' || authProvider.canAccess && (canAccessQueryState === null || canAccessQueryState === void 0 ? void 0 : canAccessQueryState.status) === 'pending') {\n    return true;\n  }\n  return false;\n};","map":{"version":3,"names":["useQueryClient","useResourceContext","useAuthProvider","useIsAuthPending","params","action","props","__rest","queryClient","authProvider","resource","authQueryState","getQueryState","canAccessQueryState","status","canAccess"],"sources":["/home/diarietou/Bureau/afterSA/test/testfront/react-admin-test/node_modules/ra-core/src/auth/useIsAuthPending.ts"],"sourcesContent":["import { useQueryClient } from '@tanstack/react-query';\nimport { useResourceContext } from '../core';\nimport { HintedString } from '../types';\nimport useAuthProvider from './useAuthProvider';\n\n/**\n * A hook that returns true if the authProvider is currently checking the authentication status or the user's access rights.\n * @param params\n * @param params.action The action to check access for\n * @param params.resource The resource to check access for (optional). Defaults to the resource of the current ResourceContext.\n * @returns {boolean} true if the authProvider is currently checking the authentication status or the user's access rights, false otherwise.\n */\nexport const useIsAuthPending = (params: UseIsAuthPendingParams) => {\n    const { action, ...props } = params;\n    const queryClient = useQueryClient();\n    const authProvider = useAuthProvider();\n    const resource = useResourceContext(props);\n\n    if (!authProvider) {\n        return false;\n    }\n\n    const authQueryState = queryClient.getQueryState(['auth', 'checkAuth', {}]);\n    const canAccessQueryState = queryClient.getQueryState([\n        'auth',\n        'canAccess',\n        { action, resource },\n    ]);\n\n    if (\n        authQueryState?.status === 'pending' ||\n        (authProvider.canAccess && canAccessQueryState?.status === 'pending')\n    ) {\n        return true;\n    }\n\n    return false;\n};\n\nexport type UseIsAuthPendingParams = {\n    resource?: string;\n    action: HintedString<'list' | 'create' | 'edit' | 'show' | 'delete'>;\n};\n"],"mappings":";;;;;;;;AAAA,SAASA,cAAc,QAAQ,uBAAuB;AACtD,SAASC,kBAAkB,QAAQ,SAAS;AAE5C,OAAOC,eAAe,MAAM,mBAAmB;AAE/C;;;;;;;AAOA,OAAO,IAAMC,gBAAgB,GAAG,SAAAA,CAACC,MAA8B;EACnD,IAAAC,MAAM,GAAeD,MAAM,CAAAC,MAArB;IAAKC,KAAK,GAAAC,MAAA,CAAKH,MAAM,EAA7B,UAAoB,CAAF;EACxB,IAAMI,WAAW,GAAGR,cAAc,EAAE;EACpC,IAAMS,YAAY,GAAGP,eAAe,EAAE;EACtC,IAAMQ,QAAQ,GAAGT,kBAAkB,CAACK,KAAK,CAAC;EAE1C,IAAI,CAACG,YAAY,EAAE;IACf,OAAO,KAAK;;EAGhB,IAAME,cAAc,GAAGH,WAAW,CAACI,aAAa,CAAC,CAAC,MAAM,EAAE,WAAW,EAAE,EAAE,CAAC,CAAC;EAC3E,IAAMC,mBAAmB,GAAGL,WAAW,CAACI,aAAa,CAAC,CAClD,MAAM,EACN,WAAW,EACX;IAAEP,MAAM,EAAAA,MAAA;IAAEK,QAAQ,EAAAA;EAAA,CAAE,CACvB,CAAC;EAEF,IACI,CAAAC,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEG,MAAM,MAAK,SAAS,IACnCL,YAAY,CAACM,SAAS,IAAI,CAAAF,mBAAmB,aAAnBA,mBAAmB,uBAAnBA,mBAAmB,CAAEC,MAAM,MAAK,SAAU,EACvE;IACE,OAAO,IAAI;;EAGf,OAAO,KAAK;AAChB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}