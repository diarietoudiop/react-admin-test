{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport isEqual from 'lodash/isEqual';\nimport cloneDeep from 'lodash/cloneDeep';\nimport get from 'lodash/get';\nimport unset from 'lodash/unset';\nimport { useEffect } from 'react';\nimport { FormProvider, useForm } from 'react-hook-form';\nimport { SourceContextProvider, useResourceContext } from '../core';\nimport { FormGroupsProvider, getSimpleValidationResolver } from '.';\nimport { useDebouncedEvent } from '../util';\nimport { useListContext } from '../controller/list/useListContext';\n/**\n * This component offers a convenient way to create a form that automatically\n * updates the filters when the user changes its child input values.\n *\n * It fits nicely alongside a `<FilterList>` component, but you can also use it\n * at other places to create your own filter UI.\n *\n * @example\n * import MailIcon from '@mui/icons-material/MailOutline';\n * import TitleIcon from '@mui/icons-material/Title';\n * import { Card, CardContent } from '@mui/material';\n * import * as React from 'react';\n * import {\n *     FilterLiveForm,\n *     FilterList,\n *     FilterListItem,\n *     FilterListSection,\n *     TextInput,\n * } from 'react-admin';\n *\n * export const BookListAside = () => (\n *     <Card sx={{ order: -1, mr: 2, mt: 6, width: 250, height: 'fit-content' }}>\n *         <CardContent>\n *             <FilterList label=\"Subscribed to newsletter\" icon={<MailIcon />}>\n *                 <FilterListItem label=\"Yes\" value={{ has_newsletter: true }} />\n *                 <FilterListItem label=\"No\" value={{ has_newsletter: false }} />\n *             </FilterList>\n *             <FilterListSection label=\"Title\" icon={<TitleIcon />}>\n *                 <FilterLiveForm>\n *                     <TextInput source=\"title\" resettable helperText={false} />\n *                 </FilterLiveForm>\n *             </FilterListSection>\n *         </CardContent>\n *     </Card>\n * );\n */\nexport var FilterLiveForm = function (props) {\n  var _a = useListContext(),\n    filterValues = _a.filterValues,\n    setFilters = _a.setFilters;\n  var resource = useResourceContext(props);\n  var _b = props.debounce,\n    debounce = _b === void 0 ? 500 : _b,\n    resolver = props.resolver,\n    validate = props.validate,\n    children = props.children,\n    _c = props.formComponent,\n    Component = _c === void 0 ? HTMLForm : _c,\n    rest = __rest(props, [\"debounce\", \"resolver\", \"validate\", \"children\", \"formComponent\"]);\n  var finalResolver = resolver ? resolver : validate ? getSimpleValidationResolver(validate) : undefined;\n  var formContext = useForm(__assign({\n    mode: 'onChange',\n    defaultValues: filterValues,\n    resolver: finalResolver\n  }, rest));\n  var handleSubmit = formContext.handleSubmit,\n    getValues = formContext.getValues,\n    reset = formContext.reset,\n    watch = formContext.watch,\n    formState = formContext.formState;\n  var isValid = formState.isValid;\n  // Ref tracking if there are internal changes pending, i.e. changes that\n  // should not trigger a reset\n  var formChangesPending = React.useRef(false);\n  // Reapply filterValues when they change externally\n  useEffect(function () {\n    var newValues = getFilterFormValues(getValues(), filterValues);\n    var previousValues = getValues();\n    if (formChangesPending.current) {\n      // The effect was triggered by a form change (i.e. internal change),\n      // so we don't need to reset the form\n      formChangesPending.current = false;\n      return;\n    }\n    if (!isEqual(newValues, previousValues)) {\n      reset(newValues);\n    }\n    // The reference to the filterValues object is not updated when it changes,\n    // so we must stringify it to compare it by value.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [JSON.stringify(filterValues), getValues, reset]);\n  var onSubmit = function (values) {\n    // Do not call setFilters if the form is invalid\n    if (!isValid) {\n      return;\n    }\n    formChangesPending.current = true;\n    setFilters(__assign(__assign({}, filterValues), values));\n  };\n  var debouncedOnSubmit = useDebouncedEvent(onSubmit, debounce || 0);\n  // Submit the form on values change\n  useEffect(function () {\n    var unsubscribe = watch(function (values, _a) {\n      var name = _a.name;\n      // Check that the name is present to avoid setting filters when\n      // watch was triggered by a reset\n      if (name) {\n        if (get(values, name) === '') {\n          var newValues = cloneDeep(values);\n          unset(newValues, name);\n          debouncedOnSubmit(newValues);\n        } else {\n          debouncedOnSubmit(values);\n        }\n      }\n    }).unsubscribe;\n    return function () {\n      return unsubscribe();\n    };\n  }, [watch, debouncedOnSubmit]);\n  var sourceContext = React.useMemo(function () {\n    return {\n      getSource: function (source) {\n        return source;\n      },\n      getLabel: function (source) {\n        return \"resources.\".concat(resource, \".fields.\").concat(source);\n      }\n    };\n  }, [resource]);\n  return React.createElement(FormProvider, __assign({}, formContext), React.createElement(FormGroupsProvider, null, React.createElement(SourceContextProvider, {\n    value: sourceContext\n  }, React.createElement(Component, {\n    onSubmit: handleSubmit(onSubmit)\n  }, children))));\n};\nvar HTMLForm = function (props) {\n  return React.createElement(\"form\", __assign({}, props));\n};\n/**\n * Because we are using controlled inputs with react-hook-form, we must provide a default value\n * for each input when resetting the form. (see https://react-hook-form.com/docs/useform/reset).\n * To ensure we don't provide undefined which will result to the current input value being reapplied\n * and due to the dynamic nature of the filter form, we rebuild the filter form values from its current\n * values and make sure to pass at least an empty string for each input.\n */\nexport var getFilterFormValues = function (formValues, filterValues) {\n  var _a;\n  return Object.keys(formValues).reduce(function (acc, key) {\n    acc[key] = getInputValue(formValues, key, filterValues);\n    return acc;\n  }, (_a = cloneDeep(filterValues)) !== null && _a !== void 0 ? _a : {});\n};\nvar getInputValue = function (formValues, key, filterValues) {\n  if (formValues[key] === undefined || formValues[key] === null) {\n    return get(filterValues, key, '');\n  }\n  if (Array.isArray(formValues[key])) {\n    return get(filterValues, key, '');\n  }\n  if (formValues[key] instanceof Date) {\n    return get(filterValues, key, '');\n  }\n  if (typeof formValues[key] === 'object') {\n    var inputValues = Object.keys(formValues[key]).reduce(function (acc, innerKey) {\n      var _a;\n      var nestedInputValue = getInputValue(formValues[key], innerKey, (_a = (filterValues || {})[key]) !== null && _a !== void 0 ? _a : {});\n      acc[innerKey] = nestedInputValue;\n      return acc;\n    }, {});\n    if (!Object.keys(inputValues).length) return '';\n    return inputValues;\n  }\n  return get(filterValues, key, '');\n};","map":{"version":3,"names":["React","isEqual","cloneDeep","get","unset","useEffect","FormProvider","useForm","SourceContextProvider","useResourceContext","FormGroupsProvider","getSimpleValidationResolver","useDebouncedEvent","useListContext","FilterLiveForm","props","_a","filterValues","setFilters","resource","_b","debounce","resolver","validate","children","_c","formComponent","Component","HTMLForm","rest","__rest","finalResolver","undefined","formContext","__assign","mode","defaultValues","handleSubmit","getValues","reset","watch","formState","isValid","formChangesPending","useRef","newValues","getFilterFormValues","previousValues","current","JSON","stringify","onSubmit","values","debouncedOnSubmit","unsubscribe","name","sourceContext","useMemo","getSource","source","getLabel","concat","createElement","value","formValues","Object","keys","reduce","acc","key","getInputValue","Array","isArray","Date","inputValues","innerKey","nestedInputValue","length"],"sources":["/home/diarietou/Bureau/afterSA/test/testfront/react-admin-test/node_modules/ra-core/src/form/FilterLiveForm.tsx"],"sourcesContent":["import * as React from 'react';\nimport isEqual from 'lodash/isEqual';\nimport cloneDeep from 'lodash/cloneDeep';\nimport get from 'lodash/get';\nimport unset from 'lodash/unset';\nimport { ReactNode, useEffect } from 'react';\nimport { FormProvider, useForm, UseFormProps } from 'react-hook-form';\nimport {\n    SourceContextProvider,\n    SourceContextValue,\n    useResourceContext,\n} from '../core';\nimport {\n    FormGroupsProvider,\n    getSimpleValidationResolver,\n    ValidateForm,\n} from '.';\nimport { useDebouncedEvent } from '../util';\nimport { useListContext } from '../controller/list/useListContext';\n\n/**\n * This component offers a convenient way to create a form that automatically\n * updates the filters when the user changes its child input values.\n *\n * It fits nicely alongside a `<FilterList>` component, but you can also use it\n * at other places to create your own filter UI.\n *\n * @example\n * import MailIcon from '@mui/icons-material/MailOutline';\n * import TitleIcon from '@mui/icons-material/Title';\n * import { Card, CardContent } from '@mui/material';\n * import * as React from 'react';\n * import {\n *     FilterLiveForm,\n *     FilterList,\n *     FilterListItem,\n *     FilterListSection,\n *     TextInput,\n * } from 'react-admin';\n *\n * export const BookListAside = () => (\n *     <Card sx={{ order: -1, mr: 2, mt: 6, width: 250, height: 'fit-content' }}>\n *         <CardContent>\n *             <FilterList label=\"Subscribed to newsletter\" icon={<MailIcon />}>\n *                 <FilterListItem label=\"Yes\" value={{ has_newsletter: true }} />\n *                 <FilterListItem label=\"No\" value={{ has_newsletter: false }} />\n *             </FilterList>\n *             <FilterListSection label=\"Title\" icon={<TitleIcon />}>\n *                 <FilterLiveForm>\n *                     <TextInput source=\"title\" resettable helperText={false} />\n *                 </FilterLiveForm>\n *             </FilterListSection>\n *         </CardContent>\n *     </Card>\n * );\n */\nexport const FilterLiveForm = (props: FilterLiveFormProps) => {\n    const { filterValues, setFilters } = useListContext();\n    const resource = useResourceContext(props);\n\n    const {\n        debounce = 500,\n        resolver,\n        validate,\n        children,\n        formComponent: Component = HTMLForm,\n        ...rest\n    } = props;\n\n    const finalResolver = resolver\n        ? resolver\n        : validate\n          ? getSimpleValidationResolver(validate)\n          : undefined;\n\n    const formContext = useForm({\n        mode: 'onChange',\n        defaultValues: filterValues,\n        resolver: finalResolver,\n        ...rest,\n    });\n    const { handleSubmit, getValues, reset, watch, formState } = formContext;\n    const { isValid } = formState;\n\n    // Ref tracking if there are internal changes pending, i.e. changes that\n    // should not trigger a reset\n    const formChangesPending = React.useRef(false);\n\n    // Reapply filterValues when they change externally\n    useEffect(() => {\n        const newValues = getFilterFormValues(getValues(), filterValues);\n        const previousValues = getValues();\n        if (formChangesPending.current) {\n            // The effect was triggered by a form change (i.e. internal change),\n            // so we don't need to reset the form\n            formChangesPending.current = false;\n            return;\n        }\n        if (!isEqual(newValues, previousValues)) {\n            reset(newValues);\n        }\n        // The reference to the filterValues object is not updated when it changes,\n        // so we must stringify it to compare it by value.\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [JSON.stringify(filterValues), getValues, reset]);\n\n    const onSubmit = (values: any): void => {\n        // Do not call setFilters if the form is invalid\n        if (!isValid) {\n            return;\n        }\n        formChangesPending.current = true;\n        setFilters({\n            ...filterValues,\n            ...values,\n        });\n    };\n    const debouncedOnSubmit = useDebouncedEvent(onSubmit, debounce || 0);\n\n    // Submit the form on values change\n    useEffect(() => {\n        const { unsubscribe } = watch((values, { name }) => {\n            // Check that the name is present to avoid setting filters when\n            // watch was triggered by a reset\n            if (name) {\n                if (get(values, name) === '') {\n                    const newValues = cloneDeep(values);\n                    unset(newValues, name);\n                    debouncedOnSubmit(newValues);\n                } else {\n                    debouncedOnSubmit(values);\n                }\n            }\n        });\n        return () => unsubscribe();\n    }, [watch, debouncedOnSubmit]);\n\n    const sourceContext = React.useMemo<SourceContextValue>(\n        () => ({\n            getSource: (source: string) => source,\n            getLabel: (source: string) =>\n                `resources.${resource}.fields.${source}`,\n        }),\n        [resource]\n    );\n\n    return (\n        <FormProvider {...formContext}>\n            <FormGroupsProvider>\n                <SourceContextProvider value={sourceContext}>\n                    <Component onSubmit={handleSubmit(onSubmit)}>\n                        {children}\n                    </Component>\n                </SourceContextProvider>\n            </FormGroupsProvider>\n        </FormProvider>\n    );\n};\n\nconst HTMLForm = (props: React.HTMLAttributes<HTMLFormElement>) => (\n    <form {...props} />\n);\n\nexport interface FilterLiveFormProps\n    extends Omit<UseFormProps, 'onSubmit' | 'defaultValues'> {\n    children: ReactNode;\n    validate?: ValidateForm;\n    debounce?: number | false;\n    resource?: string;\n    formComponent?: React.ComponentType<\n        Pick<React.HTMLAttributes<HTMLFormElement>, 'onSubmit'>\n    >;\n}\n\n/**\n * Because we are using controlled inputs with react-hook-form, we must provide a default value\n * for each input when resetting the form. (see https://react-hook-form.com/docs/useform/reset).\n * To ensure we don't provide undefined which will result to the current input value being reapplied\n * and due to the dynamic nature of the filter form, we rebuild the filter form values from its current\n * values and make sure to pass at least an empty string for each input.\n */\nexport const getFilterFormValues = (\n    formValues: Record<string, any>,\n    filterValues: Record<string, any>\n) => {\n    return Object.keys(formValues).reduce(\n        (acc, key) => {\n            acc[key] = getInputValue(formValues, key, filterValues);\n            return acc;\n        },\n        cloneDeep(filterValues) ?? {}\n    );\n};\n\nconst getInputValue = (\n    formValues: Record<string, any>,\n    key: string,\n    filterValues: Record<string, any>\n) => {\n    if (formValues[key] === undefined || formValues[key] === null) {\n        return get(filterValues, key, '');\n    }\n    if (Array.isArray(formValues[key])) {\n        return get(filterValues, key, '');\n    }\n    if (formValues[key] instanceof Date) {\n        return get(filterValues, key, '');\n    }\n    if (typeof formValues[key] === 'object') {\n        const inputValues = Object.keys(formValues[key]).reduce(\n            (acc, innerKey) => {\n                const nestedInputValue = getInputValue(\n                    formValues[key],\n                    innerKey,\n                    (filterValues || {})[key] ?? {}\n                );\n                acc[innerKey] = nestedInputValue;\n                return acc;\n            },\n            {}\n        );\n        if (!Object.keys(inputValues).length) return '';\n        return inputValues;\n    }\n    return get(filterValues, key, '');\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}