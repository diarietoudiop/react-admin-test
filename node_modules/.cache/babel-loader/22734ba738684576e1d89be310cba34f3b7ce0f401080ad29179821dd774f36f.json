{"ast":null,"code":"import { useResourceDefinitions } from './useResourceDefinitions';\nimport { useTranslate } from '../i18n';\nimport { humanize, inflect } from 'inflection';\n/**\n * A hook which returns function to get a translated resource name. It will use the label option of the `Resource` component if it was provided.\n *\n * @returns {GetResourceLabel} A function which takes a resource name and an optional number indicating the number of items (used for pluralization) and returns a translated string.\n * @example\n * const Menu = () => {\n *     const resources = useResourceDefinitions();\n *     const getResourceLabel = useGetResourceLabel();\n *\n *     return (\n *         <ul>\n *             {Object.keys(resources).map(name => (\n *                 <li key={name}>\n *                     {getResourceLabel(name, 2)}\n *                 </li>\n *             ))}\n *         </ul>\n *     )\n * }\n */\nexport var useGetResourceLabel = function () {\n  var translate = useTranslate();\n  var definitions = useResourceDefinitions();\n  return function (resource, count) {\n    if (count === void 0) {\n      count = 2;\n    }\n    var resourceDefinition = definitions[resource];\n    var label = translate(\"resources.\".concat(resource, \".name\"), {\n      smart_count: count,\n      _: resourceDefinition && resourceDefinition.options && resourceDefinition.options.label ? translate(resourceDefinition.options.label, {\n        smart_count: count,\n        _: resourceDefinition.options.label\n      }) : humanize(inflect(resource, count))\n    });\n    return label;\n  };\n};","map":{"version":3,"names":["useResourceDefinitions","useTranslate","humanize","inflect","useGetResourceLabel","translate","definitions","resource","count","resourceDefinition","label","concat","smart_count","_","options"],"sources":["/home/diarietou/Bureau/afterSA/test/testfront/react-admin-test/node_modules/ra-core/src/core/useGetResourceLabel.ts"],"sourcesContent":["import { useResourceDefinitions } from './useResourceDefinitions';\nimport { useTranslate } from '../i18n';\nimport { humanize, inflect } from 'inflection';\n\n/**\n * A hook which returns function to get a translated resource name. It will use the label option of the `Resource` component if it was provided.\n *\n * @returns {GetResourceLabel} A function which takes a resource name and an optional number indicating the number of items (used for pluralization) and returns a translated string.\n * @example\n * const Menu = () => {\n *     const resources = useResourceDefinitions();\n *     const getResourceLabel = useGetResourceLabel();\n *\n *     return (\n *         <ul>\n *             {Object.keys(resources).map(name => (\n *                 <li key={name}>\n *                     {getResourceLabel(name, 2)}\n *                 </li>\n *             ))}\n *         </ul>\n *     )\n * }\n */\nexport const useGetResourceLabel = (): GetResourceLabel => {\n    const translate = useTranslate();\n    const definitions = useResourceDefinitions();\n\n    return (resource: string, count = 2): string => {\n        const resourceDefinition = definitions[resource];\n\n        const label = translate(`resources.${resource}.name`, {\n            smart_count: count,\n            _:\n                resourceDefinition &&\n                resourceDefinition.options &&\n                resourceDefinition.options.label\n                    ? translate(resourceDefinition.options.label, {\n                          smart_count: count,\n                          _: resourceDefinition.options.label,\n                      })\n                    : humanize(inflect(resource, count)),\n        });\n\n        return label;\n    };\n};\n\nexport type GetResourceLabel = (resource: string, count?: number) => string;\n"],"mappings":"AAAA,SAASA,sBAAsB,QAAQ,0BAA0B;AACjE,SAASC,YAAY,QAAQ,SAAS;AACtC,SAASC,QAAQ,EAAEC,OAAO,QAAQ,YAAY;AAE9C;;;;;;;;;;;;;;;;;;;;AAoBA,OAAO,IAAMC,mBAAmB,GAAG,SAAAA,CAAA;EAC/B,IAAMC,SAAS,GAAGJ,YAAY,EAAE;EAChC,IAAMK,WAAW,GAAGN,sBAAsB,EAAE;EAE5C,OAAO,UAACO,QAAgB,EAAEC,KAAS;IAAT,IAAAA,KAAA;MAAAA,KAAA,IAAS;IAAA;IAC/B,IAAMC,kBAAkB,GAAGH,WAAW,CAACC,QAAQ,CAAC;IAEhD,IAAMG,KAAK,GAAGL,SAAS,CAAC,aAAAM,MAAA,CAAaJ,QAAQ,UAAO,EAAE;MAClDK,WAAW,EAAEJ,KAAK;MAClBK,CAAC,EACGJ,kBAAkB,IAClBA,kBAAkB,CAACK,OAAO,IAC1BL,kBAAkB,CAACK,OAAO,CAACJ,KAAK,GAC1BL,SAAS,CAACI,kBAAkB,CAACK,OAAO,CAACJ,KAAK,EAAE;QACxCE,WAAW,EAAEJ,KAAK;QAClBK,CAAC,EAAEJ,kBAAkB,CAACK,OAAO,CAACJ;OACjC,CAAC,GACFR,QAAQ,CAACC,OAAO,CAACI,QAAQ,EAAEC,KAAK,CAAC;KAC9C,CAAC;IAEF,OAAOE,KAAK;EAChB,CAAC;AACL,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}