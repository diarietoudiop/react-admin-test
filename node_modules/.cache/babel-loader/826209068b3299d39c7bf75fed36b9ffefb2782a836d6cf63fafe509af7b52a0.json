{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport { useState, useEffect, useCallback } from 'react';\nimport { Button, Snackbar } from '@mui/material';\nimport clsx from 'clsx';\nimport { useNotificationContext, undoableEventEmitter, useTranslate, useTakeUndoableMutation } from 'ra-core';\nvar defaultAnchorOrigin = {\n  vertical: 'bottom',\n  horizontal: 'center'\n};\n/**\n * Provides a way to show a notification.\n * @see useNotify\n *\n * @example <caption>Basic usage</caption>\n * <Notification />\n *\n * @param props The component props\n * @param {string} props.type The notification type. Defaults to 'info'.\n * @param {number} props.autoHideDuration Duration in milliseconds to wait until hiding a given notification. Defaults to 4000.\n * @param {boolean} props.multiLine Set it to `true` if the notification message should be shown in more than one line.\n */\nexport var Notification = function (props) {\n  var _a;\n  var className = props.className,\n    _b = props.type,\n    type = _b === void 0 ? 'info' : _b,\n    _c = props.autoHideDuration,\n    autoHideDuration = _c === void 0 ? 4000 : _c,\n    _d = props.multiLine,\n    multiLine = _d === void 0 ? false : _d,\n    _e = props.anchorOrigin,\n    anchorOrigin = _e === void 0 ? defaultAnchorOrigin : _e,\n    rest = __rest(props, [\"className\", \"type\", \"autoHideDuration\", \"multiLine\", \"anchorOrigin\"]);\n  var _f = useNotificationContext(),\n    notifications = _f.notifications,\n    takeNotification = _f.takeNotification;\n  var takeMutation = useTakeUndoableMutation();\n  var _g = useState(false),\n    open = _g[0],\n    setOpen = _g[1];\n  var _h = React.useState(undefined),\n    currentNotification = _h[0],\n    setCurrentNotification = _h[1];\n  var translate = useTranslate();\n  useEffect(function () {\n    var _a;\n    if (notifications.length && !currentNotification) {\n      // Set a new snack when we don't have an active one\n      var notification = takeNotification();\n      if (notification) {\n        setCurrentNotification(notification);\n        setOpen(true);\n      }\n    } else if (notifications.length && currentNotification && open) {\n      // Close an active snack when a new one is added\n      setOpen(false);\n    }\n    var beforeunload = function (e) {\n      e.preventDefault();\n      var confirmationMessage = '';\n      e.returnValue = confirmationMessage;\n      return confirmationMessage;\n    };\n    if ((_a = currentNotification === null || currentNotification === void 0 ? void 0 : currentNotification.notificationOptions) === null || _a === void 0 ? void 0 : _a.undoable) {\n      window.addEventListener('beforeunload', beforeunload);\n      return function () {\n        window.removeEventListener('beforeunload', beforeunload);\n      };\n    }\n  }, [notifications, currentNotification, open, takeNotification]);\n  var handleRequestClose = useCallback(function () {\n    setOpen(false);\n  }, [setOpen]);\n  var handleExited = useCallback(function () {\n    var _a;\n    if (currentNotification && ((_a = currentNotification.notificationOptions) === null || _a === void 0 ? void 0 : _a.undoable)) {\n      var mutation = takeMutation();\n      if (mutation) {\n        mutation({\n          isUndo: false\n        });\n      } else {\n        // FIXME kept for BC: remove in v6\n        undoableEventEmitter.emit('end', {\n          isUndo: false\n        });\n      }\n    }\n    setCurrentNotification(undefined);\n  }, [currentNotification, takeMutation]);\n  var handleUndo = useCallback(function () {\n    var mutation = takeMutation();\n    if (mutation) {\n      mutation({\n        isUndo: true\n      });\n    } else {\n      // FIXME kept for BC: remove in v6\n      undoableEventEmitter.emit('end', {\n        isUndo: true\n      });\n    }\n    setOpen(false);\n  }, [takeMutation]);\n  if (!currentNotification) return null;\n  var message = currentNotification.message,\n    typeFromMessage = currentNotification.type,\n    notificationOptions = currentNotification.notificationOptions;\n  var _j = notificationOptions || {},\n    autoHideDurationFromMessage = _j.autoHideDuration,\n    messageArgs = _j.messageArgs,\n    multilineFromMessage = _j.multiLine,\n    undoable = _j.undoable,\n    options = __rest(_j, [\"autoHideDuration\", \"messageArgs\", \"multiLine\", \"undoable\"]);\n  return React.createElement(StyledSnackbar, __assign({\n    className: className,\n    open: open,\n    message: message && typeof message === 'string' && translate(message, messageArgs),\n    autoHideDuration:\n    // Only apply the default autoHideDuration when autoHideDurationFromMessage is undefined\n    // as 0 and null are valid values\n    autoHideDurationFromMessage === undefined ? autoHideDuration : autoHideDurationFromMessage !== null && autoHideDurationFromMessage !== void 0 ? autoHideDurationFromMessage : undefined,\n    disableWindowBlurListener: undoable,\n    TransitionProps: {\n      onExited: handleExited\n    },\n    onClose: handleRequestClose,\n    ContentProps: {\n      className: clsx(NotificationClasses[typeFromMessage || type], (_a = {}, _a[NotificationClasses.multiLine] = multilineFromMessage || multiLine, _a))\n    },\n    action: undoable ? React.createElement(Button, {\n      color: \"primary\",\n      className: NotificationClasses.undo,\n      size: \"small\",\n      onClick: handleUndo\n    }, React.createElement(React.Fragment, null, translate('ra.action.undo'))) : null,\n    anchorOrigin: anchorOrigin\n  }, rest, options), message && typeof message !== 'string' && React.isValidElement(message) ? message : undefined);\n};\nvar PREFIX = 'RaNotification';\nexport var NotificationClasses = {\n  success: \"\".concat(PREFIX, \"-success\"),\n  error: \"\".concat(PREFIX, \"-error\"),\n  warning: \"\".concat(PREFIX, \"-warning\"),\n  undo: \"\".concat(PREFIX, \"-undo\"),\n  multiLine: \"\".concat(PREFIX, \"-multiLine\")\n};\nvar StyledSnackbar = styled(Snackbar, {\n  name: PREFIX,\n  overridesResolver: function (props, styles) {\n    return styles.root;\n  }\n})(function (_a) {\n  var _b;\n  var theme = _a.theme,\n    type = _a.type;\n  return _b = {}, _b[\"& .\".concat(NotificationClasses.success)] = {\n    backgroundColor: theme === null || theme === void 0 ? void 0 : theme.palette.success.main,\n    color: theme === null || theme === void 0 ? void 0 : theme.palette.success.contrastText\n  }, _b[\"& .\".concat(NotificationClasses.error)] = {\n    backgroundColor: theme === null || theme === void 0 ? void 0 : theme.palette.error.main,\n    color: theme === null || theme === void 0 ? void 0 : theme.palette.error.contrastText\n  }, _b[\"& .\".concat(NotificationClasses.warning)] = {\n    backgroundColor: theme === null || theme === void 0 ? void 0 : theme.palette.warning.main,\n    color: theme === null || theme === void 0 ? void 0 : theme.palette.warning.contrastText\n  }, _b[\"& .\".concat(NotificationClasses.undo)] = {\n    color: type === 'success' ? theme === null || theme === void 0 ? void 0 : theme.palette.success.contrastText : theme === null || theme === void 0 ? void 0 : theme.palette.primary.light\n  }, _b[\"& .\".concat(NotificationClasses.multiLine)] = {\n    whiteSpace: 'pre-wrap'\n  }, _b;\n});","map":{"version":3,"names":["React","styled","useState","useEffect","useCallback","Button","Snackbar","clsx","useNotificationContext","undoableEventEmitter","useTranslate","useTakeUndoableMutation","defaultAnchorOrigin","vertical","horizontal","Notification","props","className","_b","type","_c","autoHideDuration","_d","multiLine","_e","anchorOrigin","rest","__rest","_f","notifications","takeNotification","takeMutation","_g","open","setOpen","_h","undefined","currentNotification","setCurrentNotification","translate","length","notification","beforeunload","e","preventDefault","confirmationMessage","returnValue","_a","notificationOptions","undoable","window","addEventListener","removeEventListener","handleRequestClose","handleExited","mutation","isUndo","emit","handleUndo","message","typeFromMessage","_j","autoHideDurationFromMessage","messageArgs","multilineFromMessage","options","createElement","StyledSnackbar","__assign","disableWindowBlurListener","TransitionProps","onExited","onClose","ContentProps","NotificationClasses","action","color","undo","size","onClick","Fragment","isValidElement","PREFIX","success","concat","error","warning","name","overridesResolver","styles","root","theme","backgroundColor","palette","main","contrastText","primary","light","whiteSpace"],"sources":["/home/diarietou/Bureau/afterSA/test/testfront/react-admin-test/node_modules/ra-ui-materialui/src/layout/Notification.tsx"],"sourcesContent":["import * as React from 'react';\nimport { styled, Theme } from '@mui/material/styles';\nimport { useState, useEffect, useCallback } from 'react';\nimport { Button, Snackbar, SnackbarProps, SnackbarOrigin } from '@mui/material';\nimport clsx from 'clsx';\n\nimport {\n    useNotificationContext,\n    undoableEventEmitter,\n    useTranslate,\n    NotificationPayload,\n    useTakeUndoableMutation,\n} from 'ra-core';\n\nconst defaultAnchorOrigin: SnackbarOrigin = {\n    vertical: 'bottom',\n    horizontal: 'center',\n};\n\n/**\n * Provides a way to show a notification.\n * @see useNotify\n *\n * @example <caption>Basic usage</caption>\n * <Notification />\n *\n * @param props The component props\n * @param {string} props.type The notification type. Defaults to 'info'.\n * @param {number} props.autoHideDuration Duration in milliseconds to wait until hiding a given notification. Defaults to 4000.\n * @param {boolean} props.multiLine Set it to `true` if the notification message should be shown in more than one line.\n */\nexport const Notification = (props: NotificationProps) => {\n    const {\n        className,\n        type = 'info',\n        autoHideDuration = 4000,\n        multiLine = false,\n        anchorOrigin = defaultAnchorOrigin,\n        ...rest\n    } = props;\n    const { notifications, takeNotification } = useNotificationContext();\n    const takeMutation = useTakeUndoableMutation();\n    const [open, setOpen] = useState(false);\n    const [currentNotification, setCurrentNotification] = React.useState<\n        NotificationPayload | undefined\n    >(undefined);\n    const translate = useTranslate();\n\n    useEffect(() => {\n        if (notifications.length && !currentNotification) {\n            // Set a new snack when we don't have an active one\n            const notification = takeNotification();\n            if (notification) {\n                setCurrentNotification(notification);\n                setOpen(true);\n            }\n        } else if (notifications.length && currentNotification && open) {\n            // Close an active snack when a new one is added\n            setOpen(false);\n        }\n\n        const beforeunload = (e: BeforeUnloadEvent) => {\n            e.preventDefault();\n            const confirmationMessage = '';\n            e.returnValue = confirmationMessage;\n            return confirmationMessage;\n        };\n\n        if (currentNotification?.notificationOptions?.undoable) {\n            window.addEventListener('beforeunload', beforeunload);\n            return () => {\n                window.removeEventListener('beforeunload', beforeunload);\n            };\n        }\n    }, [notifications, currentNotification, open, takeNotification]);\n\n    const handleRequestClose = useCallback(() => {\n        setOpen(false);\n    }, [setOpen]);\n\n    const handleExited = useCallback(() => {\n        if (\n            currentNotification &&\n            currentNotification.notificationOptions?.undoable\n        ) {\n            const mutation = takeMutation();\n            if (mutation) {\n                mutation({ isUndo: false });\n            } else {\n                // FIXME kept for BC: remove in v6\n                undoableEventEmitter.emit('end', { isUndo: false });\n            }\n        }\n        setCurrentNotification(undefined);\n    }, [currentNotification, takeMutation]);\n\n    const handleUndo = useCallback(() => {\n        const mutation = takeMutation();\n        if (mutation) {\n            mutation({ isUndo: true });\n        } else {\n            // FIXME kept for BC: remove in v6\n            undoableEventEmitter.emit('end', { isUndo: true });\n        }\n        setOpen(false);\n    }, [takeMutation]);\n\n    if (!currentNotification) return null;\n    const {\n        message,\n        type: typeFromMessage,\n        notificationOptions,\n    } = currentNotification;\n    const {\n        autoHideDuration: autoHideDurationFromMessage,\n        messageArgs,\n        multiLine: multilineFromMessage,\n        undoable,\n        ...options\n    } = notificationOptions || {};\n\n    return (\n        <StyledSnackbar\n            className={className}\n            open={open}\n            message={\n                message &&\n                typeof message === 'string' &&\n                translate(message, messageArgs)\n            }\n            autoHideDuration={\n                // Only apply the default autoHideDuration when autoHideDurationFromMessage is undefined\n                // as 0 and null are valid values\n                autoHideDurationFromMessage === undefined\n                    ? autoHideDuration\n                    : autoHideDurationFromMessage ?? undefined\n            }\n            disableWindowBlurListener={undoable}\n            TransitionProps={{ onExited: handleExited }}\n            onClose={handleRequestClose}\n            ContentProps={{\n                className: clsx(NotificationClasses[typeFromMessage || type], {\n                    [NotificationClasses.multiLine]:\n                        multilineFromMessage || multiLine,\n                }),\n            }}\n            action={\n                undoable ? (\n                    <Button\n                        color=\"primary\"\n                        className={NotificationClasses.undo}\n                        size=\"small\"\n                        onClick={handleUndo}\n                    >\n                        <>{translate('ra.action.undo')}</>\n                    </Button>\n                ) : null\n            }\n            anchorOrigin={anchorOrigin}\n            {...rest}\n            {...options}\n        >\n            {message &&\n            typeof message !== 'string' &&\n            React.isValidElement(message)\n                ? message\n                : undefined}\n        </StyledSnackbar>\n    );\n};\n\nconst PREFIX = 'RaNotification';\n\nexport const NotificationClasses = {\n    success: `${PREFIX}-success`,\n    error: `${PREFIX}-error`,\n    warning: `${PREFIX}-warning`,\n    undo: `${PREFIX}-undo`,\n    multiLine: `${PREFIX}-multiLine`,\n};\n\nconst StyledSnackbar = styled(Snackbar, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme, type }: NotificationProps & { theme?: Theme }) => ({\n    [`& .${NotificationClasses.success}`]: {\n        backgroundColor: theme?.palette.success.main,\n        color: theme?.palette.success.contrastText,\n    },\n\n    [`& .${NotificationClasses.error}`]: {\n        backgroundColor: theme?.palette.error.main,\n        color: theme?.palette.error.contrastText,\n    },\n\n    [`& .${NotificationClasses.warning}`]: {\n        backgroundColor: theme?.palette.warning.main,\n        color: theme?.palette.warning.contrastText,\n    },\n\n    [`& .${NotificationClasses.undo}`]: {\n        color:\n            type === 'success'\n                ? theme?.palette.success.contrastText\n                : theme?.palette.primary.light,\n    },\n    [`& .${NotificationClasses.multiLine}`]: {\n        whiteSpace: 'pre-wrap',\n    },\n}));\n\nexport interface NotificationProps extends Omit<SnackbarProps, 'open'> {\n    type?: string;\n    autoHideDuration?: number;\n    multiLine?: boolean;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}