{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { useEffect, useRef } from 'react';\nimport { useQuery, useQueryClient } from '@tanstack/react-query';\nimport { useDataProvider } from './useDataProvider';\nimport { useEvent } from '../util';\n/**\n * Call the dataProvider.getMany() method and return the resolved result\n * as well as the loading state.\n *\n * The return value updates according to the request state:\n *\n * - start: { isPending: true, refetch }\n * - success: { data: [data from store], isPending: false, refetch }\n * - error: { error: [error from response], isPending: false, refetch }\n *\n * This hook will return the cached result when called a second time\n * with the same parameters, until the response arrives.\n *\n * @param {string} resource The resource name, e.g. 'posts'\n * @param {Params} params The getMany parameters { ids, meta }\n * @param {Object} options Options object to pass to the queryClient.\n * May include side effects to be executed upon success or failure, e.g. { onSuccess: () => { refresh(); } }\n *\n * @typedef Params\n * @prop params.ids The ids to get, e.g. [123, 456, 789]\n * @prop params.meta Optional meta parameters\n *\n * @returns The current request state. Destructure as { data, error, isPending, refetch }.\n *\n * @example\n *\n * import { useGetMany } from 'react-admin';\n *\n * const PostTags = ({ post }) => {\n *     const { data, isPending, error } = useGetMany(\n *         'tags',\n *         { ids: post.tags },\n *     );\n *     if (isPending) { return <Loading />; }\n *     if (error) { return <p>ERROR</p>; }\n *     return <ul>{data.map(tag =>\n *         <li key={tag.id}>{tag.name}</li>\n *     )}</ul>;\n * };\n */\nexport var useGetMany = function (resource, params, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var ids = params.ids,\n    meta = params.meta;\n  var dataProvider = useDataProvider();\n  var queryClient = useQueryClient();\n  var _a = options.onError,\n    onError = _a === void 0 ? noop : _a,\n    _b = options.onSuccess,\n    onSuccess = _b === void 0 ? noop : _b,\n    _c = options.onSettled,\n    onSettled = _c === void 0 ? noop : _c,\n    enabled = options.enabled,\n    queryOptions = __rest(options, [\"onError\", \"onSuccess\", \"onSettled\", \"enabled\"]);\n  var onSuccessEvent = useEvent(onSuccess);\n  var onErrorEvent = useEvent(onError);\n  var onSettledEvent = useEvent(onSettled);\n  var result = useQuery(__assign({\n    queryKey: [resource, 'getMany', {\n      ids: !ids || ids.length === 0 ? [] : ids.map(function (id) {\n        return String(id);\n      }),\n      meta: meta\n    }],\n    queryFn: function (queryParams) {\n      if (!ids || ids.length === 0) {\n        // no need to call the dataProvider\n        return Promise.resolve([]);\n      }\n      return dataProvider.getMany(resource, {\n        ids: ids,\n        meta: meta,\n        signal: dataProvider.supportAbortSignal === true ? queryParams.signal : undefined\n      }).then(function (_a) {\n        var data = _a.data;\n        return data;\n      });\n    },\n    placeholderData: function () {\n      var records = !ids || ids.length === 0 ? [] : ids.map(function (id) {\n        return queryClient.getQueryData([resource, 'getOne', {\n          id: String(id),\n          meta: meta\n        }]);\n      });\n      if (records.some(function (record) {\n        return record === undefined;\n      })) {\n        return undefined;\n      } else {\n        return records;\n      }\n    },\n    retry: false,\n    enabled: enabled !== null && enabled !== void 0 ? enabled : ids != null\n  }, queryOptions));\n  var metaValue = useRef(meta);\n  var resourceValue = useRef(resource);\n  useEffect(function () {\n    metaValue.current = meta;\n  }, [meta]);\n  useEffect(function () {\n    resourceValue.current = resource;\n  }, [resource]);\n  useEffect(function () {\n    if (result.data === undefined || result.error != null || result.isFetching) return;\n    // optimistically populate the getOne cache\n    result.data.forEach(function (record) {\n      queryClient.setQueryData([resourceValue.current, 'getOne', {\n        id: String(record.id),\n        meta: metaValue.current\n      }], function (oldRecord) {\n        return oldRecord !== null && oldRecord !== void 0 ? oldRecord : record;\n      });\n    });\n    onSuccessEvent(result.data);\n  }, [queryClient, onSuccessEvent, result.data, result.error, result.isFetching]);\n  useEffect(function () {\n    if (result.error == null || result.isFetching) return;\n    onErrorEvent(result.error);\n  }, [onErrorEvent, result.error, result.isFetching]);\n  useEffect(function () {\n    if (result.status === 'pending' || result.isFetching) return;\n    onSettledEvent(result.data, result.error);\n  }, [onSettledEvent, result.data, result.error, result.status, result.isFetching]);\n  return result;\n};\nvar noop = function () {\n  return undefined;\n};","map":{"version":3,"names":["useEffect","useRef","useQuery","useQueryClient","useDataProvider","useEvent","useGetMany","resource","params","options","ids","meta","dataProvider","queryClient","_a","onError","noop","_b","onSuccess","_c","onSettled","enabled","queryOptions","__rest","onSuccessEvent","onErrorEvent","onSettledEvent","result","__assign","queryKey","length","map","id","String","queryFn","queryParams","Promise","resolve","getMany","signal","supportAbortSignal","undefined","then","data","placeholderData","records","getQueryData","some","record","retry","metaValue","resourceValue","current","error","isFetching","forEach","setQueryData","oldRecord","status"],"sources":["/home/diarietou/Bureau/afterSA/test/testfront/react-admin-test/node_modules/ra-core/src/dataProvider/useGetMany.ts"],"sourcesContent":["import { useEffect, useRef } from 'react';\nimport {\n    useQuery,\n    UseQueryOptions,\n    UseQueryResult,\n    useQueryClient,\n} from '@tanstack/react-query';\n\nimport { RaRecord, GetManyParams } from '../types';\nimport { useDataProvider } from './useDataProvider';\nimport { useEvent } from '../util';\n\n/**\n * Call the dataProvider.getMany() method and return the resolved result\n * as well as the loading state.\n *\n * The return value updates according to the request state:\n *\n * - start: { isPending: true, refetch }\n * - success: { data: [data from store], isPending: false, refetch }\n * - error: { error: [error from response], isPending: false, refetch }\n *\n * This hook will return the cached result when called a second time\n * with the same parameters, until the response arrives.\n *\n * @param {string} resource The resource name, e.g. 'posts'\n * @param {Params} params The getMany parameters { ids, meta }\n * @param {Object} options Options object to pass to the queryClient.\n * May include side effects to be executed upon success or failure, e.g. { onSuccess: () => { refresh(); } }\n *\n * @typedef Params\n * @prop params.ids The ids to get, e.g. [123, 456, 789]\n * @prop params.meta Optional meta parameters\n *\n * @returns The current request state. Destructure as { data, error, isPending, refetch }.\n *\n * @example\n *\n * import { useGetMany } from 'react-admin';\n *\n * const PostTags = ({ post }) => {\n *     const { data, isPending, error } = useGetMany(\n *         'tags',\n *         { ids: post.tags },\n *     );\n *     if (isPending) { return <Loading />; }\n *     if (error) { return <p>ERROR</p>; }\n *     return <ul>{data.map(tag =>\n *         <li key={tag.id}>{tag.name}</li>\n *     )}</ul>;\n * };\n */\nexport const useGetMany = <\n    RecordType extends RaRecord = any,\n    ErrorType = Error,\n>(\n    resource: string,\n    params: Partial<GetManyParams<RecordType>>,\n    options: UseGetManyOptions<RecordType, ErrorType> = {}\n): UseGetManyHookValue<RecordType, ErrorType> => {\n    const { ids, meta } = params;\n    const dataProvider = useDataProvider();\n    const queryClient = useQueryClient();\n    const {\n        onError = noop,\n        onSuccess = noop,\n        onSettled = noop,\n        enabled,\n        ...queryOptions\n    } = options;\n    const onSuccessEvent = useEvent(onSuccess);\n    const onErrorEvent = useEvent(onError);\n    const onSettledEvent = useEvent(onSettled);\n\n    const result = useQuery<RecordType[], ErrorType, RecordType[]>({\n        queryKey: [\n            resource,\n            'getMany',\n            {\n                ids: !ids || ids.length === 0 ? [] : ids.map(id => String(id)),\n                meta,\n            },\n        ],\n        queryFn: queryParams => {\n            if (!ids || ids.length === 0) {\n                // no need to call the dataProvider\n                return Promise.resolve([]);\n            }\n            return dataProvider\n                .getMany<RecordType>(resource, {\n                    ids,\n                    meta,\n                    signal:\n                        dataProvider.supportAbortSignal === true\n                            ? queryParams.signal\n                            : undefined,\n                })\n                .then(({ data }) => data);\n        },\n        placeholderData: () => {\n            const records =\n                !ids || ids.length === 0\n                    ? []\n                    : ids.map(id =>\n                          queryClient.getQueryData<RecordType>([\n                              resource,\n                              'getOne',\n                              { id: String(id), meta },\n                          ])\n                      );\n            if (records.some(record => record === undefined)) {\n                return undefined;\n            } else {\n                return records as RecordType[];\n            }\n        },\n        retry: false,\n        enabled: enabled ?? ids != null,\n        ...queryOptions,\n    });\n\n    const metaValue = useRef(meta);\n    const resourceValue = useRef(resource);\n\n    useEffect(() => {\n        metaValue.current = meta;\n    }, [meta]);\n\n    useEffect(() => {\n        resourceValue.current = resource;\n    }, [resource]);\n\n    useEffect(() => {\n        if (\n            result.data === undefined ||\n            result.error != null ||\n            result.isFetching\n        )\n            return;\n        // optimistically populate the getOne cache\n        result.data.forEach(record => {\n            queryClient.setQueryData(\n                [\n                    resourceValue.current,\n                    'getOne',\n                    { id: String(record.id), meta: metaValue.current },\n                ],\n                oldRecord => oldRecord ?? record\n            );\n        });\n\n        onSuccessEvent(result.data);\n    }, [\n        queryClient,\n        onSuccessEvent,\n        result.data,\n        result.error,\n        result.isFetching,\n    ]);\n\n    useEffect(() => {\n        if (result.error == null || result.isFetching) return;\n        onErrorEvent(result.error);\n    }, [onErrorEvent, result.error, result.isFetching]);\n\n    useEffect(() => {\n        if (result.status === 'pending' || result.isFetching) return;\n        onSettledEvent(result.data, result.error);\n    }, [\n        onSettledEvent,\n        result.data,\n        result.error,\n        result.status,\n        result.isFetching,\n    ]);\n\n    return result;\n};\n\nconst noop = () => undefined;\n\nexport type UseGetManyOptions<\n    RecordType extends RaRecord = any,\n    ErrorType = Error,\n> = Omit<UseQueryOptions<RecordType[], ErrorType>, 'queryKey' | 'queryFn'> & {\n    onSuccess?: (data: RecordType[]) => void;\n    onError?: (error: ErrorType) => void;\n    onSettled?: (data?: RecordType[], error?: ErrorType | null) => void;\n};\n\nexport type UseGetManyHookValue<\n    RecordType extends RaRecord = any,\n    ErrorType = Error,\n> = UseQueryResult<RecordType[], ErrorType>;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}