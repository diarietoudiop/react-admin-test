{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport { useListController } from './useListController';\nimport { OptionalResourceContextProvider } from '../../core';\nimport { ListContextProvider } from './ListContextProvider';\nimport { useIsAuthPending } from '../../auth';\n/**\n * Call useListController and put the value in a ListContext\n *\n * Base class for <List> components, without UI.\n *\n * Accepts any props accepted by useListController:\n * - filter: permanent filter applied to the list\n * - filters: Filter element, to display the filters\n * - filterDefaultValues: object;\n * - perPage: Number of results per page\n * - sort: Default sort\n * - exporter: exported function\n *\n * @example // Custom list layout\n *\n * const PostList = () => (\n *     <ListBase perPage={10}>\n *         <div>\n *              List metrics...\n *         </div>\n *         <Grid container>\n *             <Grid item xs={8}>\n *                 <SimpleList primaryText={record => record.title} />\n *             </Grid>\n *             <Grid item xs={4}>\n *                 List instructions...\n *             </Grid>\n *         </Grid>\n *         <div>\n *             Post related links...\n *         </div>\n *     </ListBase>\n * );\n */\nexport var ListBase = function (_a) {\n  var children = _a.children,\n    _b = _a.loading,\n    loading = _b === void 0 ? null : _b,\n    props = __rest(_a, [\"children\", \"loading\"]);\n  var controllerProps = useListController(props);\n  var isAuthPending = useIsAuthPending({\n    resource: controllerProps.resource,\n    action: 'list'\n  });\n  if (isAuthPending && !props.disableAuthentication) {\n    return loading;\n  }\n  return (\n    // We pass props.resource here as we don't need to create a new ResourceContext if the props is not provided\n    React.createElement(OptionalResourceContextProvider, {\n      value: props.resource\n    }, React.createElement(ListContextProvider, {\n      value: controllerProps\n    }, children))\n  );\n};","map":{"version":3,"names":["React","useListController","OptionalResourceContextProvider","ListContextProvider","useIsAuthPending","ListBase","_a","children","_b","loading","props","__rest","controllerProps","isAuthPending","resource","action","disableAuthentication","createElement","value"],"sources":["/home/diarietou/Bureau/afterSA/test/testfront/react-admin-test/node_modules/ra-core/src/controller/list/ListBase.tsx"],"sourcesContent":["import * as React from 'react';\nimport { ReactNode } from 'react';\nimport { useListController, ListControllerProps } from './useListController';\nimport { OptionalResourceContextProvider } from '../../core';\nimport { RaRecord } from '../../types';\nimport { ListContextProvider } from './ListContextProvider';\nimport { useIsAuthPending } from '../../auth';\n\n/**\n * Call useListController and put the value in a ListContext\n *\n * Base class for <List> components, without UI.\n *\n * Accepts any props accepted by useListController:\n * - filter: permanent filter applied to the list\n * - filters: Filter element, to display the filters\n * - filterDefaultValues: object;\n * - perPage: Number of results per page\n * - sort: Default sort\n * - exporter: exported function\n *\n * @example // Custom list layout\n *\n * const PostList = () => (\n *     <ListBase perPage={10}>\n *         <div>\n *              List metrics...\n *         </div>\n *         <Grid container>\n *             <Grid item xs={8}>\n *                 <SimpleList primaryText={record => record.title} />\n *             </Grid>\n *             <Grid item xs={4}>\n *                 List instructions...\n *             </Grid>\n *         </Grid>\n *         <div>\n *             Post related links...\n *         </div>\n *     </ListBase>\n * );\n */\nexport const ListBase = <RecordType extends RaRecord = any>({\n    children,\n    loading = null,\n    ...props\n}: ListBaseProps<RecordType>) => {\n    const controllerProps = useListController<RecordType>(props);\n    const isAuthPending = useIsAuthPending({\n        resource: controllerProps.resource,\n        action: 'list',\n    });\n\n    if (isAuthPending && !props.disableAuthentication) {\n        return loading;\n    }\n\n    return (\n        // We pass props.resource here as we don't need to create a new ResourceContext if the props is not provided\n        <OptionalResourceContextProvider value={props.resource}>\n            <ListContextProvider value={controllerProps}>\n                {children}\n            </ListContextProvider>\n        </OptionalResourceContextProvider>\n    );\n};\n\nexport interface ListBaseProps<RecordType extends RaRecord = any>\n    extends ListControllerProps<RecordType> {\n    children: ReactNode;\n    loading?: ReactNode;\n}\n"],"mappings":";;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAE9B,SAASC,iBAAiB,QAA6B,qBAAqB;AAC5E,SAASC,+BAA+B,QAAQ,YAAY;AAE5D,SAASC,mBAAmB,QAAQ,uBAAuB;AAC3D,SAASC,gBAAgB,QAAQ,YAAY;AAE7C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCA,OAAO,IAAMC,QAAQ,GAAG,SAAAA,CAAoCC,EAIhC;EAHxB,IAAAC,QAAQ,GAAAD,EAAA,CAAAC,QAAA;IACRC,EAAA,GAAAF,EAAA,CAAAG,OAAc;IAAdA,OAAO,GAAAD,EAAA,cAAG,IAAI,GAAAA,EAAA;IACXE,KAAK,GAAAC,MAAA,CAAAL,EAAA,EAHgD,uBAI3D,CADW;EAER,IAAMM,eAAe,GAAGX,iBAAiB,CAAaS,KAAK,CAAC;EAC5D,IAAMG,aAAa,GAAGT,gBAAgB,CAAC;IACnCU,QAAQ,EAAEF,eAAe,CAACE,QAAQ;IAClCC,MAAM,EAAE;GACX,CAAC;EAEF,IAAIF,aAAa,IAAI,CAACH,KAAK,CAACM,qBAAqB,EAAE;IAC/C,OAAOP,OAAO;;EAGlB;IACI;IACAT,KAAA,CAAAiB,aAAA,CAACf,+BAA+B;MAACgB,KAAK,EAAER,KAAK,CAACI;IAAQ,GAClDd,KAAA,CAAAiB,aAAA,CAACd,mBAAmB;MAACe,KAAK,EAAEN;IAAe,GACtCL,QAAQ,CACS;EACQ;AAE1C,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}