{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { useEffect } from 'react';\nimport { useNavigate } from 'react-router';\nimport { useCanAccess } from './useCanAccess';\nimport { useBasename } from '../routing';\n/**\n * A hook that calls the authProvider.canAccess() method for a provided resource and action (and optionally a record).\n * It redirects to the /access-denied page if the user doesn't have the required permissions.\n * It redirects to the /authentication-error page if the authProvider.canAccess throws an error.\n *\n * The return value updates according to the request state:\n *\n * - start: { isPending: true }\n * - success: { isPending: false }\n * - error: { error: [error from provider], isPending: false }\n *\n * Useful to enable or disable features based on users permissions.\n *\n * @param {Object} params Any params you want to pass to the authProvider\n * @param {string} params.resource The resource to check access for\n * @param {string} params.action The action to check access for\n * @param {Object} params.record Optional. The record to check access for\n *\n * @returns Return the react-query result.\n *\n * @example\n *     import { useRequireAccess } from 'react-admin';\n *\n *     const PostDetail = () => {\n *         const { isPending } = useRequireAccess({\n *             resource: 'posts',\n *             action: 'read',\n *         });\n *         if (isPending) {\n *             return null;\n *         }\n *\n *         return <PostEdit />;\n *     };\n */\nexport var useRequireAccess = function (params) {\n  var _a = useCanAccess(params),\n    canAccess = _a.canAccess,\n    data = _a.data,\n    error = _a.error,\n    rest = __rest(_a, [\"canAccess\", \"data\", \"error\"]);\n  var navigate = useNavigate();\n  var basename = useBasename();\n  useEffect(function () {\n    if (rest.isPending) return;\n    if (canAccess === false) {\n      navigate(\"\".concat(basename, \"/access-denied\"));\n    }\n  }, [basename, canAccess, navigate, rest.isPending]);\n  useEffect(function () {\n    if (error) {\n      navigate(\"\".concat(basename, \"/authentication-error\"));\n    }\n  }, [basename, navigate, error]);\n  return rest;\n};","map":{"version":3,"names":["useEffect","useNavigate","useCanAccess","useBasename","useRequireAccess","params","_a","canAccess","data","error","rest","__rest","navigate","basename","isPending","concat"],"sources":["/home/diarietou/Bureau/afterSA/test/testfront/react-admin-test/node_modules/ra-core/src/auth/useRequireAccess.tsx"],"sourcesContent":["import { useEffect } from 'react';\nimport { useNavigate } from 'react-router';\nimport { RaRecord } from '../types';\nimport {\n    useCanAccess,\n    UseCanAccessOptions,\n    UseCanAccessResult,\n} from './useCanAccess';\nimport { useBasename } from '../routing';\n\n/**\n * A hook that calls the authProvider.canAccess() method for a provided resource and action (and optionally a record).\n * It redirects to the /access-denied page if the user doesn't have the required permissions.\n * It redirects to the /authentication-error page if the authProvider.canAccess throws an error.\n *\n * The return value updates according to the request state:\n *\n * - start: { isPending: true }\n * - success: { isPending: false }\n * - error: { error: [error from provider], isPending: false }\n *\n * Useful to enable or disable features based on users permissions.\n *\n * @param {Object} params Any params you want to pass to the authProvider\n * @param {string} params.resource The resource to check access for\n * @param {string} params.action The action to check access for\n * @param {Object} params.record Optional. The record to check access for\n *\n * @returns Return the react-query result.\n *\n * @example\n *     import { useRequireAccess } from 'react-admin';\n *\n *     const PostDetail = () => {\n *         const { isPending } = useRequireAccess({\n *             resource: 'posts',\n *             action: 'read',\n *         });\n *         if (isPending) {\n *             return null;\n *         }\n *\n *         return <PostEdit />;\n *     };\n */\nexport const useRequireAccess = <\n    RecordType extends RaRecord | Omit<RaRecord, 'id'> = RaRecord,\n    ErrorType extends Error = Error,\n>(\n    params: UseRequireAccessOptions<RecordType, ErrorType>\n) => {\n    const { canAccess, data, error, ...rest } = useCanAccess(params);\n    const navigate = useNavigate();\n    const basename = useBasename();\n\n    useEffect(() => {\n        if (rest.isPending) return;\n\n        if (canAccess === false) {\n            navigate(`${basename}/access-denied`);\n        }\n    }, [basename, canAccess, navigate, rest.isPending]);\n\n    useEffect(() => {\n        if (error) {\n            navigate(`${basename}/authentication-error`);\n        }\n    }, [basename, navigate, error]);\n\n    return rest;\n};\n\nexport type UseRequireAccessOptions<\n    RecordType extends RaRecord | Omit<RaRecord, 'id'> = RaRecord,\n    ErrorType extends Error = Error,\n> = UseCanAccessOptions<RecordType, ErrorType>;\n\nexport type UseRequireAccessResult<ErrorType extends Error = Error> = Omit<\n    UseCanAccessResult<ErrorType>,\n    'canAccess' | 'data'\n>;\n"],"mappings":";;;;;;;;AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,WAAW,QAAQ,cAAc;AAE1C,SACIC,YAAY,QAGT,gBAAgB;AACvB,SAASC,WAAW,QAAQ,YAAY;AAExC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCA,OAAO,IAAMC,gBAAgB,GAAG,SAAAA,CAI5BC,MAAsD;EAEtD,IAAMC,EAAA,GAAsCJ,YAAY,CAACG,MAAM,CAAC;IAAxDE,SAAS,GAAAD,EAAA,CAAAC,SAAA;IAAEC,IAAI,GAAAF,EAAA,CAAAE,IAAA;IAAEC,KAAK,GAAAH,EAAA,CAAAG,KAAA;IAAKC,IAAI,GAAAC,MAAA,CAAAL,EAAA,EAAjC,8BAAmC,CAAuB;EAChE,IAAMM,QAAQ,GAAGX,WAAW,EAAE;EAC9B,IAAMY,QAAQ,GAAGV,WAAW,EAAE;EAE9BH,SAAS,CAAC;IACN,IAAIU,IAAI,CAACI,SAAS,EAAE;IAEpB,IAAIP,SAAS,KAAK,KAAK,EAAE;MACrBK,QAAQ,CAAC,GAAAG,MAAA,CAAGF,QAAQ,mBAAgB,CAAC;;EAE7C,CAAC,EAAE,CAACA,QAAQ,EAAEN,SAAS,EAAEK,QAAQ,EAAEF,IAAI,CAACI,SAAS,CAAC,CAAC;EAEnDd,SAAS,CAAC;IACN,IAAIS,KAAK,EAAE;MACPG,QAAQ,CAAC,GAAAG,MAAA,CAAGF,QAAQ,0BAAuB,CAAC;;EAEpD,CAAC,EAAE,CAACA,QAAQ,EAAED,QAAQ,EAAEH,KAAK,CAAC,CAAC;EAE/B,OAAOC,IAAI;AACf,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}