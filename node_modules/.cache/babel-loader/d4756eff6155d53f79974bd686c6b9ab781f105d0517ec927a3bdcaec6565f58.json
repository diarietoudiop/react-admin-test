{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport React, { useCallback } from 'react';\nimport { useListContext } from 'ra-core';\nimport { alpha, styled } from '@mui/material/styles';\nimport { Button } from './Button';\n/**\n * Select all items in the current List context.\n *\n * Used in Datagrid's bulk action toolbar.\n *\n * @typedef {Object} Props the props you can use\n * @prop {string} label Button label. Defaults to 'ra.action.select_all_button', translated.\n * @prop {string} limit Maximum number of items to select. Defaults to 250.\n * @prop {function} queryOptions Object of options passed to react-query.\n *\n * @param {Props} props\n *\n * @example\n *\n * import { List, Datagrid, BulkActionsToolbar, SelectAllButton, BulkDeleteButton } from 'react-admin';\n *\n * const PostSelectAllButton = () => (\n *     <SelectAllButton\n *         label=\"Select all records\"\n *         queryOptions={{ meta: { foo: 'bar' } }}\n *     />\n * );\n *\n * export const PostList = () => (\n *     <List>\n *         <Datagrid\n *             bulkActionsToolbar={\n *                 <BulkActionsToolbar selectAllButton={PostSelectAllButton}>\n *                     <BulkDeleteButton />\n *                 </BulkActionsToolbar>\n *             }\n *         >\n *             ...\n *         </Datagrid>\n *     </List>\n * );\n */\nexport var SelectAllButton = function (props) {\n  var _a = props.label,\n    label = _a === void 0 ? 'ra.action.select_all_button' : _a,\n    _b = props.limit,\n    limit = _b === void 0 ? 250 : _b,\n    onClick = props.onClick,\n    queryOptions = props.queryOptions,\n    rest = __rest(props, [\"label\", \"limit\", \"onClick\", \"queryOptions\"]);\n  var _c = useListContext(),\n    total = _c.total,\n    selectedIds = _c.selectedIds,\n    onSelectAll = _c.onSelectAll,\n    data = _c.data;\n  var handleClick = useCallback(function (event) {\n    onSelectAll({\n      limit: limit,\n      queryOptions: queryOptions\n    });\n    if (onClick) onClick(event);\n  }, [onClick, onSelectAll, queryOptions, limit]);\n  var areAllDataSelected = data && data.every(function (item) {\n    return selectedIds.includes(item.id);\n  });\n  if (total === selectedIds.length || selectedIds.length >= limit || !areAllDataSelected) return null;\n  return React.createElement(StyledButton, __assign({\n    label: label,\n    onClick: handleClick,\n    type: \"button\"\n  }, rest));\n};\nvar PREFIX = 'RaSelectAllButton';\nvar StyledButton = styled(Button, {\n  name: PREFIX,\n  overridesResolver: function (props, styles) {\n    return styles.root;\n  }\n})(function (_a) {\n  var theme = _a.theme;\n  return {\n    '&:hover': {\n      backgroundColor: alpha(theme.palette.primary.main, 0.12),\n      // Reset on mouse devices\n      '@media (hover: none)': {\n        backgroundColor: 'transparent'\n      }\n    }\n  };\n});","map":{"version":3,"names":["React","useCallback","useListContext","alpha","styled","Button","SelectAllButton","props","_a","label","_b","limit","onClick","queryOptions","rest","__rest","_c","total","selectedIds","onSelectAll","data","handleClick","event","areAllDataSelected","every","item","includes","id","length","createElement","StyledButton","__assign","type","PREFIX","name","overridesResolver","styles","root","theme","backgroundColor","palette","primary","main"],"sources":["/home/diarietou/Bureau/afterSA/test/testfront/react-admin-test/node_modules/ra-ui-materialui/src/button/SelectAllButton.tsx"],"sourcesContent":["import React, { useCallback } from 'react';\nimport { useListContext } from 'ra-core';\nimport {\n    type RaRecord,\n    type UseGetListOptions,\n    type UseReferenceArrayFieldControllerParams,\n    type UseReferenceManyFieldControllerParams,\n} from 'ra-core';\nimport { alpha, styled } from '@mui/material/styles';\n\nimport { Button, ButtonProps } from './Button';\n\n/**\n * Select all items in the current List context.\n *\n * Used in Datagrid's bulk action toolbar.\n *\n * @typedef {Object} Props the props you can use\n * @prop {string} label Button label. Defaults to 'ra.action.select_all_button', translated.\n * @prop {string} limit Maximum number of items to select. Defaults to 250.\n * @prop {function} queryOptions Object of options passed to react-query.\n *\n * @param {Props} props\n *\n * @example\n *\n * import { List, Datagrid, BulkActionsToolbar, SelectAllButton, BulkDeleteButton } from 'react-admin';\n *\n * const PostSelectAllButton = () => (\n *     <SelectAllButton\n *         label=\"Select all records\"\n *         queryOptions={{ meta: { foo: 'bar' } }}\n *     />\n * );\n *\n * export const PostList = () => (\n *     <List>\n *         <Datagrid\n *             bulkActionsToolbar={\n *                 <BulkActionsToolbar selectAllButton={PostSelectAllButton}>\n *                     <BulkDeleteButton />\n *                 </BulkActionsToolbar>\n *             }\n *         >\n *             ...\n *         </Datagrid>\n *     </List>\n * );\n */\nexport const SelectAllButton = (props: SelectAllButtonProps) => {\n    const {\n        label = 'ra.action.select_all_button',\n        limit = 250,\n        onClick,\n        queryOptions,\n        ...rest\n    } = props;\n\n    const { total, selectedIds, onSelectAll, data } = useListContext();\n    const handleClick = useCallback(\n        event => {\n            onSelectAll({ limit, queryOptions });\n            if (onClick) onClick(event);\n        },\n        [onClick, onSelectAll, queryOptions, limit]\n    );\n\n    const areAllDataSelected =\n        data && data.every(item => selectedIds.includes(item.id));\n\n    if (\n        total === selectedIds.length ||\n        selectedIds.length >= limit ||\n        !areAllDataSelected\n    )\n        return null;\n\n    return (\n        <StyledButton\n            label={label}\n            onClick={handleClick}\n            type=\"button\"\n            {...rest}\n        />\n    );\n};\n\nexport type SelectAllButtonProps<RecordType extends RaRecord = any> =\n    ButtonProps & {\n        limit?: number;\n        queryOptions?:\n            | UseGetListOptions<RecordType>\n            | UseReferenceArrayFieldControllerParams<RecordType>['queryOptions']\n            | UseReferenceManyFieldControllerParams<RecordType>['queryOptions'];\n    };\n\nconst PREFIX = 'RaSelectAllButton';\n\nconst StyledButton = styled(Button, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    '&:hover': {\n        backgroundColor: alpha(theme.palette.primary.main, 0.12),\n        // Reset on mouse devices\n        '@media (hover: none)': {\n            backgroundColor: 'transparent',\n        },\n    },\n}));\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAK,IAAIC,WAAW,QAAQ,OAAO;AAC1C,SAASC,cAAc,QAAQ,SAAS;AAOxC,SAASC,KAAK,EAAEC,MAAM,QAAQ,sBAAsB;AAEpD,SAASC,MAAM,QAAqB,UAAU;AAE9C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCA,OAAO,IAAMC,eAAe,GAAG,SAAAA,CAACC,KAA2B;EAEnD,IAAAC,EAAA,GAKAD,KAAK,CAAAE,KALgC;IAArCA,KAAK,GAAAD,EAAA,cAAG,6BAA6B,GAAAA,EAAA;IACrCE,EAAA,GAIAH,KAAK,CAAAI,KAJM;IAAXA,KAAK,GAAAD,EAAA,cAAG,GAAG,GAAAA,EAAA;IACXE,OAAO,GAGPL,KAAK,CAAAK,OAHE;IACPC,YAAY,GAEZN,KAAK,CAAAM,YAFO;IACTC,IAAI,GAAAC,MAAA,CACPR,KAAK,EANH,6CAML,CADU;EAGL,IAAAS,EAAA,GAA4Cd,cAAc,EAAE;IAA1De,KAAK,GAAAD,EAAA,CAAAC,KAAA;IAAEC,WAAW,GAAAF,EAAA,CAAAE,WAAA;IAAEC,WAAW,GAAAH,EAAA,CAAAG,WAAA;IAAEC,IAAI,GAAAJ,EAAA,CAAAI,IAAqB;EAClE,IAAMC,WAAW,GAAGpB,WAAW,CAC3B,UAAAqB,KAAK;IACDH,WAAW,CAAC;MAAER,KAAK,EAAAA,KAAA;MAAEE,YAAY,EAAAA;IAAA,CAAE,CAAC;IACpC,IAAID,OAAO,EAAEA,OAAO,CAACU,KAAK,CAAC;EAC/B,CAAC,EACD,CAACV,OAAO,EAAEO,WAAW,EAAEN,YAAY,EAAEF,KAAK,CAAC,CAC9C;EAED,IAAMY,kBAAkB,GACpBH,IAAI,IAAIA,IAAI,CAACI,KAAK,CAAC,UAAAC,IAAI;IAAI,OAAAP,WAAW,CAACQ,QAAQ,CAACD,IAAI,CAACE,EAAE,CAAC;EAA7B,CAA6B,CAAC;EAE7D,IACIV,KAAK,KAAKC,WAAW,CAACU,MAAM,IAC5BV,WAAW,CAACU,MAAM,IAAIjB,KAAK,IAC3B,CAACY,kBAAkB,EAEnB,OAAO,IAAI;EAEf,OACIvB,KAAA,CAAA6B,aAAA,CAACC,YAAY,EAAAC,QAAA;IACTtB,KAAK,EAAEA,KAAK;IACZG,OAAO,EAAES,WAAW;IACpBW,IAAI,EAAC;EAAQ,GACTlB,IAAI,EACV;AAEV,CAAC;AAWD,IAAMmB,MAAM,GAAG,mBAAmB;AAElC,IAAMH,YAAY,GAAG1B,MAAM,CAACC,MAAM,EAAE;EAChC6B,IAAI,EAAED,MAAM;EACZE,iBAAiB,EAAE,SAAAA,CAAC5B,KAAK,EAAE6B,MAAM;IAAK,OAAAA,MAAM,CAACC,IAAI;EAAX;CACzC,CAAC,CAAC,UAAC7B,EAAS;MAAP8B,KAAK,GAAA9B,EAAA,CAAA8B,KAAA;EAAO,OAAC;IACf,SAAS,EAAE;MACPC,eAAe,EAAEpC,KAAK,CAACmC,KAAK,CAACE,OAAO,CAACC,OAAO,CAACC,IAAI,EAAE,IAAI,CAAC;MACxD;MACA,sBAAsB,EAAE;QACpBH,eAAe,EAAE;;;GAG5B;AARiB,CAQhB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}